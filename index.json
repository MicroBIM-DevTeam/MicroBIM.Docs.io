{
  "api/MB.Common.Aspects.LogAspect.html": {
    "href": "api/MB.Common.Aspects.LogAspect.html",
    "title": "Class LogAspect | MIcroBIM Docs",
    "summary": "Class LogAspect Namespace MB.Common.Aspects Assembly MB.Common.dll An aspect that logs method entry, exit, and exceptions using Serilog. This aspect can be applied to methods to automatically log their execution lifecycle. public sealed class LogAspect : OnMethodBoundaryAspect, _Attribute Inheritance object Attribute OnMethodBoundaryAspect LogAspect Implements _Attribute Inherited Members OnMethodBoundaryAspect.CompileTimeValidate(MethodBase) OnMethodBoundaryAspect.AttributeTargetMemberAttributes OnMethodBoundaryAspect.NamespaceFilter OnMethodBoundaryAspect.TypeNameFilter OnMethodBoundaryAspect.MethodNameFilter Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors LogAspect() public LogAspect() Methods OnEntry(MethodExecutionArgs) Called before the execution of the target method. Logs the entry into the method with timestamp. public override void OnEntry(MethodExecutionArgs args) Parameters args MethodExecutionArgs Provides context about the method being executed. OnException(MethodExecutionArgs) Called when an exception is thrown during method execution. Logs the exception details. public override void OnException(MethodExecutionArgs args) Parameters args MethodExecutionArgs Provides context about the method and the thrown exception. OnExit(MethodExecutionArgs) Called after the successful execution of the target method. Logs the exit of the method with timestamp. public override void OnExit(MethodExecutionArgs args) Parameters args MethodExecutionArgs Provides context about the method that was executed."
  },
  "api/MB.Common.Aspects.html": {
    "href": "api/MB.Common.Aspects.html",
    "title": "Namespace MB.Common.Aspects | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Aspects Classes LogAspect An aspect that logs method entry, exit, and exceptions using Serilog. This aspect can be applied to methods to automatically log their execution lifecycle."
  },
  "api/MB.Common.Attributes.ErrorInformationAttribute.html": {
    "href": "api/MB.Common.Attributes.ErrorInformationAttribute.html",
    "title": "Class ErrorInformationAttribute | MIcroBIM Docs",
    "summary": "Class ErrorInformationAttribute Namespace MB.Common.Attributes Assembly MB.Common.dll An attribute used to annotate fields with additional error information. This is useful for attaching meaningful error messages or metadata to enum fields or other constants. [AttributeUsage(AttributeTargets.Field)] public class ErrorInformationAttribute : Attribute, _Attribute Inheritance object Attribute ErrorInformationAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors ErrorInformationAttribute(string) Initializes a new instance of the ErrorInformationAttribute class with the specified error information string. public ErrorInformationAttribute(string errorInformation) Parameters errorInformation string The error information to associate with the field. Properties ErrorInformation Gets the error information message associated with the field. public string ErrorInformation { get; } Property Value string"
  },
  "api/MB.Common.Attributes.GuidAttribute.html": {
    "href": "api/MB.Common.Attributes.GuidAttribute.html",
    "title": "Class GuidAttribute | MIcroBIM Docs",
    "summary": "Class GuidAttribute Namespace MB.Common.Attributes Assembly MB.Common.dll Represents a custom attribute that can be applied to fields to associate them with a specific GUID. [AttributeUsage(AttributeTargets.Field)] public class GuidAttribute : Attribute, _Attribute Inheritance object Attribute GuidAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks This attribute allows developers to tag fields with a GUID value, which can then be used for identification, serialization, or other purposes where a globally unique identifier is required. Constructors GuidAttribute(string) Initializes a new instance of the GuidAttribute class with the specified GUID string. public GuidAttribute(string guid) Parameters guid string The GUID string to associate with the field. Must be in a valid GUID format. Exceptions FormatException Thrown when the provided string is not in a valid GUID format. Properties Guid Gets the GUID associated with the field to which this attribute is applied. public string Guid { get; } Property Value string"
  },
  "api/MB.Common.Attributes.RequiredSharedParametersAttribute.html": {
    "href": "api/MB.Common.Attributes.RequiredSharedParametersAttribute.html",
    "title": "Class RequiredSharedParametersAttribute | MIcroBIM Docs",
    "summary": "Class RequiredSharedParametersAttribute Namespace MB.Common.Attributes Assembly MB.Common.dll Represents an attribute to specify required shared parameters for a given target. [AttributeUsage(AttributeTargets.Field)] public class RequiredSharedParametersAttribute : Attribute, _Attribute Inheritance object Attribute RequiredSharedParametersAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks This attribute allows developers to declare a set of shared parameters that are required for the functionality or configuration of a specific target (e.g., class, method, or property). Constructors RequiredSharedParametersAttribute(params ToolsSharedParameter[]) Initializes a new instance of the RequiredSharedParametersAttribute class. public RequiredSharedParametersAttribute(params ToolsSharedParameter[] sharedParameters) Parameters sharedParameters ToolsSharedParameter[] A variable-length array of ToolsSharedParameter objects that represent the required shared parameters. Exceptions ArgumentNullException Thrown if the provided sharedParameters array is null. Properties SharedParameters Gets the array of shared parameters that are required. public ToolsSharedParameter[] SharedParameters { get; } Property Value ToolsSharedParameter[]"
  },
  "api/MB.Common.Attributes.RevitCategoriesAttribute.html": {
    "href": "api/MB.Common.Attributes.RevitCategoriesAttribute.html",
    "title": "Class RevitCategoriesAttribute | MIcroBIM Docs",
    "summary": "Class RevitCategoriesAttribute Namespace MB.Common.Attributes Assembly MB.Common.dll Represents an attribute to associate a target with a set of Revit built-in categories. [AttributeUsage(AttributeTargets.Field)] public class RevitCategoriesAttribute : Attribute, _Attribute Inheritance object Attribute RevitCategoriesAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks This attribute can be used to declare which Revit built-in categories are relevant for a specific class, method, or property. It allows for filtering or categorization based on Revit's predefined categories. Constructors RevitCategoriesAttribute(params BuiltInCategory[]) Initializes a new instance of the RevitCategoriesAttribute class. public RevitCategoriesAttribute(params BuiltInCategory[] categories) Parameters categories BuiltInCategory[] A variable-length array of BuiltInCategory enums that represent the relevant Revit categories. Exceptions ArgumentNullException Thrown if the provided categories array is null. Properties Categories Gets the array of Revit built-in categories associated with the target. public BuiltInCategory[] Categories { get; } Property Value BuiltInCategory[]"
  },
  "api/MB.Common.Attributes.SharedParameterTypeAttribute.html": {
    "href": "api/MB.Common.Attributes.SharedParameterTypeAttribute.html",
    "title": "Class SharedParameterTypeAttribute | MIcroBIM Docs",
    "summary": "Class SharedParameterTypeAttribute Namespace MB.Common.Attributes Assembly MB.Common.dll Represents an attribute to specify the type of a shared parameter. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property|AttributeTargets.Field)] public class SharedParameterTypeAttribute : Attribute, _Attribute Inheritance object Attribute SharedParameterTypeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks This attribute is used to associate a target (e.g., a class, method, or property) with a specific shared parameter type. It helps define the type of shared parameter in a structured and reusable way. Constructors SharedParameterTypeAttribute(SharedParameterType) Initializes a new instance of the SharedParameterTypeAttribute class. public SharedParameterTypeAttribute(SharedParameterType type) Parameters type SharedParameterType The SharedParameterType to associate with the target. Exceptions ArgumentNullException Thrown if the provided type is null (only if SharedParameterType is a reference type). Properties Type Gets the type of the shared parameter associated with this attribute. public SharedParameterType Type { get; } Property Value SharedParameterType"
  },
  "api/MB.Common.Attributes.html": {
    "href": "api/MB.Common.Attributes.html",
    "title": "Namespace MB.Common.Attributes | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Attributes Classes ErrorInformationAttribute An attribute used to annotate fields with additional error information. This is useful for attaching meaningful error messages or metadata to enum fields or other constants. GuidAttribute Represents a custom attribute that can be applied to fields to associate them with a specific GUID. RequiredSharedParametersAttribute Represents an attribute to specify required shared parameters for a given target. RevitCategoriesAttribute Represents an attribute to associate a target with a set of Revit built-in categories. SharedParameterTypeAttribute Represents an attribute to specify the type of a shared parameter."
  },
  "api/MB.Common.Comparers.BoundingBoxComparer.html": {
    "href": "api/MB.Common.Comparers.BoundingBoxComparer.html",
    "title": "Class BoundingBoxComparer | MIcroBIM Docs",
    "summary": "Class BoundingBoxComparer Namespace MB.Common.Comparers Assembly MB.Common.dll A utility class for comparing and resolving bounding box coordinates from multiple points. public class BoundingBoxComparer Inheritance object BoundingBoxComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors BoundingBoxComparer() Initializes a new instance of the BoundingBoxComparer class. Sets initial values for bounds: maximum values for minimum bounds and minimum values for maximum bounds. public BoundingBoxComparer() Methods Compare(XYZ) Compares the given point with the current bounds and updates the bounds accordingly. public void Compare(XYZ point) Parameters point XYZ The 3D point to compare. Resolve() Resolves the current bounds into a minimum and maximum point, extending them by a fixed tolerance. public (XYZ min, XYZ max) Resolve() Returns (XYZ Perpendicular, XYZ Normal) A tuple containing: The minimum point (Autodesk.Revit.DB.XYZ) of the bounding box. The maximum point (Autodesk.Revit.DB.XYZ) of the bounding box."
  },
  "api/MB.Common.Comparers.html": {
    "href": "api/MB.Common.Comparers.html",
    "title": "Namespace MB.Common.Comparers | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Comparers Classes BoundingBoxComparer A utility class for comparing and resolving bounding box coordinates from multiple points."
  },
  "api/MB.Common.Constants.FilePaths.html": {
    "href": "api/MB.Common.Constants.FilePaths.html",
    "title": "Class FilePaths | MIcroBIM Docs",
    "summary": "Class FilePaths Namespace MB.Common.Constants Assembly MB.Common.dll Contains static file paths and predefined constants used throughout the application. Paths are based on the user's local application data folder. public static class FilePaths Inheritance object FilePaths Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Elbows Constant for identifying elbow elements. public const string Elbows = \"Elbows\" Field Value string FlexPipes Constant for identifying flexible pipe elements. public const string FlexPipes = \"Flex Pipes\" Field Value string HazardCoverageJson Constant for identifying pipe elements. public const string HazardCoverageJson = \"HazardCoverage.json\" Field Value string LogBaseDirectory Gets the base directory path where log files are stored. public static readonly string LogBaseDirectory Field Value string Remarks The directory path is constructed by combining the local application data folder, a subdirectory named \"MicroBIM\", and a \"Logs\" folder. This path is intended to provide a consistent location for storing application log files. Others Constant for identifying miscellaneous or other elements. public const string Others = \"Others\" Field Value string Outlets Constant for identifying outlet elements. public const string Outlets = \"Outlets\" Field Value string PipeAccessories Constant for identifying pipe accessory elements. public const string PipeAccessories = \"Pipe Accessories\" Field Value string Pipes Constant for identifying pipe elements. public const string Pipes = \"Pipes\" Field Value string Sprinklers Constant for identifying sprinkler elements. public const string Sprinklers = \"Sprinklers\" Field Value string Tees Constant for identifying tee elements. public const string Tees = \"Tees\" Field Value string Properties AutoSprinklerSpacing Gets the path to the directory containing Auto Sprinkler Spacing JSON files. public static string AutoSprinklerSpacing { get; } Property Value string ListingSettingsJsons Gets the path to the directory containing listing-specific Mapper JSON settings. public static string ListingSettingsJsons { get; } Property Value string MapperJsons Gets the path to the directory containing Mapper JSON files. public static string MapperJsons { get; } Property Value string MicroBimListingSettingsJsons Gets the path to the directory containing MicroBIM Listing Settings JSON files. public static string MicroBimListingSettingsJsons { get; } Property Value string SettingsJsons Gets the path to the directory containing general Mapper JSON settings. public static string SettingsJsons { get; } Property Value string UserListing Gets the path to the directory containing user-specific listing settings JSON files. public static string UserListing { get; } Property Value string UserValuesToStandardJson Path for mapping user-defined values to a standard JSON format within listing settings. public static string UserValuesToStandardJson { get; } Property Value string"
  },
  "api/MB.Common.Constants.MbErrorMessages.html": {
    "href": "api/MB.Common.Constants.MbErrorMessages.html",
    "title": "Class MbErrorMessages | MIcroBIM Docs",
    "summary": "Class MbErrorMessages Namespace MB.Common.Constants Assembly MB.Common.dll Contains predefined error message constants used throughout the application. Helps maintain consistency and manageability of user-facing messages. public static class MbErrorMessages Inheritance object MbErrorMessages Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields MoreThanOneSpaceSelected Error message displayed when more than one space is selected. public const string MoreThanOneSpaceSelected = \"Please select only one space.\" Field Value string NoSpaceSelected Error message displayed when no space is selected. public const string NoSpaceSelected = \"Please select the space.\" Field Value string NoSprinklerSelected Error message displayed when no sprinkler is selected. public const string NoSprinklerSelected = \"Please select at least one sprinkler.\" Field Value string SprinklerNotInsideSpace Error message displayed when a sprinkler is not located within the selected space. public const string SprinklerNotInsideSpace = \"Sprinkler is not inside the selected space.\" Field Value string"
  },
  "api/MB.Common.Constants.MbfFiles.html": {
    "href": "api/MB.Common.Constants.MbfFiles.html",
    "title": "Class MbfFiles | MIcroBIM Docs",
    "summary": "Class MbfFiles Namespace MB.Common.Constants Assembly MB.Common.dll Provides constants and utility properties for MBF-related file paths. public static class MbfFiles Inheritance object MbfFiles Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AddinDirectory Gets the directory of the currently executing assembly (Add-in directory). public static string AddinDirectory { get; } Property Value string Remarks This property dynamically resolves the directory path where the executing assembly is located. ToolsSharedParameter Gets the full path to the shared parameter file (3dfirespf.txt) used by MBF. public static string ToolsSharedParameter { get; } Property Value string"
  },
  "api/MB.Common.Constants.MbfGroups.html": {
    "href": "api/MB.Common.Constants.MbfGroups.html",
    "title": "Class MbfGroups | MIcroBIM Docs",
    "summary": "Class MbfGroups Namespace MB.Common.Constants Assembly MB.Common.dll Provides constant values for MBF parameter groups. public static class MbfGroups Inheritance object MbfGroups Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains group names for organizing parameters used in the MBF suite. These constants can be used to ensure consistent naming throughout the application. Fields Fittings Represents the group name for pipe accessory fittings parameters. public const string Fittings = \"MBFire-Pipes-Accessory-Fittings-Parameters\" Field Value string"
  },
  "api/MB.Common.Constants.html": {
    "href": "api/MB.Common.Constants.html",
    "title": "Namespace MB.Common.Constants | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Constants Classes FilePaths Contains static file paths and predefined constants used throughout the application. Paths are based on the user's local application data folder. MbErrorMessages Contains predefined error message constants used throughout the application. Helps maintain consistency and manageability of user-facing messages. MbfFiles Provides constants and utility properties for MBF-related file paths. MbfGroups Provides constant values for MBF parameter groups."
  },
  "api/MB.Common.Errors.Exceptions.MbException.html": {
    "href": "api/MB.Common.Errors.Exceptions.MbException.html",
    "title": "Class MbException | MIcroBIM Docs",
    "summary": "Class MbException Namespace MB.Common.Errors.Exceptions Assembly MB.Common.dll Represents a custom exception type used within the MicroBIM system. Wraps an MbError and provides a description derived from it. public class MbException : Exception, ISerializable, _Exception Inheritance object Exception MbException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors MbException(MbError) Represents a custom exception type used within the MicroBIM system. Wraps an MbError and provides a description derived from it. public MbException(MbError mbError) Parameters mbError MbError Properties Description Gets or sets the human-readable description of the error. This is generated from the associated MbError using its GetErrorMessage method. public string Description { get; set; } Property Value string MbError Gets or sets the MbError associated with this exception. This holds structured error information relevant to the exception. public MbError MbError { get; set; } Property Value MbError"
  },
  "api/MB.Common.Errors.Exceptions.html": {
    "href": "api/MB.Common.Errors.Exceptions.html",
    "title": "Namespace MB.Common.Errors.Exceptions | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Errors.Exceptions Classes MbException Represents a custom exception type used within the MicroBIM system. Wraps an MbError and provides a description derived from it."
  },
  "api/MB.Common.Errors.MbError.html": {
    "href": "api/MB.Common.Errors.MbError.html",
    "title": "Enum MbError | MIcroBIM Docs",
    "summary": "Enum MbError Namespace MB.Common.Errors Assembly MB.Common.dll Defines a list of error codes used throughout the application. Each enum value is annotated with ErrorInformationAttribute to provide a user-friendly error message. public enum MbError Extension Methods MbErrorExtensions.GetErrorMessage(MbError) Fields [ErrorInformation(\"Please select only one space.\")] MultipleSpacesSelected = 2 Error when more than one space is selected, but only one is expected. [ErrorInformation(\"Please select the space.\")] NoSpaceSelected = 1 Error when no space is selected by the user. [ErrorInformation(\"Please select at least one sprinkler.\")] NoSprinklerSelected = 3 Error when no sprinkler is selected. [ErrorInformation(\"Sprinkler is not inside the selected space.\")] SprinklersNotInsideSpace = 4 Error when selected sprinklers are not located inside the selected space."
  },
  "api/MB.Common.Errors.MbErrorExtensions.html": {
    "href": "api/MB.Common.Errors.MbErrorExtensions.html",
    "title": "Class MbErrorExtensions | MIcroBIM Docs",
    "summary": "Class MbErrorExtensions Namespace MB.Common.Errors Assembly MB.Common.dll Provides extension methods for the MbError enumeration. public static class MbErrorExtensions Inheritance object MbErrorExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetErrorMessage(MbError) Retrieves the error information associated with the specified MbError. public static string GetErrorMessage(this MbError error) Parameters error MbError The MbError instance for which the error message is retrieved. Returns string"
  },
  "api/MB.Common.Errors.html": {
    "href": "api/MB.Common.Errors.html",
    "title": "Namespace MB.Common.Errors | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Errors Classes MbErrorExtensions Provides extension methods for the MbError enumeration. Enums MbError Defines a list of error codes used throughout the application. Each enum value is annotated with ErrorInformationAttribute to provide a user-friendly error message."
  },
  "api/MB.Common.Jsons.GenericJsonFileService.html": {
    "href": "api/MB.Common.Jsons.GenericJsonFileService.html",
    "title": "Class GenericJsonFileService | MIcroBIM Docs",
    "summary": "Class GenericJsonFileService Namespace MB.Common.Jsons Assembly MB.Common.dll Provides generic methods for saving and loading JSON files from disk. public static class GenericJsonFileService Inheritance object GenericJsonFileService Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods EnsureFileExists(string) Ensures that a file exists at the specified path, creating it if necessary. public static MbResult<bool> EnsureFileExists(string filePath) Parameters filePath string The full path of the file to check or create. Must not be null, empty, or whitespace. Returns MbResult<bool> An MbResult<T> containing a boolean value indicating success or failure. Returns true if the file exists or was successfully created; otherwise, returns false with an error message. Remarks If the specified file does not exist, this method creates it along with any necessary directories. The created file will be initialized with an empty JSON array. Load<T>(string) Loads JSON data from a file and deserializes it into an object of type T. public static MbResult<T> Load<T>(string filePath) where T : new() Parameters filePath string The full path to the JSON file. Returns MbResult<T> An MbResult<T> containing the deserialized object, or an empty instance on failure. Type Parameters T The type to deserialize the JSON content into. Must have a parameterless constructor. Save<T>(T, string) Saves the given data as JSON to the specified file path. public static MbResult<bool> Save<T>(T data, string filePath) Parameters data T The data object to serialize and save. filePath string The full path where the file will be saved. Returns MbResult<bool> An MbResult<T> indicating success or failure. Type Parameters T The type of the data to serialize. Remarks Will automatically create the target directory if it doesn't exist."
  },
  "api/MB.Common.Jsons.html": {
    "href": "api/MB.Common.Jsons.html",
    "title": "Namespace MB.Common.Jsons | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Jsons Classes GenericJsonFileService Provides generic methods for saving and loading JSON files from disk."
  },
  "api/MB.Common.Parameters.RevitParameterManager.html": {
    "href": "api/MB.Common.Parameters.RevitParameterManager.html",
    "title": "Class RevitParameterManager | MIcroBIM Docs",
    "summary": "Class RevitParameterManager Namespace MB.Common.Parameters Assembly MB.Common.dll Manages shared parameters in a Revit document, ensuring required parameters exist and are properly configured. public class RevitParameterManager Inheritance object RevitParameterManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors RevitParameterManager() public RevitParameterManager() Methods EnsureParameters(Document, ToolsSharedParameter[]) Ensures that a set of shared parameters exists in the given Revit document. If any of the parameters are missing, they will be added during the transaction. public static void EnsureParameters(Document doc, ToolsSharedParameter[] parameters) Parameters doc Document The Revit Autodesk.Revit.DB.Document in which the parameters should be ensured. parameters ToolsSharedParameter[] An array of ToolsSharedParameter representing the shared parameters to verify or add. EnsureParameters(Document, MbfTool) Ensures that all required shared parameters for a specific tool exist in the Revit document. public static void EnsureParameters(Document doc, MbfTool tool) Parameters doc Document The Revit document. tool MbfTool The tool requiring the shared parameters."
  },
  "api/MB.Common.Parameters.html": {
    "href": "api/MB.Common.Parameters.html",
    "title": "Namespace MB.Common.Parameters | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Parameters Classes RevitParameterManager Manages shared parameters in a Revit document, ensuring required parameters exist and are properly configured."
  },
  "api/MB.Common.Services.EmbeddedResourceService.html": {
    "href": "api/MB.Common.Services.EmbeddedResourceService.html",
    "title": "Class EmbeddedResourceService | MIcroBIM Docs",
    "summary": "Class EmbeddedResourceService Namespace MB.Common.Services Assembly MB.Common.dll Provides functionality for accessing and processing embedded resources in assemblies. public static class EmbeddedResourceService Inheritance object EmbeddedResourceService Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoadEmbeddedResourceAsync<T>(string, Assembly) Loads and deserializes an embedded JSON resource file into a specified type. public static Task<T> LoadEmbeddedResourceAsync<T>(string resourceName, Assembly assembly) Parameters resourceName string The fully qualified name of the embedded resource assembly Assembly Returns Task<T> Deserialized object of type T from the JSON resource Type Parameters T The type to deserialize the JSON content into Exceptions FileNotFoundException Thrown when the specified embedded resource is not found"
  },
  "api/MB.Common.Services.MailService.html": {
    "href": "api/MB.Common.Services.MailService.html",
    "title": "Class MailService | MIcroBIM Docs",
    "summary": "Class MailService Namespace MB.Common.Services Assembly MB.Common.dll Provides methods for sending emails, including support for attachments and both synchronous and asynchronous operations. public static class MailService Inheritance object MailService Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Send(string, List<string>) Sends an email synchronously with optional attachments. Uses a predefined sender and receiver email configuration. [LogAspect] public static void Send(string msg, List<string> attachmentPaths = null) Parameters msg string The body of the email message. attachmentPaths List<string> Optional list of file paths to attach to the email. SendAsync(string, List<string>) Sends an email asynchronously with optional attachments. Useful for avoiding UI blocking during email transmission. [LogAspect] public static Task SendAsync(string msg, List<string> attachmentPaths = null) Parameters msg string The body of the email message. attachmentPaths List<string> Optional list of file paths to attach to the email. Returns Task"
  },
  "api/MB.Common.Services.html": {
    "href": "api/MB.Common.Services.html",
    "title": "Namespace MB.Common.Services | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Services Classes EmbeddedResourceService Provides functionality for accessing and processing embedded resources in assemblies. MailService Provides methods for sending emails, including support for attachments and both synchronous and asynchronous operations."
  },
  "api/MB.Common.Settings.ListingSettings.FittingGroupHelper.html": {
    "href": "api/MB.Common.Settings.ListingSettings.FittingGroupHelper.html",
    "title": "Class FittingGroupHelper | MIcroBIM Docs",
    "summary": "Class FittingGroupHelper Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Provides helper methods for grouping StandardFittingType values into their corresponding PDF group names for listing and reporting purposes. public static class FittingGroupHelper Inheritance object FittingGroupHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetPdfGroupName(StandardFittingType) Gets the PDF group name for a specified StandardFittingType. public static string GetPdfGroupName(StandardFittingType type) Parameters type StandardFittingType The fitting type to evaluate. Returns string The group name as a string if the type is recognized; otherwise, null. Possible group names include \"Threaded Fittings\", \"Grooved Fittings\", \"Welded Fittings\", \"IGS Fittings\", \"Flanged Fittings\", and \"Loose Outlets\"."
  },
  "api/MB.Common.Settings.ListingSettings.ListingConfig.html": {
    "href": "api/MB.Common.Settings.ListingSettings.ListingConfig.html",
    "title": "Class ListingConfig | MIcroBIM Docs",
    "summary": "Class ListingConfig Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Represents the configuration for a listing, including elements, family details, category, and fitting types. This class provides constructors to initialize its properties either from a collection of elements or from a Data Transfer Object (DTO). public class ListingConfig : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ListingConfig Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ListingConfig(ListingDto) Represents a configuration for a listing, managing elements, family names, symbol names, and associated metadata. public ListingConfig(ListingDto dto) Parameters dto ListingDto ListingConfig(List<FamilyInstance>, StandardFittingType) Represents the configuration of a listing, including information about the elements, fitting type, category, and suggested values. public ListingConfig(List<FamilyInstance> elements, StandardFittingType standardFitting = StandardFittingType.None) Parameters elements List<FamilyInstance> standardFitting StandardFittingType Remarks This class sets the initial configuration for a list of elements including family and symbol names, category, fitting type, and other properties based on a representative element from the provided list. ListingConfig(string, StandardFittingType) Represents the configuration for a listing, including the handling of family and symbol names, associated category, selected fitting type, and suggested values, derived from the specified inputs. public ListingConfig(string name, StandardFittingType selectedFittingType) Parameters name string selectedFittingType StandardFittingType Remarks This class processes the provided name and fitting type to initialize properties such as family name, symbol name, full name, and the category associated with the represented elements. It also manages suggested values and determines whether a valid value is selected. Properties CategoryName public string CategoryName { get; set; } Property Value string Count public int Count { get; set; } Property Value int Elements Gets the collection of FamilyInstance objects associated with the current listing configuration. public List<FamilyInstance> Elements { get; } Property Value List<FamilyInstance> Remarks This property holds an immutable list of family instance elements, typically used to represent a grouped set of related elements in a listing configuration. The collection is initialized during the creation of the ListingConfig and cannot be modified outside the class. FamilyName public string FamilyName { get; set; } Property Value string HasValue public bool HasValue { get; set; } Property Value bool Name public string Name { get; set; } Property Value string SelectedFittingType public StandardFittingType SelectedFittingType { get; set; } Property Value StandardFittingType SuggestedValues public List<StandardFittingType> SuggestedValues { get; set; } Property Value List<StandardFittingType> SymbolName public string SymbolName { get; set; } Property Value string"
  },
  "api/MB.Common.Settings.ListingSettings.ListingDto.html": {
    "href": "api/MB.Common.Settings.ListingSettings.ListingDto.html",
    "title": "Class ListingDto | MIcroBIM Docs",
    "summary": "Class ListingDto Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Represents a data transfer object for a listing, including details such as family name, symbol name, category, and selected fitting type. public class ListingDto Inheritance object ListingDto Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ListingDto(string, string, string, string, StandardFittingType) Initializes a new instance of the ListingDto class. public ListingDto(string familyName, string symbolName, string name, string categoryName, StandardFittingType selectedFittingType) Parameters familyName string The name of the Revit family. symbolName string The name of the family type or symbol. name string The display name or identifier for the listing. categoryName string The name of the Revit category. selectedFittingType StandardFittingType The selected standard fitting type. Properties CategoryName Gets or sets the name of the Revit category. public string CategoryName { get; set; } Property Value string FamilyName Gets or sets the name of the family in Revit. public string FamilyName { get; set; } Property Value string Name Gets or sets the display name or identifier for the listing. public string Name { get; set; } Property Value string SelectedFittingType Gets or sets the selected standard fitting type for the element. public StandardFittingType SelectedFittingType { get; set; } Property Value StandardFittingType SymbolName Gets or sets the name of the family type or symbol. public string SymbolName { get; set; } Property Value string"
  },
  "api/MB.Common.Settings.ListingSettings.ListingMapper.html": {
    "href": "api/MB.Common.Settings.ListingSettings.ListingMapper.html",
    "title": "Class ListingMapper | MIcroBIM Docs",
    "summary": "Class ListingMapper Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Provides methods for mapping between ListingConfig and ListingDto objects. public class ListingMapper Inheritance object ListingMapper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains static methods to facilitate the conversion of data between the ListingConfig and ListingDto types. These methods are useful for scenarios where data needs to be transferred between different layers of an application, such as mapping configuration data to a data transfer object (DTO) for use in APIs or other external systems. Constructors ListingMapper() public ListingMapper() Methods FromDto(ListingDto) Converts a ListingDto object into a ListingConfig object. public static ListingConfig FromDto(ListingDto dto) Parameters dto ListingDto The source ListingDto instance to be converted. Returns ListingConfig A new instance of ListingConfig containing the mapped data from the provided ListingDto. ToDto(ListingConfig) Converts a ListingConfig object into a ListingDto object. public static ListingDto ToDto(ListingConfig config) Parameters config ListingConfig The source ListingConfig instance to be converted. Returns ListingDto A new instance of ListingDto containing the mapped data from the provided ListingConfig."
  },
  "api/MB.Common.Settings.ListingSettings.ListingSettingsHelper.html": {
    "href": "api/MB.Common.Settings.ListingSettings.ListingSettingsHelper.html",
    "title": "Class ListingSettingsHelper | MIcroBIM Docs",
    "summary": "Class ListingSettingsHelper Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Provides helper methods for working with listing settings, including retrieval of ListingDto objects based on family and type information. public static class ListingSettingsHelper Inheritance object ListingSettingsHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetSelectedListingDto(string) Retrieves the ListingDto that matches the specified family name and type from the user listing settings. public static ListingDto? GetSelectedListingDto(string familyNameAndType) Parameters familyNameAndType string The combined family name and type to search for. Returns ListingDto The ListingDto that matches the specified familyNameAndType, or null if no match is found or if the user listing settings could not be loaded."
  },
  "api/MB.Common.Settings.ListingSettings.MicroBimListingRecommendationDto.html": {
    "href": "api/MB.Common.Settings.ListingSettings.MicroBimListingRecommendationDto.html",
    "title": "Class MicroBimListingRecommendationDto | MIcroBIM Docs",
    "summary": "Class MicroBimListingRecommendationDto Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Represents a Data Transfer Object (DTO) used for providing recommendations specific to Micro BIM listings. public class MicroBimListingRecommendationDto Inheritance object MicroBimListingRecommendationDto Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MicroBimListingRecommendationDto() public MicroBimListingRecommendationDto() Properties Name Gets or sets the name, which must follow the format \"FamilyName-SymbolName\". public string Name { get; set; } Property Value string SuggestedType Represents the suggested fitting type for a listing recommendation. This property must follow the format \"FamilyName-SymbolName\". public StandardFittingType SuggestedType { get; set; } Property Value StandardFittingType"
  },
  "api/MB.Common.Settings.ListingSettings.StandardFittingGroups.html": {
    "href": "api/MB.Common.Settings.ListingSettings.StandardFittingGroups.html",
    "title": "Class StandardFittingGroups | MIcroBIM Docs",
    "summary": "Class StandardFittingGroups Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Provides predefined groupings of standard fitting types for different fitting categories. public static class StandardFittingGroups Inheritance object StandardFittingGroups Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields ElbowFittings Gets a read-only collection of elbow-type fittings, including threaded, grooved, and embedded coupling variants. public static readonly IReadOnlyList<StandardFittingType> ElbowFittings Field Value IReadOnlyList<StandardFittingType> RemainingFittings Gets a read-only collection of miscellaneous fittings, including couplings, caps, reducers, and general-purpose fittings. public static readonly IReadOnlyList<StandardFittingType> RemainingFittings Field Value IReadOnlyList<StandardFittingType> SpudFittings Gets a read-only collection of spud fittings, including mechanical tees, outlets, and branch connections. public static readonly IReadOnlyList<StandardFittingType> SpudFittings Field Value IReadOnlyList<StandardFittingType> TeeFittings Gets a read-only collection of tee and cross fittings, including threaded, grooved, and embedded coupling variants. public static readonly IReadOnlyList<StandardFittingType> TeeFittings Field Value IReadOnlyList<StandardFittingType>"
  },
  "api/MB.Common.Settings.ListingSettings.StandardFittingType.html": {
    "href": "api/MB.Common.Settings.ListingSettings.StandardFittingType.html",
    "title": "Enum StandardFittingType | MIcroBIM Docs",
    "summary": "Enum StandardFittingType Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Represents a collection of fitting types commonly utilized within piping systems, categorized by different connection methods such as threaded, grooved, embedded couplings, integrated systems (IGS), flanged connections, and more. [TypeConverter(typeof(EnumDescriptionTypeConverter))] public enum StandardFittingType Fields BlankEnd = 38 Represents a fitting type that is identified as a blank end. Bush = 10 Represents the \"Bush\" fitting type in the StandardFittingType enumeration. CrossEmbeddedCoupling = 34 Represents a cross fitting type that includes an embedded coupling.This fitting type is typically used in plumbing or piping systems where a cross layout, integrated with an embedded coupling, is required to connect multiple pipes or components. ElbowWithEmbeddedCoupling = 3 Represents a type of fitting defined as \"Elbow with Embedded Coupling.\" This fitting combines an elbow and a coupling into a single embedded component, providing a seamless transition and integrated functionality within piping systems. FlangedFittingGeneral = 57 Represents a general type of flanged fitting in the enumeration of standard fitting types. This member is used to categorize fittings that utilize a flange connection, typically offering a secure and durable method of joining pipes or other components. FullSocket = 12 Represents a full socket fitting type in the StandardFittingType enumeration.A full socket is typically used to provide a secure and complete connection in piping systems, allowing joining of components with an extended and enclosed fitting interface. GRVFlangedFittingGeneral = 59 Represents a grooved flanged fitting general type in the StandardFittingType enumeration. GRVTRDFittingGeneral = 49 Represents a grooved fitting of the TRD (Threaded Rotational Design) type within the StandardFittingType enumeration. This type is used to categorize general-purpose grooved TRD fittings. GroovedBranchOletGOLBO = 6 Represents a grooved branch olet fitting, identified with the abbreviation GOL BO. This type of fitting is commonly used in piping systems to provide a branch connection with grooved ends for easy installation and alignment. GroovedCap = 41 Represents a grooved cap type fitting in the context of standard fitting types. Used for applications requiring a grooved cap connection. GroovedCoupling = 14 Represents the Grooved Coupling fitting type in the StandardFittingType enumeration.The Grooved Coupling is a standard fitting type used in piping systems. It utilizes a grooved design to enable secure and efficient assembly of piping connections, ensuring structural integrity and ease of installation. GroovedCross = 9 Represents a grooved cross fitting type commonly used in piping systems. This fitting is designed with grooves that enable secure coupling and assembly within grooved pipe systems. It typically serves as a four-way connection point for pipes in a cross configuration, ensuring efficient fluid distribution. GroovedElbow = 44 Represents a grooved elbow fitting type within the StandardFittingType enumeration. A grooved elbow is typically used in piping systems to change the direction of flow while maintaining a grooved connection for easy assembly and disassembly of components. GroovedFittingGeneral = 46 Represents a general fitting type for grooved connections. This enum member is used to identify standard fittings that align with the classification of grooved fittings without specifying a more precise category. GroovedMechanicalCross = 18 Represents a grooved mechanical cross fitting type, typically used in piping systems. This fitting allows four pipes to be joined at right angles to one another, facilitating mechanical joint installations with grooved connections. GroovedMechanicalTee = 16 Represents a grooved mechanical tee fitting type, used in piping systems. GroovedReducer = 42 Represents a grooved reducer fitting type within the StandardFittingType enumeration.A grooved reducer is a type of pipe fitting used to connect two pipes of different diameters while employing a grooved connection mechanism. GroovedTee = 45 Represents a grooved tee fitting type. This fitting is characterized by its grooved ends and branch connections, commonly used for mechanical pipe joining systems. HalfSocket = 11 Represents a standard fitting type \"Half Socket\".This enum value is used to represent a half socket fitting in various configurations within the system. It is identified by the enum value of 11 and has a display name of \"Half Socket\". HexNipple = 13 Represents a hex nipple fitting type in the StandardFittingType enumeration.A hex nipple is a threaded fitting with hexagonal sides, designed for connecting two pipes or fittings. It is commonly used in piping systems to create secure and leak-proof connections. IGSCap = 24 Represents an IGS-specific cap fitting type in the standard fitting type enumeration. This fitting is used to seal the end of a pipe or other component in a system that uses IGS (Integrated Grooved System) fittings. IGSCoupling = 22 Represents the \"IGS Coupling\" fitting type in the StandardFittingType enumeration. This fitting type is part of the Integrated Grooved System (IGS), designed to provide secure connections in piping systems using the coupling mechanism. IGSElbowWithEmbeddedCoupling = 20 Represents an IGS elbow fitting that includes an embedded coupling. This type of fitting is commonly used in piping systems to connect two pipe segments at an angle while providing an integrated coupling for secure and efficient connections. IGSEndOlet = 58 Represents a fitting type categorized as \"IGS End Olet\". This type is designed as part of the IGS (Integrated Grooved System) fittings and typically serves as an end connection or branch outlet in piping systems. IGSFittingGeneral = 60 Represents a general fitting type for the IGS (International Groove System) standard. This designation is used when a specific IGS fitting does not have a more detailed classification within the enumeration. IGSGRVFittingGeneral = 54 Represents the \"IGS GRV Fitting General\" type within the StandardFittingType enumeration.It is used to denote a general category of grooved fittings within the IGS system. IGSIRFittingGeneral = 48 Represents a general fitting type for the IGS and IR classifications. This enumeration member is part of the StandardFittingType enum, used for identifying fittings that combine characteristics or applications of both IGS (Integrated Groove System) and IR (Internal Resistance). IGSMechanicalTee = 25 Represents an IGS Mechanical Tee fitting type within the StandardFittingType enumeration. An IGS Mechanical Tee is a type of fitting used in piping systems that typically allows for the branching of a pipeline while maintaining a mechanical connection. IGSOlet = 23 Represents the IGS Olet fitting type in the StandardFittingType enumeration. This type is used for fittings designed to connect or branch pipes within the IGS (Integrated Grooved System) category. IGSReducer = 27 Represents the IGS Reducer fitting type in the StandardFittingType enumeration. This fitting type is specific to IGS (Integrated Grooved System) and is used when a reducer is required to transition between pipes of different diameters in a grooved piping system. IGSTRDFittingGeneral = 52 Represents the general fitting type for IGS threaded connections. This enum member is used to categorize fittings with threaded specifications under the IGS (Integrated Grooved System) standards. IGSTeeEmbeddedCoupling = 21 Represents a fitting type categorized as IGS Tee with Embedded Coupling. This fitting type is typically used in piping or plumbing systems where an IGS-standard tee fitting incorporates an embedded coupling for streamlined and integrated connections. IRCap = 33 Represents a standard fitting type classified as \"IR Cap\". IRCoupling = 29 Represents the IR Coupling fitting type used in piping configurations.Corresponds to the fitting type with the designation \"IR Coupling\". Identified by its unique enum value within the StandardFittingType enumeration. IRElbowEmbeddedCoupling = 30 Represents an IR (Integrated Rolled) elbow fitting with an embedded coupling. This type of fitting is designed to connect two pipes at an angle, while integrating a coupling within the fitting itself to facilitate secure and efficient connections. IRGroovedEndOlet = 28 Represents an IR Grooved End Olet fitting type. This fitting is typically used in piping systems where grooved end connections are required to facilitate assembly without welding. IRReducer = 32 Represents a specific type of fitting known as \"IR Reducer,\" which is part of the \"IR\" (Integral Reducer) grouping within the available standard fitting types. This type is typically used to connect pipes of different diameters while adhering to the specifications of the \"IR\" fitting standard. IRTeeEmbeddedCoupling = 31 Represents a type of fitting identified as \"IR Tee with Embedded Coupling\". This fitting type is typically used for connection systems where a Tee shape with an integrated coupling mechanism is required for industrial or plumbing applications under the IR (InfraRed) fitting category. MechTee922TRD = 55 Represents the \"Mechanical Tee 922 TRD\" fitting type in the StandardFittingType enumeration. This fitting type typically refers to a specific threaded mechanical tee designed for use in piping systems. ModelingHelperNonConnector = 43 Represents a placeholder or helper fitting type that is not connected to any actual model or component. It can be used as a utility within modeling processes where a non-functional connector type is needed. NewMapping = 36 Represents a new mapping type of fitting in the StandardFittingType enum. None = 50 Represents an unspecified or default fitting type in the StandardFittingType enumeration. This value is used when no specific fitting type is applicable or has not been determined. PVCFittingGeneralPlainEnd = 56 Represents a general-purpose PVC fitting with a plain end. PipeOletTap = 5 Represents the \"Pipe Olet Tap\" type in the StandardFittingType enumeration. This fitting is typically used for branching off the main pipe, allowing for the connection of smaller pipes or outlets. Plug = 37 Represents a plug fitting type. This fitting is typically used to seal or close the end of a pipe or fitting, preventing fluid or gas flow. PlugConnectedAfterFullSocket = 35 Represents a standard fitting type where a plug is connected after the application of a full socket. PlugConnectedAfterHalfSocket = 7 Represents a plug that is connected after a half socket fitting. This type is typically used in pipeline or plumbing systems to seal or terminate a connection while attached to a half socket configuration. TeeWithEmbeddedCoupling = 4 Represents a tee fitting that includes an embedded coupling. This fitting type combines the functionality of a tee and a coupling, offering a streamlined design for specific pipe connection scenarios. ThreadedCap = 51 Represents a threaded cap fitting type. ThreadedCouplingUS = 15 Represents a threaded coupling fitting specific to U.S. standards. ThreadedCross = 8 Represents a fitting type classified as \"Threaded Cross\". This fitting type is designed with threaded connections, allowing for a cross-shaped configuration that provides four-way pipe connection points. ThreadedElbow = 1 Represents a threaded elbow fitting type within the standard fitting category. Threaded elbow fittings are designed to join two pipes at an angle, typically 90 or 45 degrees, and utilize threading for connection. ThreadedFittingGeneral = 47 Represents a general threaded fitting type. It is a category within the StandardFittingType enumeration that serves as a generic descriptor for threaded fitting components where no specific subtype is identified or required. ThreadedMechanicalCross = 19 Specifies a fitting type that represents a threaded mechanical cross. ThreadedMechanicalTee = 17 Represents a threaded mechanical tee fitting type within the StandardFittingType enumeration.The ThreadedMechanicalTee is a type of pipe fitting used to connect branches of piping systems. It features threaded connections for secure assembly in mechanical piping configurations. ThreadedTee = 2 Represents a type of standard fitting known as \"Threaded Tee.\" This fitting features a T-shaped design with threaded connections at all three connection points, commonly used in piping systems for branching a flow into two lines or combining two flows into one. WGRVFittingGeneral = 53 Represents a welded grooved fitting general type in the StandardFittingType enumeration. WeldedEndFittingGeneral = 40 Represents a generalized welded end fitting type. This enumeration member is used to categorize fittings that utilize welded connections for establishing a secure link between piping systems and components. WeldedGroovedPieceIR = 39 Represents a welded fitting type with grooved connections for the IR (In-Room) standard. This enum member is part of the StandardFittingType enumeration and is commonly used for creating or identifying welded fittings with grooved design utilized in IR-specific applications or configurations in mechanical systems."
  },
  "api/MB.Common.Settings.ListingSettings.ValueToStandardTypeDto.html": {
    "href": "api/MB.Common.Settings.ListingSettings.ValueToStandardTypeDto.html",
    "title": "Class ValueToStandardTypeDto | MIcroBIM Docs",
    "summary": "Class ValueToStandardTypeDto Namespace MB.Common.Settings.ListingSettings Assembly MB.Common.dll Represents a Data Transfer Object (DTO) that associates a specific value with a standard fitting type. public class ValueToStandardTypeDto Inheritance object ValueToStandardTypeDto Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ValueToStandardTypeDto() public ValueToStandardTypeDto() Properties SuggestedType Gets or sets the standard type associated with the value to standard type mapping. public StandardFittingType SuggestedType { get; set; } Property Value StandardFittingType Value Gets or sets the value associated with the mapping to a standard fitting type. public string Value { get; set; } Property Value string"
  },
  "api/MB.Common.Settings.ListingSettings.html": {
    "href": "api/MB.Common.Settings.ListingSettings.html",
    "title": "Namespace MB.Common.Settings.ListingSettings | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Settings.ListingSettings Classes FittingGroupHelper Provides helper methods for grouping StandardFittingType values into their corresponding PDF group names for listing and reporting purposes. ListingConfig Represents the configuration for a listing, including elements, family details, category, and fitting types. This class provides constructors to initialize its properties either from a collection of elements or from a Data Transfer Object (DTO). ListingDto Represents a data transfer object for a listing, including details such as family name, symbol name, category, and selected fitting type. ListingMapper Provides methods for mapping between ListingConfig and ListingDto objects. ListingSettingsHelper Provides helper methods for working with listing settings, including retrieval of ListingDto objects based on family and type information. MicroBimListingRecommendationDto Represents a Data Transfer Object (DTO) used for providing recommendations specific to Micro BIM listings. StandardFittingGroups Provides predefined groupings of standard fitting types for different fitting categories. ValueToStandardTypeDto Represents a Data Transfer Object (DTO) that associates a specific value with a standard fitting type. Enums StandardFittingType Represents a collection of fitting types commonly utilized within piping systems, categorized by different connection methods such as threaded, grooved, embedded couplings, integrated systems (IGS), flanged connections, and more."
  },
  "api/MB.Common.Settings.ParameterData.html": {
    "href": "api/MB.Common.Settings.ParameterData.html",
    "title": "Class ParameterData | MIcroBIM Docs",
    "summary": "Class ParameterData Namespace MB.Common.Settings Assembly MB.Common.dll Represents a parameter with a name, display name, and selection state. public class ParameterData : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ParameterData Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ParameterData(string, string, bool) Represents a parameter with a name, display name, and selection state. public ParameterData(string name, string displayName, bool isSelected = false) Parameters name string The internal name of the parameter. displayName string The display name of the parameter. isSelected bool Indicates whether the parameter is selected. Properties DisplayName public string DisplayName { get; set; } Property Value string IsSelected public bool IsSelected { get; set; } Property Value bool Name public string Name { get; set; } Property Value string"
  },
  "api/MB.Common.Settings.html": {
    "href": "api/MB.Common.Settings.html",
    "title": "Namespace MB.Common.Settings | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Settings Classes ParameterData Represents a parameter with a name, display name, and selection state."
  },
  "api/MB.Common.SharedParameters.ElementExtensions.html": {
    "href": "api/MB.Common.SharedParameters.ElementExtensions.html",
    "title": "Class ElementExtensions | MIcroBIM Docs",
    "summary": "Class ElementExtensions Namespace MB.Common.SharedParameters Assembly MB.Common.dll Provides extension methods for working with Revit Element objects. public static class ElementExtensions Inheritance object ElementExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MbGetParameter(Element, ToolsSharedParameter) Retrieves a Revit Autodesk.Revit.DB.Parameter associated with the specified shared parameter from the given Element. public static Parameter MbGetParameter(this Element element, ToolsSharedParameter sharedParameter) Parameters element Element The Revit Element to retrieve the parameter from. sharedParameter ToolsSharedParameter The ToolsSharedParameter to retrieve. Returns Parameter The Autodesk.Revit.DB.Parameter object associated with the specified shared parameter. Returns null if the parameter is not found. MbSetParameter<T>(Element, ToolsSharedParameter, T) Sets the value of a Revit Autodesk.Revit.DB.Parameter associated with a specified shared parameter. public static void MbSetParameter<T>(this Element element, ToolsSharedParameter sharedParameter, T value) Parameters element Element The Revit Element to set the parameter for. sharedParameter ToolsSharedParameter The ToolsSharedParameter whose value is to be set. value T The value to assign to the parameter. Type Parameters T The type of the value to set (e.g., int, double, string, ElementId). Exceptions ArgumentException Thrown if the parameter value type is unsupported or the parameter cannot be set with the specified type."
  },
  "api/MB.Common.SharedParameters.SharedParameterExtensions.html": {
    "href": "api/MB.Common.SharedParameters.SharedParameterExtensions.html",
    "title": "Class SharedParameterExtensions | MIcroBIM Docs",
    "summary": "Class SharedParameterExtensions Namespace MB.Common.SharedParameters Assembly MB.Common.dll Provides extension methods for the ToolsSharedParameter class. public static class SharedParameterExtensions Inheritance object SharedParameterExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetCreationOptions(ToolsSharedParameter) Creates an instance of ExternalDefinitionCreationOptions for a ToolsSharedParameter. public static ExternalDefinitionCreationOptions GetCreationOptions(this ToolsSharedParameter sharedParameter) Parameters sharedParameter ToolsSharedParameter The shared parameter. Returns ExternalDefinitionCreationOptions An ExternalDefinitionCreationOptions instance. GetDisplayName(ToolsSharedParameter) Retrieves the display name of a ToolsSharedParameter. public static string GetDisplayName(this ToolsSharedParameter sharedParameter) Parameters sharedParameter ToolsSharedParameter The shared parameter. Returns string The display name of the shared parameter. GetGuid(ToolsSharedParameter) Retrieves the GUID associated with a ToolsSharedParameter. public static string GetGuid(this ToolsSharedParameter sharedParameter) Parameters sharedParameter ToolsSharedParameter The shared parameter. Returns string The GUID of the shared parameter. GetIncludedCategories(ToolsSharedParameter) Retrieves the list of categories included in a ToolsSharedParameter. public static List<BuiltInCategory> GetIncludedCategories(this ToolsSharedParameter sharedParameter) Parameters sharedParameter ToolsSharedParameter The shared parameter. Returns List<BuiltInCategory> A list of BuiltInCategory values. GetSharedParameterType(ToolsSharedParameter) Retrieves the type of ToolsSharedParameter. public static SharedParameterType GetSharedParameterType(this ToolsSharedParameter sharedParameter) Parameters sharedParameter ToolsSharedParameter The shared parameter. Returns SharedParameterType The SharedParameterType of the shared parameter."
  },
  "api/MB.Common.SharedParameters.SharedParameterType.html": {
    "href": "api/MB.Common.SharedParameters.SharedParameterType.html",
    "title": "Enum SharedParameterType | MIcroBIM Docs",
    "summary": "Enum SharedParameterType Namespace MB.Common.SharedParameters Assembly MB.Common.dll Represents the types of shared parameters that can be used in Revit. public enum SharedParameterType Fields Area = 3 Represents an area parameter type, used for values that define area measurements. Integer = 2 Represents an integer parameter type, used for whole number values. Text = 1 Represents a text parameter type, used for string values. YesOrNo = 0 Represents a Yes/No parameter type, typically used for boolean values."
  },
  "api/MB.Common.SharedParameters.ToolsSharedParameter.html": {
    "href": "api/MB.Common.SharedParameters.ToolsSharedParameter.html",
    "title": "Enum ToolsSharedParameter | MIcroBIM Docs",
    "summary": "Enum ToolsSharedParameter Namespace MB.Common.SharedParameters Assembly MB.Common.dll Defines shared parameters for use within Revit, including metadata such as GUIDs, descriptions, parameter types, and applicable categories. public enum ToolsSharedParameter Extension Methods SharedParameterExtensions.GetCreationOptions(ToolsSharedParameter) SharedParameterExtensions.GetDisplayName(ToolsSharedParameter) SharedParameterExtensions.GetGuid(ToolsSharedParameter) SharedParameterExtensions.GetIncludedCategories(ToolsSharedParameter) SharedParameterExtensions.GetSharedParameterType(ToolsSharedParameter) Fields [Guid(\"9fdf6b2a-2772-4194-969c-f46d6e6ab866\")] [SharedParameterType(SharedParameterType.Area)] [RevitCategories] ActualCoverage = 1 Represents the \"MBF_ActualCoverage\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, sprinklers, and pipe accessories. It is of type Area. [Guid(\"282d1a77-f651-4479-b6eb-85d84361c615\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] AddFitToId = 9 Represents the \"MBF_AddFitToID\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"40221BB0-FFFE-42C6-BFF1-F1048AFA0664\")] [SharedParameterType(SharedParameterType.Integer)] [RevitCategories] Allowance = 17 Represents the \"MBF_Allowance\" shared parameter.This shared parameter is applicable to flex pipe curves. It is of type Integer. [Guid(\"6BEC8CDC-378E-4389-A7D6-EAF2493CEB9A\")] [SharedParameterType(SharedParameterType.YesOrNo)] [RevitCategories] CalculateSum = 20 Represents the \"MBF_IsFitting\" shared parameter.This shared parameter is used for flex pipe curves and is of type YesOrNo. [Guid(\"14fca12a-1224-41e5-a8a6-d4c0af178974\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Color = 7 Represents the \"MBF_Color\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"27e7c7ba-40cc-4ca6-b0c3-07a8e537a3bb\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] DescriptionAndAbbreviationListNo = 11 Represents the \"MBF_DescAbbrvListNo\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"b1af6c8f-8b44-4e5d-ad1d-80deb78bc6b6\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] EndPap = 23 Represents the end paper (EndPap) parameter for Revit elements, typically used in piping systems.This parameter is associated with Revit categories such as pipes and pipe fittings. It is defined as a shared parameter of type Text. [Guid(\"d94545bc-4956-411d-a6bc-9ec96101d350\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] ExportedPackageName = 12 Represents the \"MBF_Exported_PackageName\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"83d4381a-bfe9-450e-9364-c44036e81756\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] ExportedPdfName = 14 Represents the \"MBF_Exported_PDFName\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"1bf7feba-7bca-40c9-8ca0-8365574c2648\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] FabricationGroupName = 16 Represents the \"MBF_FabGroupName\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"15b2c379-8df6-4f2d-8499-9883e0256663\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Finish = 7 Represents the \"MBF_Finish\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"72f35e3d-3bd7-4169-b3c0-c6485cdd39c4\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] HandTight = 10 Represents the \"MBF_HandTight\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"8495409d-c110-4685-b548-2f1440fa7307\")] [SharedParameterType(SharedParameterType.YesOrNo)] [RevitCategories] IgnoreInCalculation = 3 Represents the \"MBF_IgnoreInCalculation\" shared parameter.This shared parameter is applicable to pipe fittings, sprinklers, pipe accessories, mechanical equipment, and fire alarm devices. It is of type YesOrNo. [Guid(\"e87615ee-c2b0-4f93-9194-8ffda612cdf6\")] [SharedParameterType(SharedParameterType.YesOrNo)] [RevitCategories] IncludeInCalculation = 2 Represents the \"MBF_IncludeInCalcs\" shared parameter.This shared parameter is applicable to pipe fittings, sprinklers, pipe accessories, mechanical equipment, and fire alarm devices. It is of type YesOrNo. [Guid(\"997C72F0-F375-439E-9AD1-BC2570651E42\")] [SharedParameterType(SharedParameterType.YesOrNo)] [RevitCategories] IsFitting = 19 Represents the \"MBF_IsFitting\" shared parameter.This shared parameter is used for flex pipe curves and is of type YesOrNo. [Guid(\"b06ebb90-4f1e-4881-bfb5-fef6f7a64909\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] MinimumFlow = 5 Represents the \"MBF_Min_Flow\" shared parameter.This shared parameter is applicable to pipe fittings, sprinklers, and pipe accessories. It is of type Text. [Guid(\"467a1334-8e46-4d4d-bf22-0bd377ff6be5\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] MinimumPressure = 4 Represents the \"MBF_Min_Pressure\" shared parameter.This shared parameter is applicable to pipe fittings, sprinklers, and pipe accessories. It is of type Text. [Guid(\"c0932a83-87c2-4286-9c28-d4eb4ae03ef8\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap1 = 25 Represents a shared parameter type for Revit elements, specifically associated with pipe curves.This class is identified by the GUID \"c0932a83-87c2-4286-9c28-d4eb4ae03ef8\" and is categorized under the Revit built-in category BuiltInCategory.OST_PipeCurves. It is intended for use with shared parameters of type Text. [Guid(\"64f2f492-72f6-4e92-9b54-4e6bd8845275\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap2 = 27 Represents a shared parameter with the identifier \"2_PAP\" for use in Revit's pipe curves category.This parameter is associated with the BuiltInCategory.OST_PipeCurves category in Revit and is defined as a text-based shared parameter. It is identified by the GUID \"64f2f492-72f6-4e92-9b54-4e6bd8845275\". [Guid(\"4acd2fa4-e8c4-4d00-89e6-bdeed126fb39\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap3 = 29 Represents a shared parameter with the identifier \"3_PAP\" for use in Revit's pipe curves category.This parameter is associated with the BuiltInCategory.OST_PipeCurves category in Revit and is defined as a text-based shared parameter. It is identified by the GUID \"4acd2fa4-e8c4-4d00-89e6-bdeed126fb39\". [Guid(\"b710b589-43a3-4663-9f5d-c7c255095194\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap4 = 31 Represents a shared parameter type with the identifier \"4_PAP\" for use in Revit.This parameter is associated with the Revit category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"b710b589-43a3-4663-9f5d-c7c255095194\". [Guid(\"2073ad09-f450-4369-b152-366f3c97f352\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap5 = 33 Represents a shared parameter with the identifier \"5_PAP\" for use in Revit projects.This parameter is associated with the Revit category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"2073ad09-f450-4369-b152-366f3c97f352\". [Guid(\"b25b7441-fe65-4a68-b5da-0195cf452a66\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap6 = 35 Represents a shared parameter with the identifier \"6_PAP\" for use in Revit projects.This parameter is associated with the Revit category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"b25b7441-fe65-4a68-b5da-0195cf452a66\". [Guid(\"38005670-ec77-4a15-a561-ff65273fc09a\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap7 = 37 Represents a shared parameter with the identifier \"7_PAP\" for use in Revit projects.This parameter is associated with the Revit category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"38005670-ec77-4a15-a561-ff65273fc09a\". [Guid(\"9d447d9e-3100-45b6-9cc9-f6cbe40381ca\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap8 = 39 Represents a shared parameter with the identifier \"8_PAP\" for use in Revit projects.This parameter is associated with pipe curves in Revit and is categorized under BuiltInCategory.OST_PipeCurves. It is defined as a text-based shared parameter. [Guid(\"2b164db7-983f-455e-9b0a-ba77061456d6\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Pap9 = 41 Represents a shared parameter with the identifier \"9_PAP\" for use in Revit.This parameter is associated with the Revit category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"2b164db7-983f-455e-9b0a-ba77061456d6\". [Guid(\"c4347a82-7375-42aa-ad1a-96ba6212f122\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] PipeCode = 8 Represents the \"MBF_PipeCode\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"a137e596-b255-494a-9c8a-1f32f4ec0a5f\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] PipeNoListing = 21 Represents a shared parameter for specifying a pipe number listing in a Revit model.This parameter is associated with Revit categories such as BuiltInCategory.OST_PipeCurves and BuiltInCategory.OST_PipeFitting. It is defined as a text-based shared parameter and is identified by the GUID \"a137e596-b255-494a-9c8a-1f32f4ec0a5f\". [Guid(\"2e83bba8-8d6e-4a90-a29f-108c705a7661\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] ProtectionArea = 6 Represents the \"MBF_ProtectionArea\" shared parameter.This shared parameter is applicable to pipe fittings, sprinklers, and pipe accessories. It is of type Text. [Guid(\"5f2c6451-0d24-4421-b3f8-02386c2cd60b\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] ReaLGroupSize = 18 Represents the \"MBF_Allowance\" shared parameter.This shared parameter is applicable to flex pipe curves. It is of type Text. [Guid(\"5f2c6451-0d24-4421-b3f8-02386c2cd60b\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] RealFittingSizes = 13 Represents the \"MBF_RealFittingSizes\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text. [Guid(\"5fa85912-77b2-4d48-a7df-5e524aa45c43\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run1Dim = 24 Represents a shared parameter for specifying the dimension of a pipe run in Revit.This parameter is associated with the \"1_RUN DIM\" description and is categorized under BuiltInCategory.OST_PipeCurves. It is defined as a text-based shared parameter. [Guid(\"28aba22e-1438-4608-b8ce-a85e52854267\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run2Dim = 26 Represents a shared parameter for specifying the 2_RUN DIM value in Revit.This parameter is associated with pipe curves in Revit and is categorized as a text parameter. It is identified by the GUID \"28aba22e-1438-4608-b8ce-a85e52854267\". [Guid(\"47e8420e-dc38-47ce-9dbd-74358a69a28c\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run3Dim = 28 Represents a shared parameter for the \"3_RUN DIM\" property in Revit, associated with pipe curves.This parameter is identified by the GUID \"47e8420e-dc38-47ce-9dbd-74358a69a28c\" and is categorized under BuiltInCategory.OST_PipeCurves. It is defined as a text-based shared parameter. [Guid(\"216fb144-f402-4d1b-b6f9-dc1f62850017\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run4Dim = 30 Represents a shared parameter for specifying the \"4_RUN DIM\" value in Revit pipe curves.This parameter is associated with the \"4_RUN DIM\" description and is categorized under BuiltInCategory.OST_PipeCurves. It is defined as a text-based shared parameter. [Guid(\"236886e5-b9d9-4a7a-a456-27324bb33869\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run5Dim = 32 Represents a shared parameter for specifying the \"5_RUN DIM\" value in Revit.This parameter is associated with the \"PipeCurves\" category in Revit and is of type Text. It is identified by the GUID \"236886e5-b9d9-4a7a-a456-27324bb33869\". [Guid(\"5914c51d-8028-48c3-bde0-98e21dca0d67\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run6Dim = 34 Represents a shared parameter for specifying the \"6_RUN DIM\" value associated with pipe curves in Revit.This parameter is categorized under the Revit built-in category BuiltInCategory.OST_PipeCurves and is defined as a text-based shared parameter. It is identified by the GUID \"5914c51d-8028-48c3-bde0-98e21dca0d67\". [Guid(\"fc237068-ae9a-45eb-81da-f4a3a7c00a38\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run7Dim = 36 Represents a shared parameter for specifying the \"7_RUN DIM\" value in Revit.This parameter is associated with the \"PipeCurves\" category in Revit and is of type Text. It is identified by the GUID \"fc237068-ae9a-45eb-81da-f4a3a7c00a38\". [Guid(\"62244904-01e1-45f3-a2c6-cf15ea715713\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run8Dim = 38 Represents a shared parameter for specifying the \"8_RUN DIM\" value in Revit pipe curves.This parameter is associated with the \"8_RUN DIM\" description and is categorized under BuiltInCategory.OST_PipeCurves. It is defined as a text-based shared parameter. [Guid(\"a5f94330-0a3b-4242-91be-8a66ddc62e56\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] Run9Dim = 40 Represents a shared parameter for the \"9_RUN DIM\" dimension, associated with pipe curves in Revit.This parameter is categorized under the BuiltInCategory.OST_PipeCurves category and is defined as a length parameter. It is identified by the GUID \"a5f94330-0a3b-4242-91be-8a66ddc62e56\". [Guid(\"ab1be1ed-1730-433c-b2c6-51edfafe84b5\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] StartPap = 22 Represents the \"Start Pap\" shared parameter, which is associated with pipe curves and pipe fittings in Revit.This parameter is categorized under BuiltInCategory.OST_PipeCurves and BuiltInCategory.OST_PipeFitting. It is defined as a text-based shared parameter and is identified by the GUID \"ab1be1ed-1730-433c-b2c6-51edfafe84b5\". [Guid(\"9d698cc7-3c6d-466e-9f89-ee1baf1326a2\")] [SharedParameterType(SharedParameterType.Text)] [RevitCategories] SubType = 15 Represents the \"MBF_Subtype\" shared parameter.This shared parameter is applicable to pipe curves, pipe fittings, pipe accessories, generic models, model groups, mechanical equipment, sprinklers, fire alarm devices, and flex pipe curves. It is of type Text."
  },
  "api/MB.Common.SharedParameters.html": {
    "href": "api/MB.Common.SharedParameters.html",
    "title": "Namespace MB.Common.SharedParameters | MIcroBIM Docs",
    "summary": "Namespace MB.Common.SharedParameters Classes ElementExtensions Provides extension methods for working with Revit Element objects. SharedParameterExtensions Provides extension methods for the ToolsSharedParameter class. Enums SharedParameterType Represents the types of shared parameters that can be used in Revit. ToolsSharedParameter Defines shared parameters for use within Revit, including metadata such as GUIDs, descriptions, parameter types, and applicable categories."
  },
  "api/MB.Common.Tools.MbfTool.html": {
    "href": "api/MB.Common.Tools.MbfTool.html",
    "title": "Enum MbfTool | MIcroBIM Docs",
    "summary": "Enum MbfTool Namespace MB.Common.Tools Assembly MB.Common.dll Enum representing various tools in the MBF (MicroBIM Fire) suite. Each tool is decorated with descriptive metadata and optional shared parameter requirements. public enum MbfTool Extension Methods MbfToolExtensions.GetRequiredSharedParameters(MbfTool) Fields ApplyParameters = 4 Represents the Apply Parameters tool. AssemblyManager = 2 Represents the Assembly Manager tool. AutoSprinklerSpacing = 6 Represents the Auto Sprinkler Spacing tool. CutLengthPipeOptimization = 3 Represents the Cut Length Pipe Optimization tool. [RequiredSharedParameters(new ToolsSharedParameter[] { ToolsSharedParameter.Color, ToolsSharedParameter.Color, ToolsSharedParameter.PipeCode, ToolsSharedParameter.AddFitToId, ToolsSharedParameter.HandTight, ToolsSharedParameter.DescriptionAndAbbreviationListNo, ToolsSharedParameter.ExportedPackageName, ToolsSharedParameter.RealFittingSizes, ToolsSharedParameter.ExportedPdfName, ToolsSharedParameter.SubType, ToolsSharedParameter.FabricationGroupName, ToolsSharedParameter.Allowance, ToolsSharedParameter.ReaLGroupSize, ToolsSharedParameter.IsFitting, ToolsSharedParameter.CalculateSum })] Mapper = 5 Represents the Mapper tool, used to assign various metadata and fabrication-related properties.This tool requires several shared parameters including: Color, Finish, PipeCode, and many others used for downstream fabrication and reporting. [RequiredSharedParameters(new ToolsSharedParameter[] { ToolsSharedParameter.ActualCoverage, ToolsSharedParameter.ProtectionArea })] SprinklerVoronoi = 1 Represents the Sprinkler Voronoi tool.This tool requires the ActualCoverage and ProtectionArea shared parameters. Remarks Tools are annotated with DescriptionAttribute for display purposes, and with RequiredSharedParametersAttribute to define necessary shared parameters."
  },
  "api/MB.Common.Tools.MbfToolExtensions.html": {
    "href": "api/MB.Common.Tools.MbfToolExtensions.html",
    "title": "Class MbfToolExtensions | MIcroBIM Docs",
    "summary": "Class MbfToolExtensions Namespace MB.Common.Tools Assembly MB.Common.dll Provides extension methods for the MbfTool class. public static class MbfToolExtensions Inheritance object MbfToolExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetRequiredSharedParameters(MbfTool) Retrieves the required shared parameters associated with the specified MbfTool. public static ToolsSharedParameter[] GetRequiredSharedParameters(this MbfTool tool) Parameters tool MbfTool The MbfTool instance for which the required shared parameters are retrieved. Returns ToolsSharedParameter[] An array of ToolsSharedParameter objects if the RequiredSharedParametersAttribute is found; otherwise, an empty array."
  },
  "api/MB.Common.Tools.html": {
    "href": "api/MB.Common.Tools.html",
    "title": "Namespace MB.Common.Tools | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Tools Classes MbfToolExtensions Provides extension methods for the MbfTool class. Enums MbfTool Enum representing various tools in the MBF (MicroBIM Fire) suite. Each tool is decorated with descriptive metadata and optional shared parameter requirements."
  },
  "api/MB.Common.Utils.Attributes.AttributeUtils.html": {
    "href": "api/MB.Common.Utils.Attributes.AttributeUtils.html",
    "title": "Class AttributeUtils | MIcroBIM Docs",
    "summary": "Class AttributeUtils Namespace MB.Common.Utils.Attributes Assembly MB.Common.dll Provides utility methods for working with custom attributes in .NET. public static class AttributeUtils Inheritance object AttributeUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAttribute<T>(object) Retrieves a custom attribute of the specified type T applied to a given enum value or field. public static T GetAttribute<T>(object value) where T : Attribute Parameters value object The target enum value or field. Returns T The attribute of type T if it is applied; otherwise, throws an exception. Type Parameters T The type of the attribute to retrieve. GetFieldAttribute<T, TType>(string) Retrieves a custom attribute of the specified type T applied to a given field in a class or struct. public static T GetFieldAttribute<T, TType>(string fieldName) where T : Attribute Parameters fieldName string The name of the field in the class or struct. Returns T The attribute of type T if it is applied; otherwise, throws an exception. Type Parameters T The type of the attribute to retrieve. TType The type of the target class or struct. TryGetAttribute<T>(object, out T) Attempts to retrieve a custom attribute of the specified type T applied to a given enum value or field without throwing an exception if it is not found. public static bool TryGetAttribute<T>(object value, out T attribute) where T : Attribute Parameters value object The target enum value or field. attribute T When this method returns, contains the attribute of type T if found; otherwise, null. Returns bool True if the attribute is found; otherwise, false. Type Parameters T The type of the attribute to retrieve."
  },
  "api/MB.Common.Utils.Attributes.html": {
    "href": "api/MB.Common.Utils.Attributes.html",
    "title": "Namespace MB.Common.Utils.Attributes | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Utils.Attributes Classes AttributeUtils Provides utility methods for working with custom attributes in .NET."
  },
  "api/MB.Common.Utils.Handlers.MbHandlers.html": {
    "href": "api/MB.Common.Utils.Handlers.MbHandlers.html",
    "title": "Class MbHandlers | MIcroBIM Docs",
    "summary": "Class MbHandlers Namespace MB.Common.Utils.Handlers Assembly MB.Common.dll Provides static access to Revit external event handlers used across the application. public static class MbHandlers Inheritance object MbHandlers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This utility class simplifies the management of Revit's Nice3point.Revit.Toolkit.External.Handlers.ActionEventHandler and Nice3point.Revit.Toolkit.External.Handlers.AsyncEventHandler instances, allowing them to be globally registered and reused. Properties AsyncExternalEventHandler Gets or sets the asynchronous external event handler for executing asynchronous Revit commands. public static AsyncEventHandler AsyncExternalEventHandler { get; set; } Property Value AsyncEventHandler ExternalEventHandler Gets or sets the synchronous external event handler for executing Revit commands. public static ActionEventHandler ExternalEventHandler { get; set; } Property Value ActionEventHandler Methods RegisterHandlers() Registers and initializes the external event handlers used by the application. Call this method during application startup or initialization. public static void RegisterHandlers()"
  },
  "api/MB.Common.Utils.Handlers.html": {
    "href": "api/MB.Common.Utils.Handlers.html",
    "title": "Namespace MB.Common.Utils.Handlers | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Utils.Handlers Classes MbHandlers Provides static access to Revit external event handlers used across the application."
  },
  "api/MB.Common.Utils.Image.ImageUtils.html": {
    "href": "api/MB.Common.Utils.Image.ImageUtils.html",
    "title": "Class ImageUtils | MIcroBIM Docs",
    "summary": "Class ImageUtils Namespace MB.Common.Utils.Image Assembly MB.Common.dll Provides utility functions for working with images, such as resizing with high-quality settings. public static class ImageUtils Inheritance object ImageUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ResizeImage(Image, int, int) Resizes an image to the specified dimensions while preserving visual quality using advanced graphics settings. public static Bitmap ResizeImage(Image image, int width, int height) Parameters image Image The source Image to be resized. width int The target width of the resized image. height int The target height of the resized image. Returns Bitmap A new Bitmap instance containing the resized image."
  },
  "api/MB.Common.Utils.Image.html": {
    "href": "api/MB.Common.Utils.Image.html",
    "title": "Namespace MB.Common.Utils.Image | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Utils.Image Classes ImageUtils Provides utility functions for working with images, such as resizing with high-quality settings."
  },
  "api/MB.Common.Utils.Loaders.MbResourceLoader.html": {
    "href": "api/MB.Common.Utils.Loaders.MbResourceLoader.html",
    "title": "Class MbResourceLoader | MIcroBIM Docs",
    "summary": "Class MbResourceLoader Namespace MB.Common.Utils.Loaders Assembly MB.Common.dll Provides utility methods for working with embedded resources, including loading JSON content and extracting files. public static class MbResourceLoader Inheritance object MbResourceLoader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods EnsureFileFromEmbeddedResource(string, string) Ensures that a file exists at the specified path. If it does not, the method creates it using the content from an embedded resource. public static MbResult<bool> EnsureFileFromEmbeddedResource(string outputFilePath, string embeddedResourceName) Parameters outputFilePath string The full path where the file should be created if it doesn't exist. embeddedResourceName string The full name of the embedded resource (e.g., \"Namespace.Resources.Default.json\"). Returns MbResult<bool> An MbResult<T> indicating the outcome: Success = true — The file already exists or was created successfully from the embedded resource. Success = false — The resource was not found or an error occurred during file creation. The ErrorMessage will describe the issue. Remarks This method can be used to seed configuration files or default templates on first run of the application. It supports nested directory creation and uses the currently executing assembly to locate the resource. LoadEmbeddedJsonAsync<T>(string, Assembly) Loads a JSON list of objects from an embedded resource using Newtonsoft.Json. public static Task<List<T>> LoadEmbeddedJsonAsync<T>(string resourceFileName, Assembly assembly) Parameters resourceFileName string The name of the embedded resource file. assembly Assembly The assembly containing the embedded resource. Returns Task<List<T>> A list of deserialized objects, or an empty list on failure. Type Parameters T The type of objects in the JSON list."
  },
  "api/MB.Common.Utils.Loaders.html": {
    "href": "api/MB.Common.Utils.Loaders.html",
    "title": "Namespace MB.Common.Utils.Loaders | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Utils.Loaders Classes MbResourceLoader Provides utility methods for working with embedded resources, including loading JSON content and extracting files."
  },
  "api/MB.Common.Utils.Result.MbResult-1.html": {
    "href": "api/MB.Common.Utils.Result.MbResult-1.html",
    "title": "Class MbResult<T> | MIcroBIM Docs",
    "summary": "Class MbResult<T> Namespace MB.Common.Utils.Result Assembly MB.Common.dll Represents the result of an operation, encapsulating the success status, value, and error message. public class MbResult<T> Type Parameters T The type of the result value. Inheritance object MbResult<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ErrorMessage Gets the error message if the operation failed. public string ErrorMessage { get; } Property Value string IsSuccess Gets a value indicating whether the operation was successful. public bool IsSuccess { get; } Property Value bool Value Gets the value of the result if the operation was successful. public T Value { get; } Property Value T Methods Failure(string) Creates a failed result containing the specified error message. public static MbResult<T> Failure(string errorMessage) Parameters errorMessage string The error message. Returns MbResult<T> A failed MbResult<T>. Success(T) Creates a successful result containing the specified value. public static MbResult<T> Success(T value) Parameters value T The result value. Returns MbResult<T> A successful MbResult<T>."
  },
  "api/MB.Common.Utils.Result.html": {
    "href": "api/MB.Common.Utils.Result.html",
    "title": "Namespace MB.Common.Utils.Result | MIcroBIM Docs",
    "summary": "Namespace MB.Common.Utils.Result Classes MbResult<T> Represents the result of an operation, encapsulating the success status, value, and error message."
  },
  "api/MB.Common.ViewLoader.IsolatedViewLoader.html": {
    "href": "api/MB.Common.ViewLoader.IsolatedViewLoader.html",
    "title": "Class IsolatedViewLoader | MIcroBIM Docs",
    "summary": "Class IsolatedViewLoader Namespace MB.Common.ViewLoader Assembly MB.Common.dll Provides extension methods for loading XAML views manually and in isolation from a URI. This is used as a workaround for known issues in some WPF/Revit XAML loading contexts. public static class IsolatedViewLoader Inheritance object IsolatedViewLoader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoadViewFromUri(FrameworkElement, string) Loads a XAML view from a given base URI into a FrameworkElement. Uses reflection to bypass internal WPF methods and load XAML manually. public static void LoadViewFromUri(this FrameworkElement view, string baseUri) Parameters view FrameworkElement The view instance into which the XAML will be loaded. baseUri string The relative URI to the XAML file (e.g. \"/AssemblyName;component/ViewFolder/View.xaml\"). LoadView<T>(T) Loads the corresponding XAML view based on the type of the view instance. Infers the URI automatically from the view’s type and namespace. public static void LoadView<T>(this T view) where T : FrameworkElement Parameters view T The view instance to load. Type Parameters T The type of the view, must inherit from FrameworkElement."
  },
  "api/MB.Common.ViewLoader.html": {
    "href": "api/MB.Common.ViewLoader.html",
    "title": "Namespace MB.Common.ViewLoader | MIcroBIM Docs",
    "summary": "Namespace MB.Common.ViewLoader Classes IsolatedViewLoader Provides extension methods for loading XAML views manually and in isolation from a URI. This is used as a workaround for known issues in some WPF/Revit XAML loading contexts."
  },
  "api/MBF.Revit.Creation.Extensions.DocumentExtensions.html": {
    "href": "api/MBF.Revit.Creation.Extensions.DocumentExtensions.html",
    "title": "Class DocumentExtensions | MIcroBIM Docs",
    "summary": "Class DocumentExtensions Namespace MBF.Revit.Creation.Extensions Assembly MBF.Revit.Creation.dll Provides extension methods for working with Revit documents, specifically for managing linked Revit models. [LogAspect] public static class DocumentExtensions Inheritance object DocumentExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods to retrieve and manipulate linked Revit model instances within a document. These methods are designed to simplify common tasks related to linked models, such as retrieving all valid linked models or ensuring that linked models are set to be room bounding. Methods GetAllLinkedRevitModels(Document) Retrieves all valid linked Revit model instances in the document. public static List<RevitLinkInstance> GetAllLinkedRevitModels(this Document doc) Parameters doc Document The Revit document to search in. Returns List<RevitLinkInstance> A list of Autodesk.Revit.DB.RevitLinkInstance objects representing valid linked models. MakeLinkedModelsRoomBounding(Document) Ensures that all linked Revit models in the document are set to be room bounding. public static void MakeLinkedModelsRoomBounding(this Document doc) Parameters doc Document The Revit document in which to update linked model settings."
  },
  "api/MBF.Revit.Creation.Extensions.html": {
    "href": "api/MBF.Revit.Creation.Extensions.html",
    "title": "Namespace MBF.Revit.Creation.Extensions | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Creation.Extensions Classes DocumentExtensions Provides extension methods for working with Revit documents, specifically for managing linked Revit models."
  },
  "api/MBF.Revit.Data.Extensions.DocumentExtensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.DocumentExtensions.html",
    "title": "Class DocumentExtensions | MIcroBIM Docs",
    "summary": "Class DocumentExtensions Namespace MBF.Revit.Data.Extensions Assembly MBF.Revit.Data.dll Provides extension methods for working with Revit documents, enabling operations such as retrieving elements, creating views, and managing linked documents. [LogAspect] public static class DocumentExtensions Inheritance object DocumentExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This static class contains a variety of helper methods designed to simplify common tasks when working with Autodesk Revit's API. These methods include retrieving specific types of elements (e.g., family types, levels, rebar shapes), creating and managing views, and handling linked documents. Each method in this class is implemented as an extension method for the Autodesk.Revit.DB.Document class, allowing them to be called directly on instances of Autodesk.Revit.DB.Document. The methods in this class return results wrapped in MbResult<T> objects, which encapsulate both the operation's outcome and any error messages, ensuring robust error handling. Methods CreateAndPlaceColumnAtPoint(Document, XYZ, FamilySymbol, Level, Level) Creates and places a column at a specified point in the Revit document. public static MbResult<FamilyInstance> CreateAndPlaceColumnAtPoint(this Document doc, XYZ point, FamilySymbol columnType, Level baseLevel, Level topLevel) Parameters doc Document The Revit document where the column will be placed. point XYZ The XYZ point where the column will be placed. columnType FamilySymbol The FamilySymbol representing the column type. baseLevel Level The base level of the column. topLevel Level The top level of the column. Returns MbResult<FamilyInstance> An MbResult<T> containing: The created FamilyInstance if successful. An error message if any input is invalid or column creation fails. GetAllRevitDocuments(Document) Retrieves the base document and all linked Revit documents. public static List<Document> GetAllRevitDocuments(this Document doc) Parameters doc Document The base Revit document. Returns List<Document> A list of Revit Autodesk.Revit.DB.Document instances including the base and all linked documents. GetFamilyTypesByCategoryOrderedByName(Document, BuiltInCategory) Retrieves all family types in the specified category from the given Revit document, ordered by their names. public static MbResult<ObservableCollection<FamilySymbol>> GetFamilyTypesByCategoryOrderedByName(this Document doc, BuiltInCategory category) Parameters doc Document The Revit document from which to retrieve the family types. Cannot be null. category BuiltInCategory The built-in category to filter the family types. Returns MbResult<ObservableCollection<FamilySymbol>> A result object containing an observable collection of Autodesk.Revit.DB.FamilySymbol objects ordered by name if the operation succeeds, or an error message in bullet points if the operation fails. Remarks This method uses a filtered element collector to retrieve family types of the specified category and orders them alphabetically by their names. If an error occurs during the operation, the result will contain a failure message with details in bullet points: The Revit document cannot be null. An error occurred: [error message] GetLevelsOrderedByProperty<TKey>(Document, Func<Level, TKey>, bool) Retrieves all levels from the specified Revit document as an ObservableCollection, ordered dynamically by a specified property. public static MbResult<ObservableCollection<Level>> GetLevelsOrderedByProperty<TKey>(this Document doc, Func<Level, TKey> keySelector, bool ascending = true) Parameters doc Document The Revit document to search for levels. keySelector Func<Level, TKey> A function to extract a key from a Level for ordering. ascending bool If true, orders levels in ascending order; otherwise, descending. Returns MbResult<ObservableCollection<Level>> An MbResult<T> containing: An ObservableCollection of Level objects if successful. An error message if the document or keySelector is null. Type Parameters TKey The type of the property used for ordering. GetLinkedDocumentsOnly(Document) Retrieves only the linked Revit documents associated with the given base document. public static List<Document> GetLinkedDocumentsOnly(this Document doc) Parameters doc Document The base Revit document. Returns List<Document> A list of linked Autodesk.Revit.DB.Document instances. GetRebarBarTypes(Document) Retrieves all rebar bar types from the specified Revit document as an ObservableCollection. public static MbResult<ObservableCollection<RebarBarType>> GetRebarBarTypes(this Document doc) Parameters doc Document The Revit document to retrieve rebar bar types from. Returns MbResult<ObservableCollection<RebarBarType>> An MbResult<T> containing: An ObservableCollection of RebarBarType objects if successful. An error message if the document is null. GetRebarShapes(Document) Retrieves all rebar shapes from the specified Revit document. public static MbResult<List<RebarShape>> GetRebarShapes(this Document doc) Parameters doc Document The Revit document to retrieve rebar shapes from. Returns MbResult<List<RebarShape>> An MbResult<T> containing: A list of RebarShape objects if successful. An error message if the document is null. SearchOrCreate3DView(Document, string, bool) Searches for a 3D view with the specified name. If it exists, returns it. Optionally, creates a new 3D view if specified. public static MbResult<View3D> SearchOrCreate3DView(this Document doc, string viewName, bool createView = false) Parameters doc Document The Revit document to search or create the 3D view in. viewName string The name of the 3D view to search for or create. createView bool If true, creates a new 3D view if one does not exist. Returns MbResult<View3D> An MbResult<T> containing: The existing or newly created Autodesk.Revit.DB.View3D object if successful. An error message if the document is null, the view name is invalid, or creation fails."
  },
  "api/MBF.Revit.Data.Extensions.PipeExtensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.PipeExtensions.html",
    "title": "Class PipeExtensions | MIcroBIM Docs",
    "summary": "Class PipeExtensions Namespace MBF.Revit.Data.Extensions Assembly MBF.Revit.Data.dll Provides extension methods for working with Autodesk.Revit.DB.Plumbing.Pipe objects in Revit. [LogAspect] public static class PipeExtensions Inheritance object PipeExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes utility methods for retrieving geometric and system-related information about pipes, such as endpoints, connectors, curves, and associated piping system types. Each method returns an MbResult<T> to encapsulate the result or an error message, ensuring robust error handling for common issues like null inputs or invalid pipe states. Methods GetEndPoints(Pipe) Retrieves the endpoints of a pipe as a list of XYZ points. public static MbResult<List<XYZ>> GetEndPoints(this Pipe pipe) Parameters pipe Pipe The pipe to get the endpoints for. Returns MbResult<List<XYZ>> An MbResult<T> containing the list of endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetLineOfPipe(Pipe) Gets the line representing the pipe's geometry. public static MbResult<Line> GetLineOfPipe(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the line from. Returns MbResult<Line> An MbResult<T> containing the line or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestEndPoints(Pipe, XYZ) Finds the nearest and farthest endpoints of a pipe relative to a specified point. public static MbResult<List<XYZ>> GetNearestEndPoints(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to find endpoints for. point XYZ The reference point for distance comparison. Returns MbResult<List<XYZ>> An MbResult<T> containing a list of nearest and farthest endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestOneSideConnector(Pipe, XYZ) Finds the nearest one-side connector on a pipe to a specified point. public static MbResult<Connector> GetNearestOneSideConnector(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to search for connectors. point XYZ The point to measure the distance from. Returns MbResult<Connector> An MbResult<T> containing the nearest connector or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"No connectors found on the pipe.\" - Returned if the pipe does not have any valid connectors. \"An error occurred while finding the nearest connector: {ErrorMessage}\" - Returned if an unexpected exception occurs. GetPipeCurve(Pipe) Gets the curve representing the pipe's geometry. public static MbResult<Curve> GetPipeCurve(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the curve from. Returns MbResult<Curve> An MbResult<T> containing the curve or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetPipingSystemType(Pipe, Document) Gets the piping system type associated with a pipe. public static MbResult<PipingSystemType> GetPipingSystemType(this Pipe pipe, Document document) Parameters pipe Pipe The pipe to retrieve the piping system type for. document Document The Revit document containing the pipe. Returns MbResult<PipingSystemType> An MbResult<T> containing the piping system type or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The document cannot be null.\" - Returned if the input document is null. \"The pipe is not associated with a piping system.\" - Returned if the pipe is not part of a piping system. \"Failed to retrieve the piping system type.\" - Returned if the piping system type cannot be retrieved. \"An error occurred while retrieving the piping system type: {ErrorMessage}\" - Returned if an unexpected exception occurs."
  },
  "api/MBF.Revit.Data.Extensions.SelectionExtensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.SelectionExtensions.html",
    "title": "Class SelectionExtensions | MIcroBIM Docs",
    "summary": "Class SelectionExtensions Namespace MBF.Revit.Data.Extensions Assembly MBF.Revit.Data.dll Provides extension methods for retrieving selected elements of specific types from a UIDocument. [LogAspect] public static class SelectionExtensions Inheritance object SelectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetSelectedElements<T>(UIDocument) Gets the selected elements of the specified type from the document. public static List<T> GetSelectedElements<T>(this UIDocument uiDocument) where T : Element Parameters uiDocument UIDocument The UIDocument to get the selected elements from. Returns List<T> A list of the selected elements of the specified type. Type Parameters T The type of elements to get. Remarks Error messages: Returns an empty list if no elements of the specified type are selected. Throws ArgumentNullException if uiDocument is null. GetSelectedFamilyInstances(UIDocument) Gets the selected family instances from the document. public static List<FamilyInstance> GetSelectedFamilyInstances(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected family instances from. Returns List<FamilyInstance> A list of the selected family instances. Remarks Error messages: Returns an empty list if no family instances are selected. GetSelectedPipes(UIDocument) Gets the selected pipes from the document. public static List<Pipe> GetSelectedPipes(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected pipes from. Returns List<Pipe> A list of the selected pipes. Remarks Error messages: Returns an empty list if no pipes are selected. GetSelectedSpaces(UIDocument) Gets the selected spaces from the document. public static List<Space> GetSelectedSpaces(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected spaces from. Returns List<Space> A list of the selected spaces. Remarks Error messages: Returns an empty list if no spaces are selected. GetSelectedSprinklers(UIDocument) Gets the selected sprinklers from the document. Filters the selected FamilyInstance elements to return only those categorized as BuiltInCategory.OST_Sprinklers. public static List<FamilyInstance> GetSelectedSprinklers(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected sprinklers from. Returns List<FamilyInstance> A list of the selected sprinkler family instances. Remarks Error messages: Returns an empty list if no sprinklers are selected."
  },
  "api/MBF.Revit.Data.Extensions.SpaceExtensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.SpaceExtensions.html",
    "title": "Class SpaceExtensions | MIcroBIM Docs",
    "summary": "Class SpaceExtensions Namespace MBF.Revit.Data.Extensions Assembly MBF.Revit.Data.dll Provides extension methods for working with Autodesk.Revit.DB.Mechanical.Space objects, including retrieving boundary segments and validating the space. [LogAspect] public static class SpaceExtensions Inheritance object SpaceExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains methods to assist in common operations related to Autodesk.Revit.DB.Mechanical.Space objects, such as extracting boundary curves and ensuring the validity of a space. These methods are designed to simplify working with spaces in spatial modeling scenarios. Methods GetBoundarySegment(Space) Retrieves the boundary segments of a space as a list of curves. public static MbResult<List<Curve>> GetBoundarySegment(this Space space) Parameters space Space The space to get the boundary segments for. Returns MbResult<List<Curve>> An MbResult<T> containing: A list of boundary curves if the operation is successful. An error message if the operation fails. Possible error messages include: Validate(Space) Validates the space object to ensure it is valid and has a positive area. public static MbResult<bool> Validate(this Space space) Parameters space Space The space to validate. Returns MbResult<bool> An MbResult<T> containing: true if the space is valid. An error message if the validation fails. Possible error messages include:"
  },
  "api/MBF.Revit.Data.Extensions.ViewExtensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.ViewExtensions.html",
    "title": "Class ViewExtensions | MIcroBIM Docs",
    "summary": "Class ViewExtensions Namespace MBF.Revit.Data.Extensions Assembly MBF.Revit.Data.dll Provides extension methods for working with Revit views. [LogAspect] public static class ViewExtensions Inheritance object ViewExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains methods that extend the functionality of Revit views, enabling operations such as retrieving visible elements. Methods GetVisibleElements(View, Document) Retrieves all elements that are visible in the specified Revit view. public static MbResult<List<Element>> GetVisibleElements(this View view, Document document) Parameters view View The Revit view to search for visible elements. document Document The Revit document containing the view. Returns MbResult<List<Element>> An MbResult<T> object containing: A list of elements visible in the specified view if the operation is successful. A failure result with the following error messages for invalid parameters: \"The view parameter cannot be null.\" \"The document parameter cannot be null.\""
  },
  "api/MBF.Revit.Data.Extensions.html": {
    "href": "api/MBF.Revit.Data.Extensions.html",
    "title": "Namespace MBF.Revit.Data.Extensions | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Data.Extensions Classes DocumentExtensions Provides extension methods for working with Revit documents, enabling operations such as retrieving elements, creating views, and managing linked documents. PipeExtensions Provides extension methods for working with Autodesk.Revit.DB.Plumbing.Pipe objects in Revit. SelectionExtensions Provides extension methods for retrieving selected elements of specific types from a UIDocument. SpaceExtensions Provides extension methods for working with Autodesk.Revit.DB.Mechanical.Space objects, including retrieving boundary segments and validating the space. ViewExtensions Provides extension methods for working with Revit views."
  },
  "api/MBF.Revit.Data.Models.MbDocument.html": {
    "href": "api/MBF.Revit.Data.Models.MbDocument.html",
    "title": "Class MbDocument | MIcroBIM Docs",
    "summary": "Class MbDocument Namespace MBF.Revit.Data.Models Assembly MBF.Revit.Data.dll Represents a Revit document, including both standalone documents and linked documents. public class MbDocument Inheritance object MbDocument Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The MbDocument class provides functionality to manage and retrieve information about Revit documents, including linked documents. It supports operations such as retrieving all linked documents associated with a base document and accessing properties like the transformation applied to a linked document or its parent document. Constructors MbDocument(Document) Initializes a new instance of the MbDocument class for a standalone (non-linked) document. public MbDocument(Document document) Parameters document Document The standalone Revit document. MbDocument(RevitLinkInstance, Document) Initializes a new instance of the MbDocument class for a linked document. public MbDocument(RevitLinkInstance linkInstance, Document parentDocument) Parameters linkInstance RevitLinkInstance The Revit link instance referencing the linked document. parentDocument Document The parent document containing the link. Properties Document Gets or sets the associated Revit Document. public Document Document { get; set; } Property Value Document IsLinked Gets or sets a value indicating whether this document is a linked document. public bool IsLinked { get; set; } Property Value bool LinkInstance Gets or sets the Autodesk.Revit.DB.RevitLinkInstance that defines the link context. public RevitLinkInstance LinkInstance { get; set; } Property Value RevitLinkInstance LinkParentDocument Gets or sets the parent document from which this link was referenced, if applicable. public Document LinkParentDocument { get; set; } Property Value Document LinkTransform Gets or sets the transformation applied to the link instance. public Transform LinkTransform { get; set; } Property Value Transform Methods GetAllDocuments(Document) Retrieves a list of MbDocument instances including the base document and all linked documents. public static List<MbDocument> GetAllDocuments(Document doc) Parameters doc Document The base Revit document. Returns List<MbDocument> A list of MbDocument objects. GetLinkedDocuments(Document) Retrieves all linked documents associated with the given base document. public static List<MbDocument> GetLinkedDocuments(Document doc) Parameters doc Document The base Revit document. Returns List<MbDocument> A list of MbDocument objects representing the linked documents."
  },
  "api/MBF.Revit.Data.Models.html": {
    "href": "api/MBF.Revit.Data.Models.html",
    "title": "Namespace MBF.Revit.Data.Models | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Data.Models Classes MbDocument Represents a Revit document, including both standalone documents and linked documents."
  },
  "api/MBF.Revit.Data.SelectionFilters.DynamicCategorySelectionFilter.html": {
    "href": "api/MBF.Revit.Data.SelectionFilters.DynamicCategorySelectionFilter.html",
    "title": "Class DynamicCategorySelectionFilter | MIcroBIM Docs",
    "summary": "Class DynamicCategorySelectionFilter Namespace MBF.Revit.Data.SelectionFilters Assembly MBF.Revit.Data.dll Represents a selection filter that dynamically allows elements based on their categories. [LogAspect] public class DynamicCategorySelectionFilter : ISelectionFilter Inheritance object DynamicCategorySelectionFilter Implements ISelectionFilter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This filter is designed to restrict selection to elements belonging to specific categories. It supports both Revit 2024+ (long-based ElementId) and earlier versions (int-based ElementId). Constructors DynamicCategorySelectionFilter(params BuiltInCategory[]) Initializes a new instance of the DynamicCategorySelectionFilter class with the specified categories that should be allowed during selection. public DynamicCategorySelectionFilter(params BuiltInCategory[] categories) Parameters categories BuiltInCategory[] An array of BuiltInCategory values to allow. Methods AllowElement(Element) Determines whether a specific element is allowed for selection. public bool AllowElement(Element element) Parameters element Element The element being evaluated. Returns bool true if the element belongs to one of the allowed categories; otherwise, false. AllowReference(Reference, XYZ) Determines whether a reference (face, edge, etc.) is allowed for selection. This implementation disallows reference-based selection and only allows full element selection. public bool AllowReference(Reference reference, XYZ position) Parameters reference Reference The reference being evaluated. position XYZ The 3D position associated with the reference. Returns bool Always returns false to disable reference selection."
  },
  "api/MBF.Revit.Data.SelectionFilters.FaceSelectionFilter.html": {
    "href": "api/MBF.Revit.Data.SelectionFilters.FaceSelectionFilter.html",
    "title": "Class FaceSelectionFilter | MIcroBIM Docs",
    "summary": "Class FaceSelectionFilter Namespace MBF.Revit.Data.SelectionFilters Assembly MBF.Revit.Data.dll Provides a selection filter for Revit elements and references, allowing selection of elements based on their category and ensuring that references correspond to geometric faces. [LogAspect] public class FaceSelectionFilter : ISelectionFilter Inheritance object FaceSelectionFilter Implements ISelectionFilter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This filter can be used to restrict element selection to specific categories or to ensure that only face references are considered valid. It supports two modes of operation: Allowing all element categories by default. Restricting selection to specific categories by providing a list of allowed categories. The filter is particularly useful in scenarios where precise control over element or reference selection is required, such as in custom Revit add-ins or tools. Constructors FaceSelectionFilter(Document) Initializes a new instance of the FaceSelectionFilter that allows all element categories. public FaceSelectionFilter(Document document) Parameters document Document The current Revit document. FaceSelectionFilter(Document, BuiltInCategory) Initializes a new instance of the FaceSelectionFilter that only allows elements from the specified category. public FaceSelectionFilter(Document document, BuiltInCategory category) Parameters document Document The current Revit document. category BuiltInCategory A single allowed BuiltInCategory for selection. Methods AllowElement(Element) Determines whether the given element is eligible for selection based on its category. public bool AllowElement(Element element) Parameters element Element The element to evaluate. Returns bool true if the element is in the allowed category list (or all are allowed); otherwise, false. AllowReference(Reference, XYZ) Determines whether the referenced geometry is a face. public bool AllowReference(Reference refer, XYZ point) Parameters refer Reference The reference to check. point XYZ The point on the geometry (not used). Returns bool true if the reference is to a face; otherwise, false."
  },
  "api/MBF.Revit.Data.SelectionFilters.HostOrLinkedCategorySelectionFilter.html": {
    "href": "api/MBF.Revit.Data.SelectionFilters.HostOrLinkedCategorySelectionFilter.html",
    "title": "Class HostOrLinkedCategorySelectionFilter | MIcroBIM Docs",
    "summary": "Class HostOrLinkedCategorySelectionFilter Namespace MBF.Revit.Data.SelectionFilters Assembly MBF.Revit.Data.dll A selection filter that allows selecting elements from the host or a linked Revit model, restricted to a specific set of categories. [LogAspect] public class HostOrLinkedCategorySelectionFilter : ISelectionFilter Inheritance object HostOrLinkedCategorySelectionFilter Implements ISelectionFilter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Error messages: If categories is null in the constructor, an empty list is used. If _revitLinkInstance is null in AllowReference(Reference, XYZ), returns false. If linkedDoc is null in AllowReference(Reference, XYZ), returns false. Constructors HostOrLinkedCategorySelectionFilter(IEnumerable<Category>) Initializes a new instance of the HostOrLinkedCategorySelectionFilter class. public HostOrLinkedCategorySelectionFilter(IEnumerable<Category> categories) Parameters categories IEnumerable<Category> The categories to allow from both host and linked documents. Remarks If categories is null, an empty list is used. Methods AllowElement(Element) Determines whether an element can be selected directly. public bool AllowElement(Element elem) Parameters elem Element The element being evaluated. Returns bool true if it's a host element in the allowed categories or a Autodesk.Revit.DB.RevitLinkInstance; otherwise, false. AllowReference(Reference, XYZ) Determines whether a reference (e.g. in a linked file) is selectable. public bool AllowReference(Reference reference, XYZ position) Parameters reference Reference The reference to the element. position XYZ The selection point (not used). Returns bool true if the referenced element's category is allowed; otherwise, false. Remarks Returns false if _revitLinkInstance is null. Returns false if linkedDoc is null."
  },
  "api/MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.html": {
    "href": "api/MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.html",
    "title": "Class LinkedCategorySelectionFilter | MIcroBIM Docs",
    "summary": "Class LinkedCategorySelectionFilter Namespace MBF.Revit.Data.SelectionFilters Assembly MBF.Revit.Data.dll Selection filter for linked Revit documents that restricts selection to elements belonging to specified categories within a selected MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance. [LogAspect] public class LinkedCategorySelectionFilter : ISelectionFilter Inheritance object LinkedCategorySelectionFilter Implements ISelectionFilter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LinkedCategorySelectionFilter(IEnumerable<Category>) Initializes a new instance of the LinkedCategorySelectionFilter class. public LinkedCategorySelectionFilter(IEnumerable<Category> categories) Parameters categories IEnumerable<Category> The categories to allow from the linked document. Remarks If categories is null, an empty list is used. Methods AllowElement(Element) Determines whether an element is selectable. Only allows selecting MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance elements. public bool AllowElement(Element elem) Parameters elem Element The element to evaluate. Returns bool true if the element is a MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance; otherwise, false. Remarks Returns false if the element is not a MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance. AllowReference(Reference, XYZ) Determines whether a referenced element inside the selected linked model is allowed. public bool AllowReference(Reference reference, XYZ position) Parameters reference Reference The reference to an element in the linked model. position XYZ The point on the element being selected (not used). Returns bool true if the linked element belongs to one of the allowed categories; otherwise, false. Remarks Returns false if no MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance has been selected. Returns false if the referenced element does not exist or its category is not allowed."
  },
  "api/MBF.Revit.Data.SelectionFilters.html": {
    "href": "api/MBF.Revit.Data.SelectionFilters.html",
    "title": "Namespace MBF.Revit.Data.SelectionFilters | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Data.SelectionFilters Classes DynamicCategorySelectionFilter Represents a selection filter that dynamically allows elements based on their categories. FaceSelectionFilter Provides a selection filter for Revit elements and references, allowing selection of elements based on their category and ensuring that references correspond to geometric faces. HostOrLinkedCategorySelectionFilter A selection filter that allows selecting elements from the host or a linked Revit model, restricted to a specific set of categories. LinkedCategorySelectionFilter Selection filter for linked Revit documents that restricts selection to elements belonging to specified categories within a selected MBF.Revit.Data.SelectionFilters.LinkedCategorySelectionFilter.RevitLinkInstance."
  },
  "api/MBF.Revit.Data.Utils.EntityUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.EntityUtils.html",
    "title": "Class EntityUtils | MIcroBIM Docs",
    "summary": "Class EntityUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with entities and their associated fields, enabling the retrieval and assignment of values such as Autodesk.Revit.DB.XYZ and ElementId. [LogAspect] public static class EntityUtils Inheritance object EntityUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The EntityUtils class adapts to different runtime environments to ensure compatibility with varying unit systems. It includes methods for retrieving and setting field values in entities, handling both Autodesk.Revit.DB.XYZ and ElementId types. This class is designed for use in scenarios where precise handling of units and field data is required. Error messages: Entity or field cannot be null. Value cannot be null. Failed to retrieve or set the specified field value. Methods GetElementId(Entity, Field) Retrieves the ElementId value associated with the specified field in the given entity. public static ElementId GetElementId(Entity entity, Field field) Parameters entity Entity The Autodesk.Revit.DB.ExtensibleStorage.Entity from which to retrieve the ElementId value. Cannot be null. field Field The Autodesk.Revit.DB.ExtensibleStorage.Field that identifies the data to retrieve. Cannot be null. Returns ElementId The ElementId value associated with the specified field in the entity. Remarks The method retrieves the ElementId value using the appropriate unit system based on the runtime environment. Error messages: Entity or field cannot be null. Failed to retrieve the ElementId value from the entity. GetXYZ(Entity, Field) Retrieves the Autodesk.Revit.DB.XYZ value of the specified field from the given entity. public static XYZ GetXYZ(Entity entity, Field field) Parameters entity Entity The entity from which to retrieve the Autodesk.Revit.DB.XYZ value. Cannot be null. field Field The field that specifies which Autodesk.Revit.DB.XYZ value to retrieve. Cannot be null. Returns XYZ The Autodesk.Revit.DB.XYZ value associated with the specified field in the entity. Remarks The method adapts to different versions of the API to ensure compatibility. Error messages: Entity or field cannot be null. Failed to retrieve the XYZ value from the entity. SetElementId(Entity, Field, ElementId) Sets the specified ElementId value for the given Autodesk.Revit.DB.ExtensibleStorage.Entity and Autodesk.Revit.DB.ExtensibleStorage.Field. public static void SetElementId(Entity entity, Field field, ElementId value) Parameters entity Entity The Autodesk.Revit.DB.ExtensibleStorage.Entity to which the value will be assigned. Cannot be null. field Field The Autodesk.Revit.DB.ExtensibleStorage.Field that identifies the property to set. Cannot be null. value ElementId The ElementId value to assign to the specified field. Cannot be null. Remarks The method ensures compatibility with different versions of the API by using the appropriate unit type when setting the value. Error messages: Entity, field, or value cannot be null. Failed to set the ElementId value for the specified field. SetXYZ(Entity, Field, XYZ) Sets the specified field of the given entity to the provided XYZ value, using the appropriate unit system. public static void SetXYZ(Entity entity, Field field, XYZ value) Parameters entity Entity The entity whose field is to be updated. Cannot be null. field Field The field of the entity to set. Cannot be null. value XYZ The XYZ value to assign to the specified field. Cannot be null. Remarks The method determines the appropriate unit system based on the runtime environment and applies it when setting the field. Error messages: Entity, field, or value cannot be null. Failed to set the XYZ value for the specified field."
  },
  "api/MBF.Revit.Data.Utils.MbFlexPipesUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbFlexPipesUtils.html",
    "title": "Class MbFlexPipesUtils | MIcroBIM Docs",
    "summary": "Class MbFlexPipesUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Filters the provided collection of Revit elements and retrieves all flex pipes. [LogAspect] public static class MbFlexPipesUtils Inheritance object MbFlexPipesUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This method ensures that only elements categorized as flex pipes (BuiltInCategory.OST_FlexPipeCurves) are returned. It uses the category information of each element to perform the filtering. Methods GetFlexPipeInstances(IEnumerable<Element>) Filters the provided collection of Revit elements and retrieves all flex pipes. public static IEnumerable<FlexPipe> GetFlexPipeInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Revit elements to filter. Returns IEnumerable<FlexPipe> An IEnumerable<T> of Autodesk.Revit.DB.Plumbing.FlexPipe objects. Remarks This method ensures that only elements categorized as flex pipes (BuiltInCategory.OST_FlexPipeCurves) are returned. Possible error messages: ArgumentNullException: Thrown if selectedElements is null. InvalidCastException: Thrown if an element cannot be cast to Autodesk.Revit.DB.Plumbing.FlexPipe."
  },
  "api/MBF.Revit.Data.Utils.MbParameterUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbParameterUtils.html",
    "title": "Class MbParameterUtils | MIcroBIM Docs",
    "summary": "Class MbParameterUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with Revit parameters. [LogAspect] public static class MbParameterUtils Inheritance object MbParameterUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetParameterValue(StorageType, Parameter) Retrieves the string representation of a parameter's value based on its Autodesk.Revit.DB.StorageType. public static string GetParameterValue(StorageType storageType, Parameter instanceParameter) Parameters storageType StorageType The storage type of the parameter (e.g. Double, Integer, String, ElementId). instanceParameter Parameter The parameter from which to extract the value. Returns string A string representation of the parameter's value. Possible error messages: \"N/A\" - Returned if the parameter value is a string and is null. \"Unsupported Type\" - Returned if the storage type is not supported."
  },
  "api/MBF.Revit.Data.Utils.MbPipeAccessoriesUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbPipeAccessoriesUtils.html",
    "title": "Class MbPipeAccessoriesUtils | MIcroBIM Docs",
    "summary": "Class MbPipeAccessoriesUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with pipe accessory elements in Revit. [LogAspect] public static class MbPipeAccessoriesUtils Inheritance object MbPipeAccessoriesUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains methods to filter and retrieve Revit elements categorized as pipe accessories. It is designed to work with collections of Revit elements and supports conditional compilation for compatibility with different Revit versions. Methods GetPipeAccessoriesInstances(IEnumerable<Element>) Retrieves all FamilyInstance elements categorized as pipe accessories from the provided collection of Revit elements. public static IEnumerable<FamilyInstance> GetPipeAccessoriesInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Element objects to search within. Returns IEnumerable<FamilyInstance> An IEnumerable<T> containing all elements from selectedElements that are instances of families and belong to the BuiltInCategory.OST_PipeAccessory category. Remarks This method filters the input collection to include only elements whose category is \"Pipe Accessories\", then casts those elements to FamilyInstance for further use. The filtering logic uses conditional compilation to support different Revit versions. Possible error messages: ArgumentNullException: Thrown if selectedElements is null. InvalidCastException: Thrown if an element cannot be cast to FamilyInstance (should not occur due to OfType usage)."
  },
  "api/MBF.Revit.Data.Utils.MbPipeFittingsUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbPipeFittingsUtils.html",
    "title": "Class MbPipeFittingsUtils | MIcroBIM Docs",
    "summary": "Class MbPipeFittingsUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with pipe fittings in Revit. [LogAspect] public static class MbPipeFittingsUtils Inheritance object MbPipeFittingsUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FittingSizeIsEqual(FamilyInstance) Checks if all connectors of a given fitting have equal sizes (radius). public static MbResult<bool> FittingSizeIsEqual(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance of the fitting to check. Returns MbResult<bool> Returns an MbResult<T> where T is bool: If IsSuccess is true, the operation completed successfully. If Value is true, all connectors have equal sizes or there are fewer than two connectors. If Value is false, connectors have different sizes. If IsSuccess is false, an error occurred, and ErrorMessage provides details: \"Instance is null.\" GetAngleBetweenLargestRadiusConnectors(FamilyInstance) Calculates the angle between the two connectors with the largest radius in the given FamilyInstance. public static MbResult<double> GetAngleBetweenLargestRadiusConnectors(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance containing connectors to analyze. Returns MbResult<double> Returns an MbResult<T> where T is double: If IsSuccess is true, the operation completed successfully. If Value is a valid angle, it represents the computed angle between the two connectors with the largest radius. If IsSuccess is false, an error occurred, and ErrorMessage provides details: \"FamilyInstance is null.\" GetAngleBetweenLargestRadiusConnectors(List<Connector>) Calculates the angle between the two connectors with the largest radius in the given list of connectors. public static MbResult<double> GetAngleBetweenLargestRadiusConnectors(List<Connector> connectors) Parameters connectors List<Connector> A list of connectors to analyze. Returns MbResult<double> Returns an MbResult<T> where T is double: If IsSuccess is true, the operation completed successfully. If Value is a valid angle, it represents the computed angle between the two connectors with the largest radius. If IsSuccess is false, an error occurred, and ErrorMessage provides details: \"At least two connectors are required.\" GetElbowsFamilyInstances(IEnumerable<Element>) Filters the provided collection of Revit elements and retrieves all pipe fitting family instances that are categorized as \"Elbow\" fittings. public static IEnumerable<FamilyInstance> GetElbowsFamilyInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Revit elements to filter. Returns IEnumerable<FamilyInstance> An IEnumerable<T> of FamilyInstance objects representing elbow fittings. Remarks This method ensures that only elements categorized as pipe fittings (BuiltInCategory.OST_PipeFitting) and specifically of type PartType.Elbow are returned. GetOrderedConnectorSizesInInch(Element, bool) Retrieves a sorted list of connector sizes (diameters) in inches for a given Element that is an Autodesk.Revit.DB.MEPCurve. public static MbResult<List<double>> GetOrderedConnectorSizesInInch(Element element, bool isAscending = true) Parameters element Element The Element representing an Autodesk.Revit.DB.MEPCurve. isAscending bool Specifies whether to sort the sizes in ascending (true) or descending (false) order. Returns MbResult<List<double>> An MbResult<T> where T is List<T>: If IsSuccess is true, the operation completed successfully. The list contains the diameters of all connectors in inches, sorted in the specified order. If IsSuccess is false, an error occurred, and ErrorMessage provides details: \"Element is null.\" \"No connectors found.\" GetOrderedConnectorSizesInInch(FamilyInstance, bool) Retrieves a sorted list of connector sizes (diameters) for a given fitting. public static MbResult<List<double>> GetOrderedConnectorSizesInInch(FamilyInstance instance, bool isAscending = true) Parameters instance FamilyInstance The Autodesk.Revit.DB.FamilyInstance representing the fitting. isAscending bool Specifies whether to sort the sizes in ascending (true) or descending (false) order. Returns MbResult<List<double>> An MbResult<T> where T is List<T>: If IsSuccess is true, the operation completed successfully. The list contains the diameters of all connectors in the specified order. If IsSuccess is false, an error occurred and ErrorMessage provides details: \"Instance is null.\" \"No connectors found.\" GetOtherFittingWhichIsNotElbowsOrTeesOrOutletsFamilyInstances(IEnumerable<Element>) Filters the provided collection of Revit elements and retrieves all pipe fitting family instances that are not categorized as \"Tee\", \"Elbow\", or \"Outlets\" fittings. public static IEnumerable<FamilyInstance> GetOtherFittingWhichIsNotElbowsOrTeesOrOutletsFamilyInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Revit elements to filter. Returns IEnumerable<FamilyInstance> An IEnumerable<T> of FamilyInstance objects representing fittings that are not tee, elbow, or outlet fittings. Remarks This method ensures that only elements categorized as pipe fittings (BuiltInCategory.OST_PipeFitting) and excluding types PartType.Tee, PartType.Elbow, or PartType.SpudAdjustable are returned. GetOutletDirectionCode(Pipe, FamilyInstance) Determines the outlet orientation code (e.g., 1 = Top, 2 = Right, etc.) relative to the pipe axis, based on job file standards. public static double GetOutletDirectionCode(Pipe pipe, FamilyInstance outlet) Parameters pipe Pipe The host pipe. outlet FamilyInstance The outlet FamilyInstance. Returns double Directional code (1.0 = Top, 1.5 = Top-Right 45°, etc.), or -1 if undetermined. -1: No matching direction found within tolerance or outlet connector not found. GetOutletsFamilyInstances(IEnumerable<Element>) Filters the provided collection of Revit elements and retrieves all pipe fitting family instances that are categorized as \"Outlets\" (Spud Adjustable) fittings. public static IEnumerable<FamilyInstance> GetOutletsFamilyInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Revit elements to filter. Returns IEnumerable<FamilyInstance> An IEnumerable<T> of FamilyInstance objects representing outlet fittings. Remarks This method ensures that only elements categorized as pipe fittings (BuiltInCategory.OST_PipeFitting) and specifically of type PartType.SpudAdjustable (representing outlets) are returned. GetPerpendicularClockwise(XYZ) Returns a vector perpendicular to the input vector in the clockwise direction, on the XY plane. public static XYZ GetPerpendicularClockwise(this XYZ vector) Parameters vector XYZ Input vector. Returns XYZ Clockwise perpendicular vector on XY plane. GetPerpendicularCounterClockwise(XYZ) Returns a vector perpendicular to the input vector in the counter-clockwise direction, on the XY plane. public static XYZ GetPerpendicularCounterClockwise(this XYZ vector) Parameters vector XYZ Input vector. Returns XYZ Counter-clockwise perpendicular vector on XY plane. GetPerpendicularPlaneAxes(XYZ) Returns a tuple of two orthogonal vectors that define a plane perpendicular to the input vector: - First: a stable perpendicular vector (clockwise or counter-clockwise). - Second: the cross-product (normal) to establish a consistent plane direction. public static (XYZ Perpendicular, XYZ Normal) GetPerpendicularPlaneAxes(this XYZ pipeDirection) Parameters pipeDirection XYZ The primary pipe direction vector. Returns (XYZ Perpendicular, XYZ Normal) A tuple (perpendicular, normal) defining the orientation plane. GetTeeFamilyInstances(IEnumerable<Element>) Filters the provided collection of Revit elements and retrieves all pipe fitting family instances that are categorized as \"Tee\" fittings. public static IEnumerable<FamilyInstance> GetTeeFamilyInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Revit elements to filter. Returns IEnumerable<FamilyInstance> An IEnumerable<T> of FamilyInstance objects representing tee fittings. Remarks This method ensures that only elements categorized as pipe fittings (BuiltInCategory.OST_PipeFitting) and specifically of type PartType.Tee are returned."
  },
  "api/MBF.Revit.Data.Utils.MbPipesUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbPipesUtils.html",
    "title": "Class MbPipesUtils | MIcroBIM Docs",
    "summary": "Class MbPipesUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with pipe elements in Revit. [LogAspect] public static class MbPipesUtils Inheritance object MbPipesUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ArePointsClose(FamilyInstance, FamilyInstance, double) Determines whether the locations of two FamilyInstance objects are within a specified distance threshold. public static bool ArePointsClose(FamilyInstance a, FamilyInstance b, double threshold) Parameters a FamilyInstance The first FamilyInstance. Must not be null. b FamilyInstance The second FamilyInstance. Must not be null. threshold double The maximum distance, in the same units as the points' coordinates, within which the two instances are considered close. Returns bool true if the distance between the locations of a and b is less than threshold; otherwise, false. Remarks If either a or b is null, or if their locations cannot be determined, the method returns false. ArePointsSame(XYZ, XYZ) Determines whether two points in 3D space are considered the same based on a small tolerance. public static bool ArePointsSame(XYZ point1, XYZ point2) Parameters point1 XYZ The first point to compare. point2 XYZ The second point to compare. Returns bool true if the distance between point1 and point2 is less than 0.01; otherwise, false. Remarks This method uses a fixed tolerance of 0.01 to account for minor differences in floating-point calculations. FamilyIsOutsideLine(FamilyInstance, Line) Determines whether the specified family instance is outside the given line. public static bool FamilyIsOutsideLine(FamilyInstance familyInstance, Line line) Parameters familyInstance FamilyInstance The family instance to evaluate. Must have a valid Autodesk.Revit.DB.LocationPoint. line Line The line against which the family instance's position is evaluated. Returns bool true if the family instance is projected onto one of the endpoints of the line; otherwise, false. Remarks This method checks if the projection of the family instance's location point onto the specified line coincides with either of the line's endpoints. If the family instance does not have a valid Autodesk.Revit.DB.LocationPoint, the method returns false. FindNearbyUnconnectedConnector(XYZ, Document, List<ElementId>, HashSet<int>, string) Finds the nearest unconnected connector to a specified point within a given document. public static Connector FindNearbyUnconnectedConnector(XYZ targetPoint, Document doc, List<ElementId> excludedElementIds, HashSet<int> discoveredElementIds = null, string caller = null) Parameters targetPoint XYZ The target point in 3D space to search for nearby connectors. doc Document The Revit document containing the elements to search. excludedElementIds List<ElementId> A list of element IDs to exclude from the search. discoveredElementIds HashSet<int> An optional set of element IDs that have already been processed. These elements will be excluded from the search. caller string The name of the calling method, automatically provided by the compiler. Used to adjust behavior for specific callers. Returns Connector The nearest unconnected Connector to the targetPoint, or null if no suitable connector is found. Remarks This method searches for connectors within a bounding box centered on the targetPoint. It filters out connectors belonging to elements that are excluded or already processed, as well as connectors whose owners are subcomponents of other elements. The method prioritizes connectors based on their proximity to the targetPoint and returns the closest one within its connection radius. GetConnectedFittingsBothSidesOfPipe(Document, Pipe) Retrieves the connectors of fittings connected to both ends of a specified pipe. public static List<Connector> GetConnectedFittingsBothSidesOfPipe(Document doc, Pipe pipe) Parameters doc Document The Revit document containing the pipe and its connected elements. pipe Pipe The pipe for which to find connected fittings on both ends. Returns List<Connector> A list of Connector objects representing the connectors of fittings connected to both ends of the specified pipe. The list will be empty if no fittings are connected. Remarks This method identifies fittings connected to the pipe's end connectors and includes only those fittings that are spuds, tees, or elbows. If no fittings are found, the method attempts to locate connectors based on the pipe's nearest endpoints. GetConnectedFittingsOnCurve(Pipe) Retrieves a list of fittings connected to the specified pipe along its curve connectors. public static List<FamilyInstance> GetConnectedFittingsOnCurve(this Pipe pipe) Parameters pipe Pipe The pipe for which to find connected fittings. Cannot be null. Returns List<FamilyInstance> A list of FamilyInstance objects representing the fittings connected to the pipe. The list will be empty if no fittings are connected. Remarks This method examines the curve-type connectors of the specified pipe and identifies any connected fittings. Only fittings directly connected to the pipe's curve connectors are included in the result. GetConnectorsForElement(Element) Retrieves a list of valid connectors associated with the specified element. public static List<Connector> GetConnectorsForElement(Element element) Parameters element Element The element for which to retrieve the connectors. Must not be null. Returns List<Connector> A list of Connector objects that are valid and associated with the specified element. If no valid connectors are found, an empty list is returned. GetEndConnectors(Pipe) Returns the end connectors of a pipe, excluding those owned by a Autodesk.Revit.DB.Plumbing.PipingSystem. public static List<Connector> GetEndConnectors(this Pipe pipe) Parameters pipe Pipe The pipe to evaluate. Returns List<Connector> A list of end Connector objects not owned by a piping system. GetEndPoint(Pipe, PipePointType) Retrieves the specified endpoint of the pipe. public static XYZ GetEndPoint(this Pipe pipe, PipePointType pipePointType) Parameters pipe Pipe The pipe from which to retrieve the endpoint. pipePointType PipePointType Specifies whether to retrieve the start or end point of the pipe. Returns XYZ The endpoint of the pipe as specified by pipePointType. GetFarSideConnectedToFamilyInstance(Document, Pipe, XYZ) Gets the connector on the far end of the pipe (opposite to the reference point) that is connected to a FamilyInstance. public static Connector GetFarSideConnectedToFamilyInstance(Document doc, Pipe pipe, XYZ referencePoint) Parameters doc Document The Revit document. pipe Pipe The pipe to evaluate. referencePoint XYZ A point used to identify the far end of the pipe. Returns Connector The connected Connector on the far side, or null if not found. GetFittingAtFarthestConnector(Pipe, XYZ) Finds the fitting connected to the farthest connector of a pipe from the given start point. public static MbResult<Element> GetFittingAtFarthestConnector(Pipe pipe, XYZ startPoint) Parameters pipe Pipe The pipe element to inspect. startPoint XYZ The reference point to compare connector distances to. Returns MbResult<Element> A containing the connected fitting element, or a failure message if not found. GetFittingsOnPipe(Document, Pipe, XYZ) Retrieves a list of fitting element IDs that are associated with the specified pipe. public static List<ElementId> GetFittingsOnPipe(Document doc, Pipe pipe, XYZ sortingPoint = null) Parameters doc Document The Revit document containing the pipe and fittings. pipe Pipe The pipe for which to find associated fittings. Must be a valid pipe element. sortingPoint XYZ An optional point used to sort the fittings by proximity. If null, the fittings are not sorted. Returns List<ElementId> A list of ElementId objects representing the fittings associated with the pipe. The list may be empty if no fittings are found. Remarks This method identifies fittings associated with the pipe based on several criteria, including: Fittings that intersect the pipe's solid geometry. Fittings that are within a proximity threshold of the pipe's centerline. Fittings that are well-connected to the pipe's curve. Duplicate fittings are removed, and fittings at the pipe's endpoints are excluded from the result. If a sortingPoint is provided, the fittings are sorted by their proximity to the point. GetLineOfPipe(Pipe) Retrieves the geometric line representation of the specified pipe. public static Line GetLineOfPipe(this Pipe pipe) Parameters pipe Pipe The pipe for which to retrieve the line representation. Cannot be null. Returns Line A Autodesk.Revit.DB.Line object representing the pipe's geometry. If the pipe has a stored start point, the line is created using the start point and the nearest endpoint. Otherwise, the line is created using the pipe's start and end points. Remarks This method determines the line representation of a pipe based on its stored start point, if available, or its defined start and end points. The returned line can be used for geometric calculations or visualization. GetPipeCurve(Pipe) Retrieves the geometric curve that defines the center line of the specified pipe. public static Curve GetPipeCurve(this Pipe pipe) Parameters pipe Pipe The pipe from which to retrieve the center line curve. Must not be . Returns Curve The representing the center line of the pipe, or if the pipe does not have a valid location curve. Remarks This method extracts the form the of the pipe. Ensure that the pipe has a valid location curve before calling this method. GetPipeInstances(IEnumerable<Element>) Retrieves all pipe instances from the specified collection of Revit elements. public static IEnumerable<Pipe> GetPipeInstances(IEnumerable<Element> pipeSelectedElements) Parameters pipeSelectedElements IEnumerable<Element> A collection of Revit elements to filter for pipe instances. Returns IEnumerable<Pipe> An enumerable collection of Autodesk.Revit.DB.Plumbing.Pipe objects representing the pipe instances found in the input collection. If no pipe instances are found, the returned collection will be empty. Remarks This method filters the provided elements to include only those that belong to the \"Pipe Curves\" category and are of type Autodesk.Revit.DB.Plumbing.Pipe. The filtering logic adapts to the Revit version being used. GetValidSpudFittings(Document) Retrieves a list of valid spud fittings from the specified document. public static List<FamilyInstance> GetValidSpudFittings(this Document doc) Parameters doc Document The Revit document to search for spud fittings. Returns List<FamilyInstance> A list of FamilyInstance objects representing valid spud fittings in the document. The list will be empty if no valid spud fittings are found. Remarks This method filters elements in the document to include only pipe fittings that are instances of FamilyInstance and meet specific criteria for validity. Elements that do not pass the validity check are excluded. IsPointOnPipeEndPoints(XYZ, Pipe) Determines whether the specified point is located on one of the endpoints of the given pipe. public static bool IsPointOnPipeEndPoints(XYZ point, Pipe pipe) Parameters point XYZ The point to check. pipe Pipe The pipe whose endpoints are to be evaluated. Returns bool true if the specified point is on one of the pipe's endpoints; otherwise, false. IsSpudAtEndPointsOfPipe(Pipe, ElementId, Document) Determines whether the specified element is located at either endpoint of the given pipe. public static bool IsSpudAtEndPointsOfPipe(Pipe pipe, ElementId elementId, Document doc) Parameters pipe Pipe The pipe to check for endpoint connections. elementId ElementId The ID of the element to evaluate. doc Document The document containing the pipe and element. Returns bool true if the element is located at one of the endpoints of the pipe; otherwise, false. IsSpudFitting(FamilyInstance) Determines whether the specified FamilyInstance represents a spud fitting. public static bool IsSpudFitting(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance to evaluate. Must not be null. Returns bool true if the instance is a spud fitting; otherwise, false. Remarks A spud fitting is identified as a FamilyInstance with no FamilyInstance.SuperComponent and an Autodesk.Revit.DB.MEPModel of type Autodesk.Revit.DB.Mechanical.MechanicalFitting where the Autodesk.Revit.DB.Mechanical.MechanicalFitting.PartType is either PartType.SpudAdjustable or PartType.SpudPerpendicular . IsTeeOrElbowFitting(FamilyInstance) Determines whether the specified FamilyInstance represents a tee or elbow fitting. public static bool IsTeeOrElbowFitting(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance to evaluate. This parameter can be null. Returns bool true if the instance is a mechanical fitting of type tee or elbow; otherwise, false. Remarks This method checks if the instance has an Autodesk.Revit.DB.MEPModel of type Autodesk.Revit.DB.Mechanical.MechanicalFitting and evaluates its PartType to determine if it is a tee or elbow fitting. IsWellConnected(FamilyInstance) Determines whether the specified FamilyInstance is well-connected. public static bool IsWellConnected(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance to evaluate. This parameter cannot be null. Returns bool true if all connectors in the instance's MEP model are connected; otherwise, false. Returns false if the instance or its MEP model is null. RemoveDuplicateFittings(ref List<FamilyInstance>) Removes duplicate fittings from the provided list based on proximity and connection criteria. public static void RemoveDuplicateFittings(ref List<FamilyInstance> fittings) Parameters fittings List<FamilyInstance> A reference to the list of FamilyInstance objects representing the fittings. The list will be modified to contain only unique fittings after the method completes. Remarks Two fittings are considered duplicates if their positions are within a predefined threshold. When duplicates are found, the method retains the fitting with the most connected connectors, or the first fitting in the group if no fitting is better connected. SortFittingsByProximity(Document, List<ElementId>, XYZ) Groups and sorts a list of fitting elements by their proximity to a specified reference point. public static List<List<ElementId>> SortFittingsByProximity(Document doc, List<ElementId> fittingIds, XYZ referencePoint) Parameters doc Document The Revit document containing the fitting elements. fittingIds List<ElementId> A list of ElementId objects representing the fittings to be sorted. referencePoint XYZ The reference point used to calculate the proximity of each fitting. Returns List<List<ElementId>> A list of grouped lists of ElementId objects, where each inner list contains fittings that are within a specified proximity tolerance of each other. The groups are sorted by the distance of their first element to the reference point. Remarks The method groups fittings that are within 5 centimeters (0.164 feet) of each other and sorts the groups based on the distance of the first fitting in each group to the reference point. This can be useful for organizing fittings spatially in a Revit model."
  },
  "api/MBF.Revit.Data.Utils.MbSpaceUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbSpaceUtils.html",
    "title": "Class MbSpaceUtils | MIcroBIM Docs",
    "summary": "Class MbSpaceUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with Autodesk.Revit.DB.Mechanical.Space elements in Autodesk Revit. [LogAspect] public static class MbSpaceUtils Inheritance object MbSpaceUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains static methods to assist in retrieving and manipulating Autodesk.Revit.DB.Mechanical.Space elements from the Revit model, particularly from the user's current selection in the active view. Methods GetSpacesFromSelection(UIDocument) Retrieves a list of Autodesk.Revit.DB.Mechanical.Space elements from the current selection in the Revit UI. public static List<Space> GetSpacesFromSelection(UIDocument uiDoc) Parameters uiDoc UIDocument The UIDocument representing the active Revit document and user interface context. Returns List<Space> A list of Autodesk.Revit.DB.Mechanical.Space elements selected by the user. Returns an empty list if no valid Autodesk.Revit.DB.Mechanical.Space elements are selected. Remarks This method filters the current selection to include only valid Autodesk.Revit.DB.Mechanical.Space elements. Invalid or non-Autodesk.Revit.DB.Mechanical.Space elements in the selection are ignored."
  },
  "api/MBF.Revit.Data.Utils.MbSprinklersUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbSprinklersUtils.html",
    "title": "Class MbSprinklersUtils | MIcroBIM Docs",
    "summary": "Class MbSprinklersUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with sprinkler elements in Revit. [LogAspect] public static class MbSprinklersUtils Inheritance object MbSprinklersUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains methods to assist in identifying and working with Revit elements categorized as sprinklers. It is designed to simplify common operations related to sprinkler elements, such as filtering and casting. Methods GetSprinklerInstances(IEnumerable<Element>) Retrieves all FamilyInstance elements categorized as sprinklers from the provided collection of Revit elements. public static IEnumerable<FamilyInstance> GetSprinklerInstances(IEnumerable<Element> selectedElements) Parameters selectedElements IEnumerable<Element> A collection of Element objects to search within. Returns IEnumerable<FamilyInstance> An IEnumerable<T> containing all elements from selectedElements that are categorized as BuiltInCategory.OST_Sprinklers. Remarks This method filters the input collection to include only elements whose category is \"Sprinklers\", then casts those elements to FamilyInstance for further use. The filtering logic uses conditional compilation to support different Revit versions."
  },
  "api/MBF.Revit.Data.Utils.MbUnitUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbUnitUtils.html",
    "title": "Class MbUnitUtils | MIcroBIM Docs",
    "summary": "Class MbUnitUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with measurement units in Revit. [LogAspect] public static class MbUnitUtils Inheritance object MbUnitUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods to retrieve and standardize unit symbols for length measurements in the active Revit document. It supports both modern and legacy Revit versions by handling differences in unit type representations. Methods GetLengthUnitSymbol() Retrieves the unit symbol used for length in the active Revit document. public static string GetLengthUnitSymbol() Returns string A string representing the standardized symbol of the length unit (e.g., \"mm\", \"ft\", \"in\", etc.). If the unit type cannot be identified, returns \"Unknown\". GetStandardUnitSymbol(object) Maps Revit unit types to standardized short symbols. public static string GetStandardUnitSymbol(object unitTypeId) Parameters unitTypeId object The unit type identifier, either a ForgeTypeId or DisplayUnitType, depending on Revit version. Returns string A short string symbol representing the unit (e.g., \"mm\", \"cm\", \"ft-in\"). Returns a user-readable label from Revit's Autodesk.Revit.DB.LabelUtils as a fallback. Returns \"Unknown\" if mapping cannot be resolved."
  },
  "api/MBF.Revit.Data.Utils.MbViewUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.MbViewUtils.html",
    "title": "Class MbViewUtils | MIcroBIM Docs",
    "summary": "Class MbViewUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utility methods for working with Revit views, including graphical view checks, zooming to elements, creating temporary 3D views, and managing view isolation. [LogAspect] public class MbViewUtils Inheritance object MbViewUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains static methods designed to simplify common operations related to Revit views. It includes functionality for determining view types, manipulating graphical views, and creating or managing temporary 3D views. These utilities are intended to streamline workflows in Revit add-ins and enhance user interaction with views. Constructors MbViewUtils() public MbViewUtils() Methods Create3DView(Document) Creates a new isometric 3D view in the specified document. public static MbResult<View3D> Create3DView(Document doc) Parameters doc Document The Revit document in which the 3D view will be created. Cannot be null. Returns MbResult<View3D> MbResult<T> containing the result of the operation: Success: Returns a successful MbResult<T> containing the newly created Autodesk.Revit.DB.View3D. Failure: Returns a failed MbResult<T> with an error message if: No 3D view type is found to copy from. The Autodesk.Revit.DB.ViewFamilyType could not be retrieved. Failure to create the 3D view. Remarks This method attempts to create a new isometric 3D view by copying the settings from an existing non-template 3D view in the document. The new view is named \"Temp3DMBFire\" and has its detail level set to ViewDetailLevel.Fine. EnsureTemp3DViewIsOpen(Document) Creates and opens the temporary 3D view if it's not already opened in the UI. public static void EnsureTemp3DViewIsOpen(Document activeDoc) Parameters activeDoc Document The active document wrapper. GetAllPlanViews(Document) Retrieves all non-template plan views from the specified Revit document. public static IList<ViewPlan> GetAllPlanViews(Document doc) Parameters doc Document The Revit document from which to retrieve the plan views. Cannot be null. Returns IList<ViewPlan> A list of Autodesk.Revit.DB.ViewPlan objects representing all non-template plan views in the document. Returns an empty list if no such views are found. GetAllThreeDViews(Document) Retrieves all 3D views in the specified Revit document that are not templates. public static List<View3D> GetAllThreeDViews(Document doc) Parameters doc Document The Revit document from which to retrieve the 3D views. Cannot be null. Returns List<View3D> A list of Autodesk.Revit.DB.View3D objects representing all non-template 3D views in the document. Returns an empty list if no such views are found. GetOrCreateTemp3D(Document) Retrieves an existing 3D view named \"Temp3DMBFire\" from the specified document, or creates a new one if it does not exist. public static MbResult<View3D> GetOrCreateTemp3D(Document doc) Parameters doc Document The Autodesk.Revit.DB.Document from which to retrieve or create the 3D view. This parameter cannot be null. Returns MbResult<View3D> A MbResult<T> containing the 3D view. If a view named \"Temp3DMBFire\" exists, it is returned; otherwise, a new 3D view is created and returned. Remarks This method first searches for an existing 3D view with the name \"Temp3DMBFire\". If found, it returns the existing view wrapped in a successful MbResult<T>. If no such view exists, a new 3D view is created and returned. GetTemp3DNoTransaction(Document) Retrieves a temporary 3D view for the specified document without initiating a transaction. public static MbResult<View3D> GetTemp3DNoTransaction(Document doc) Parameters doc Document The document for which the temporary 3D view is to be retrieved or created. Cannot be null. Returns MbResult<View3D> A MbResult<T> containing the temporary 3D view if successful, or an error result if the operation fails. IsGraphicalView(View) Determines whether the specified Autodesk.Revit.DB.View represents a graphical view. public static bool IsGraphicalView(View view) Parameters view View The Autodesk.Revit.DB.View to evaluate. Must not be null. Returns bool true if the view is a graphical view, such as a floor plan, section, or 3D view; otherwise, false. Remarks Graphical views include types such as floor plans, ceiling plans, sections, elevations, 3D views, drafting views, area plans, engineering plans, details, and legends. Non-graphical views include schedules, reports, and undefined views. ResetTemporaryIsolate() Resets the temporary isolate mode for the active view, if it is currently enabled. public static void ResetTemporaryIsolate() Remarks This method checks if the active view has temporary isolate mode enabled and, if so, disables it. If no active view exists or temporary isolate mode is not active, the method performs no action. TemporarilyIsolateElement(Element) Temporarily isolates the specified element in the active graphical view. public static bool TemporarilyIsolateElement(Element element) Parameters element Element The element to isolate. Must belong to the document of the active view. Returns bool true if the element was successfully isolated; otherwise, false. Remarks This method isolates the specified element temporarily in the active view of the document. Isolation is only supported in graphical views. If the active view is not graphical, the method displays a warning message and returns false. If an error occurs during the isolation process, an error message is displayed, and the method returns false. ZoomToElement(Element) Zooms and centers the active view on the specified element's bounding box. public static void ZoomToElement(Element element) Parameters element Element The element to zoom to. Must belong to the active document and have a valid bounding box in the active view. Remarks This method adjusts the active view to focus on the bounding box of the specified element. If the bounding box cannot be retrieved or the active view is not a graphical view (e.g., plan, 3D view, section, or legend), an error message is displayed, and no action is taken. The method also optionally selects the element in the active view. ZoomToElement(ElementId) Zooms and centers the active view on the specified element by its ElementId. public static void ZoomToElement(ElementId elementId) Parameters elementId ElementId The ElementId of the element to zoom to. Must belong to the active document. Remarks This method adjusts the active view to focus on the bounding box of the specified element. If the bounding box cannot be retrieved, an error message is displayed. The method works only in graphical views such as plan, 3D, section, or legend views. If the active view is not a supported graphical view, an error message is displayed. ZoomToElement(FamilyInstance) Zooms and centers the active view on the specified FamilyInstance element. public static void ZoomToElement(FamilyInstance instance) Parameters instance FamilyInstance The FamilyInstance to zoom to. Must belong to the active document. Remarks This method adjusts the active view to focus on the bounding box of the specified element. If the bounding box cannot be retrieved, an error message is displayed. The method works only in graphical views such as plan, 3D, section, or legend views. If the active view is not a supported graphical view, an error message is displayed."
  },
  "api/MBF.Revit.Data.Utils.PipePointType.html": {
    "href": "api/MBF.Revit.Data.Utils.PipePointType.html",
    "title": "Enum PipePointType | MIcroBIM Docs",
    "summary": "Enum PipePointType Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Reprepipents a specific point along a pipe, either at the start or the end. public enum PipePointType Fields End = 1 Refers to the end point of the pipe geometry. Equivalent to pipe.get_EndPoint(1). Start = 0 Refers to the start point of the pipe geometry. Equivalent to pipe.get_EndPoint(0)."
  },
  "api/MBF.Revit.Data.Utils.RevitUnitUtils.html": {
    "href": "api/MBF.Revit.Data.Utils.RevitUnitUtils.html",
    "title": "Class RevitUnitUtils | MIcroBIM Docs",
    "summary": "Class RevitUnitUtils Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Determines whether the units of the specified Revit document are metric. [LogAspect] public static class RevitUnitUtils Inheritance object RevitUnitUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This method checks the length unit settings of the provided Revit document to determine if they are configured to use metric units. Metric units include meters, centimeters, and millimeters. Methods IsMetric(Document) Determines whether the specified document uses metric units for length measurements. public static bool IsMetric(this Document doc) Parameters doc Document The document to evaluate. Returns bool true if the document uses metric units such as meters, centimeters, or millimeters; otherwise, false."
  },
  "api/MBF.Revit.Data.Utils.XyzExtensibleStorage.html": {
    "href": "api/MBF.Revit.Data.Utils.XyzExtensibleStorage.html",
    "title": "Class XyzExtensibleStorage | MIcroBIM Docs",
    "summary": "Class XyzExtensibleStorage Namespace MBF.Revit.Data.Utils Assembly MBF.Revit.Data.dll Provides utilities for reading and writing Autodesk.Revit.DB.XYZ start point data for Autodesk.Revit.DB.Plumbing.Pipe elements using Revit's Extensible Storage API. [LogAspect] public static class XyzExtensibleStorage Inheritance object XyzExtensibleStorage Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetEntityValue(Entity, Field) Retrieves the value of the specified field from the given entity as an Autodesk.Revit.DB.XYZ object. public static XYZ GetEntityValue(Entity entity, Field field) Parameters entity Entity The Autodesk.Revit.DB.ExtensibleStorage.Entity from which the field value is retrieved. Cannot be null. field Field The Autodesk.Revit.DB.ExtensibleStorage.Field that specifies the data to retrieve. Cannot be null. Returns XYZ An Autodesk.Revit.DB.XYZ object representing the value of the specified field in the entity. Remarks The method retrieves the value using the appropriate unit system based on the Revit version. For Revit 2021 or later, the method uses a unit system derived from the Autodesk.Revit.DB.SpecTypeId.Length specification. For earlier versions, it defaults to DisplayUnitType.DUT_FEET_FRACTIONAL_INCHES. GetNearestEndPoints(Pipe) Retrieves the endpoints of the specified pipe's location curve. public static List<XYZ> GetNearestEndPoints(this Pipe pipe) Parameters pipe Pipe The pipe whose endpoints are to be retrieved. Must have a valid location curve. Returns List<XYZ> A list of Autodesk.Revit.DB.XYZ objects representing the start and end points of the pipe's location curve. If the pipe does not have a location curve, an empty list is returned. Remarks This method assumes the pipe's location is a Autodesk.Revit.DB.LocationCurve. If the location is not a Autodesk.Revit.DB.LocationCurve, the method will return an empty list without throwing an exception. GetNearestEndPoints(Pipe, XYZ) Returns the pipe's endpoints sorted by proximity to a given point. public static List<XYZ> GetNearestEndPoints(this Pipe p, XYZ referencePoint) Parameters p Pipe The pipe. referencePoint XYZ The point to compare against. Returns List<XYZ> List of endpoints with the nearest one first. ReadStartPoint(Pipe) Retrieves the stored start point of the given Autodesk.Revit.DB.Plumbing.Pipe, if available and valid. public static XYZ ReadStartPoint(Pipe pipe) Parameters pipe Pipe The pipe from which to retrieve the stored Autodesk.Revit.DB.XYZ start point. Returns XYZ The nearest endpoint to the stored start point if valid and close to the actual pipe ends; otherwise, null. SetStartPoint(Pipe, XYZ, string) Sets the start point of a pipe in extensible storage, choosing the nearest pipe endpoint. Skips overwriting if already set by another tool, unless the caller is explicitly allowed. public static void SetStartPoint(Pipe pipe, XYZ startPoint, string caller = null) Parameters pipe Pipe The pipe to set the start point for. startPoint XYZ The picked point by the user. caller string The name of the calling method, used to control write permissions."
  },
  "api/MBF.Revit.Data.Utils.html": {
    "href": "api/MBF.Revit.Data.Utils.html",
    "title": "Namespace MBF.Revit.Data.Utils | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Data.Utils Classes EntityUtils Provides utility methods for working with entities and their associated fields, enabling the retrieval and assignment of values such as Autodesk.Revit.DB.XYZ and ElementId. MbFlexPipesUtils Filters the provided collection of Revit elements and retrieves all flex pipes. MbParameterUtils Provides utility methods for working with Revit parameters. MbPipeAccessoriesUtils Provides utility methods for working with pipe accessory elements in Revit. MbPipeFittingsUtils Provides utility methods for working with pipe fittings in Revit. MbPipesUtils Provides utility methods for working with pipe elements in Revit. MbSpaceUtils Provides utility methods for working with Autodesk.Revit.DB.Mechanical.Space elements in Autodesk Revit. MbSprinklersUtils Provides utility methods for working with sprinkler elements in Revit. MbUnitUtils Provides utility methods for working with measurement units in Revit. MbViewUtils Provides utility methods for working with Revit views, including graphical view checks, zooming to elements, creating temporary 3D views, and managing view isolation. RevitUnitUtils Determines whether the units of the specified Revit document are metric. XyzExtensibleStorage Provides utilities for reading and writing Autodesk.Revit.DB.XYZ start point data for Autodesk.Revit.DB.Plumbing.Pipe elements using Revit's Extensible Storage API. Enums PipePointType Reprepipents a specific point along a pipe, either at the start or the end."
  },
  "api/MBF.Revit.Geometry.Extensions.BoundingBoxExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.BoundingBoxExtensions.html",
    "title": "Class BoundingBoxExtensions | MIcroBIM Docs",
    "summary": "Class BoundingBoxExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for working with Autodesk.Revit.DB.BoundingBoxXYZ objects. [LogAspect] public static class BoundingBoxExtensions Inheritance object BoundingBoxExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods to convert Autodesk.Revit.DB.BoundingBoxXYZ instances into other geometric representations, such as CurveLoop objects, for use in various geometric and modeling operations. Methods ToCurveLoop(BoundingBoxXYZ) Converts a Autodesk.Revit.DB.BoundingBoxXYZ into a closed rectangular CurveLoop in the XY plane. public static MbResult<CurveLoop> ToCurveLoop(this BoundingBoxXYZ boundingBox) Parameters boundingBox BoundingBoxXYZ The bounding box to convert. Returns MbResult<CurveLoop> An MbResult<T>: Success: Contains the rectangular CurveLoop. Failure: \"BoundingBoxXYZ is null.\" Failure: \"Failed to convert BoundingBoxXYZ to CurveLoop: [exception message]\""
  },
  "api/MBF.Revit.Geometry.Extensions.BoundingBoxVisualizerExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.BoundingBoxVisualizerExtensions.html",
    "title": "Class BoundingBoxVisualizerExtensions | MIcroBIM Docs",
    "summary": "Class BoundingBoxVisualizerExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for visualizing bounding boxes as 2D outlines in a Revit document. [LogAspect] public static class BoundingBoxVisualizerExtensions Inheritance object BoundingBoxVisualizerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods to visualize single or multiple bounding boxes as 2D shapes in the specified Revit document. The visualizations are created as red outlines by default, but an optional color can be specified. Methods VisualizeBoundingBox2D(BoundingBoxXYZ, Document, Color) Visualizes a 2D representation of the specified Autodesk.Revit.DB.BoundingBoxXYZ in the given Revit document. public static void VisualizeBoundingBox2D(this BoundingBoxXYZ boundingBox, Document doc, Color color = null) Parameters boundingBox BoundingBoxXYZ The 2D bounding box to visualize. Cannot be null. doc Document The Revit document where the bounding box will be visualized. Cannot be null. color Color The color to use for the visualization. If null, the default color is red (RGB: 255, 0, 0). Remarks This method creates a 2D visualization of the bounding box as a direct shape in the specified document. The visualization is created within a transaction, which is started and committed by this method. VisualizeBoundingBoxes2D(IEnumerable<BoundingBoxXYZ>, Document, Color) Visualizes a collection of 2D bounding boxes in the specified Revit document. public static void VisualizeBoundingBoxes2D(this IEnumerable<BoundingBoxXYZ> boundingBoxes, Document doc, Color color = null) Parameters boundingBoxes IEnumerable<BoundingBoxXYZ> A collection of Autodesk.Revit.DB.BoundingBoxXYZ objects representing the 2D bounding boxes to visualize. doc Document The Autodesk.Revit.DB.Document in which the bounding boxes will be visualized. This cannot be null. color Color An optional Autodesk.Revit.DB.Color to use for the bounding box visualization. If not specified, the default color is red (RGB: 255, 0, 0). Remarks This method creates 2D visual representations of the provided bounding boxes as direct shapes in the Revit document. If a bounding box in the collection is null, it will be skipped."
  },
  "api/MBF.Revit.Geometry.Extensions.ClipperExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.ClipperExtensions.html",
    "title": "Class ClipperExtensions | MIcroBIM Docs",
    "summary": "Class ClipperExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for working with Clipper2Lib.PathsD and Clipper2Lib.PathD collections, as well as converting Clipper2Lib.PathD objects to Revit CurveLoop instances. [LogAspect] public static class ClipperExtensions Inheritance object ClipperExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes utility methods for manipulating Clipper paths and integrating them with Revit geometry. Methods AddPathDToPathsD(PathsD, PathD) Adds a single Clipper2Lib.PathD to an existing Clipper2Lib.PathsD collection. public static PathsD AddPathDToPathsD(this PathsD pathsD, PathD pathD) Parameters pathsD PathsD The Clipper2Lib.PathsD collection to which the path will be added. pathD PathD The Clipper2Lib.PathD to add. Returns PathsD The updated Clipper2Lib.PathsD collection containing the added path. ToCurveLoop(PathD) Converts a Clipper2Lib.PathD into a Revit CurveLoop by connecting its points with lines. public static MbResult<CurveLoop> ToCurveLoop(this PathD pathD) Parameters pathD PathD The Clipper path to convert. Returns MbResult<CurveLoop> An MbResult<T>: Success: Contains the resulting CurveLoop. Failure: \"PathD is null.\" Failure: \"PathD must contain at least two points to create a CurveLoop.\" Failure: \"Failed to convert PathD to CurveLoop: [exception message]\""
  },
  "api/MBF.Revit.Geometry.Extensions.CurveLoopExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.CurveLoopExtensions.html",
    "title": "Class CurveLoopExtensions | MIcroBIM Docs",
    "summary": "Class CurveLoopExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for converting CurveLoop objects into Clipper-compatible path representations, such as Clipper2Lib.PathD and Clipper2Lib.PathsD. [LogAspect] public static class CurveLoopExtensions Inheritance object CurveLoopExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks These methods facilitate the conversion of geometric curve data into formats compatible with the Clipper library, enabling operations such as polygon clipping and path manipulation. The methods handle common validation scenarios, such as ensuring the input is not null and that the geometry meets the minimum requirements for conversion. Methods ToClipperPathD(CurveLoop) Converts a CurveLoop into a Clipper-compatible Clipper2Lib.PathD by collecting its curve endpoints. public static MbResult<PathD> ToClipperPathD(this CurveLoop curveLoop) Parameters curveLoop CurveLoop The CurveLoop to convert. Returns MbResult<PathD> An MbResult<T>: Success: Contains the converted Clipper2Lib.PathD. Failure: \"CurveLoop is null.\" Failure: \"The CurveLoop must have at least 3 points to form a polygon.\" Failure: \"Failed to convert CurveLoop to PathD: [exception message]\" ToClipperPathsD(IEnumerable<CurveLoop>) Converts a collection of CurveLoop objects into a Clipper-compatible Clipper2Lib.PathsD. public static MbResult<PathsD> ToClipperPathsD(this IEnumerable<CurveLoop> curveLoops) Parameters curveLoops IEnumerable<CurveLoop> The CurveLoop collection to convert. Returns MbResult<PathsD> An MbResult<T>: Success: Contains the converted Clipper2Lib.PathsD. Failure: \"CurveLoop collection is null.\" Failure: Any error from ToClipperPathD(CurveLoop) such as \"CurveLoop is null.\" or invalid geometry. Failure: \"Failed to convert CurveLoops to PathsD: [exception message]\" ToPathsD(CurveLoop) Wraps a single CurveLoop into a Clipper2Lib.PathsD collection. public static MbResult<PathsD> ToPathsD(this CurveLoop curveLoop) Parameters curveLoop CurveLoop The CurveLoop to wrap. Returns MbResult<PathsD> An MbResult<T>: Success: Contains a Clipper2Lib.PathsD with one converted path. Failure: Any error from ToClipperPathD(CurveLoop), such as null or invalid geometry."
  },
  "api/MBF.Revit.Geometry.Extensions.CurveLoopVisualizerExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.CurveLoopVisualizerExtensions.html",
    "title": "Class CurveLoopVisualizerExtensions | MIcroBIM Docs",
    "summary": "Class CurveLoopVisualizerExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for visualizing and creating Revit elements from CurveLoop objects. [LogAspect] public static class CurveLoopVisualizerExtensions Inheritance object CurveLoopVisualizerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods for creating 2D visualizations of CurveLoop objects using DirectShape elements and for generating Autodesk.Revit.DB.DetailCurve elements in drafting views. These methods are designed to work with the active view of a Revit document and provide optional customization, such as specifying outline colors. Methods CreateCurveLoopWithDetailCurves(CurveLoop, Document, ViewDrafting, Color) Creates Autodesk.Revit.DB.DetailCurve elements in a Autodesk.Revit.DB.ViewDrafting to represent the given CurveLoop. public static MbResult<List<DetailCurve>> CreateCurveLoopWithDetailCurves(this CurveLoop curveLoop, Document doc, ViewDrafting draftingView, Color color = null) Parameters curveLoop CurveLoop The CurveLoop to draw. doc Document The current Revit document. draftingView ViewDrafting The drafting view where detail curves will be placed. color Color Optional line color; defaults to red if not provided. Returns MbResult<List<DetailCurve>> An MbResult<T> where T is List<T>: Success: Contains the created list of Autodesk.Revit.DB.DetailCurve elements. Failure: \"CurveLoop is null.\" Failure: \"Document or drafting view is null.\" Failure: \"Failed to create detail curves: [exception message]\" VisualizeCurveLoop2D(CurveLoop, Document, Color) Visualizes a single CurveLoop as a 2D outline using a DirectShape element in the active view of the given Revit doc. public static MbResult<DirectShape> VisualizeCurveLoop2D(this CurveLoop curveLoop, Document doc, Color color = null) Parameters curveLoop CurveLoop The CurveLoop to visualize. doc Document The current Revit document containing the active view. color Color Optional outline color; defaults to red if not provided. Returns MbResult<DirectShape> An MbResult<T>: Success: Contains the created DirectShape. Failure: \"CurveLoop is null.\" Failure: \"Document or active view is null.\" Failure: \"Failed to visualize CurveLoop: [exception message]\" VisualizeCurveLoops2D(IEnumerable<CurveLoop>, Document, Color) Visualizes a list of CurveLoop objects as 2D outlines using DirectShape elements in the active view of the given Revit doc. public static MbResult<List<DirectShape>> VisualizeCurveLoops2D(this IEnumerable<CurveLoop> curveLoops, Document doc, Color color = null) Parameters curveLoops IEnumerable<CurveLoop> The collection of CurveLoop instances to visualize. doc Document The current Revit document containing the active view. color Color Optional outline color; defaults to red if not provided. Returns MbResult<List<DirectShape>> An MbResult<T> where T is List<T>: Success: Contains a list of created DirectShape elements. Failure: \"CurveLoop collection is null.\" Failure: \"Document or active view is null.\" Failure: \"Failed to visualize multiple CurveLoops: [exception message]\""
  },
  "api/MBF.Revit.Geometry.Extensions.CurveVisualizerExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.CurveVisualizerExtensions.html",
    "title": "Class CurveVisualizerExtensions | MIcroBIM Docs",
    "summary": "Class CurveVisualizerExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for visualizing Autodesk.Revit.DB.Curve instances as 2D geometry in Revit, either using DirectShape elements in model views or Autodesk.Revit.DB.DetailCurve elements in drafting views. [LogAspect] public static class CurveVisualizerExtensions Inheritance object CurveVisualizerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateCurveWithDetailCurve(Curve, Document, ViewDrafting, Color) Creates a Autodesk.Revit.DB.DetailCurve element in a Autodesk.Revit.DB.ViewDrafting to represent the given Autodesk.Revit.DB.Curve. public static MbResult<DetailCurve> CreateCurveWithDetailCurve(this Curve curve, Document doc, ViewDrafting draftingView, Color color = null) Parameters curve Curve The Autodesk.Revit.DB.Curve to draw. doc Document The current Revit document. draftingView ViewDrafting The drafting view where the detail curve will be placed. color Color Optional line color; defaults to red if not provided. Returns MbResult<DetailCurve> An MbResult<T>: Success: Contains the created Autodesk.Revit.DB.DetailCurve element. Failure: \"Curve is null.\" Failure: \"Document or drafting view is null.\" Failure: \"Failed to create detail curve: [exception message]\" VisualizeCurve2D(Curve, Document, Color) Visualizes a single Autodesk.Revit.DB.Curve as 2D geometry using a DirectShape element in the active view of the given Revit doc. public static MbResult<DirectShape> VisualizeCurve2D(this Curve curve, Document doc, Color color = null) Parameters curve Curve The Autodesk.Revit.DB.Curve to visualize. doc Document The current Revit document containing the active view. color Color Optional outline color; defaults to red if not provided. Returns MbResult<DirectShape> An MbResult<T>: Success: Contains the created DirectShape element. Failure: \"Curve is null.\" Failure: \"Document or active view is null.\" Failure: \"Failed to visualize curve: [exception message]\" VisualizeCurves2D(IEnumerable<Curve>, Document, Color) Visualizes a list of Autodesk.Revit.DB.Curve instances as 2D outlines using DirectShape elements in the active view of the given Revit doc. public static MbResult<List<DirectShape>> VisualizeCurves2D(this IEnumerable<Curve> curves, Document doc, Color color = null) Parameters curves IEnumerable<Curve> The collection of Autodesk.Revit.DB.Curve instances to visualize. doc Document The current Revit document containing the active view. color Color Optional outline color; defaults to red if not provided. Returns MbResult<List<DirectShape>> An MbResult<T> where T is List<T>: Success: Contains a list of created DirectShape elements. Failure: \"Curve collection is null.\" Failure: \"Document or active view is null.\" Failure: \"Failed to visualize curves: [exception message]\""
  },
  "api/MBF.Revit.Geometry.Extensions.DirectShapeVisualization.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.DirectShapeVisualization.html",
    "title": "Class DirectShapeVisualization | MIcroBIM Docs",
    "summary": "Class DirectShapeVisualization Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides methods for creating and managing DirectShape elements in a Revit document. [LogAspect] public static class DirectShapeVisualization Inheritance object DirectShapeVisualization Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes utility methods for generating geometric shapes, such as spheres, and placing them in the Revit model as DirectShape elements. These methods facilitate the creation of reusable shape types and instances, leveraging Revit's geometry creation utilities. Methods CreateSphere(Document, XYZ, double) Creates a spherical DirectShape element in the Revit document using revolved geometry. public static DirectShape CreateSphere(Document doc, XYZ center, double radius) Parameters doc Document The active Revit document where the shape will be created. center XYZ The center point of the sphere in model coordinates. radius double The radius of the sphere in Revit units (feet). Returns DirectShape A DirectShape element representing the sphere, or null if the geometry could not be defined due to an invalid frame."
  },
  "api/MBF.Revit.Geometry.Extensions.PathDVisualizerExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.PathDVisualizerExtensions.html",
    "title": "Class PathDVisualizerExtensions | MIcroBIM Docs",
    "summary": "Class PathDVisualizerExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for visualizing Clipper2Lib.PathD and Clipper2Lib.PathsD objects as 2D outlines in a Revit document using DirectShape elements. [LogAspect] public static class PathDVisualizerExtensions Inheritance object PathDVisualizerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks These methods allow developers to create visual representations of 2D paths in the active view of a Revit document. The visualizations are rendered as outlines on the XY plane and can be customized with an optional color parameter. Methods VisualizePathD2D(PathD, Document, Color) Visualizes a single Clipper2Lib.PathD as a 2D outline using a DirectShape in the active view of the specified Revit document. public static void VisualizePathD2D(this PathD path, Document doc, Color color = null) Parameters path PathD The Clipper2Lib.PathD to visualize in 2D (XY plane). doc Document The Revit Autodesk.Revit.DB.Document where the path will be visualized. color Color Optional color for the path outline. Defaults to red if not specified. VisualizePathsD2D(PathsD, Document, Color) Visualizes each Clipper2Lib.PathD in a Clipper2Lib.PathsD collection as a 2D outline using DirectShape elements. public static void VisualizePathsD2D(this PathsD paths, Document doc, Color color = null) Parameters paths PathsD The Clipper2Lib.PathsD collection to visualize in 2D (XY plane). doc Document The Revit Autodesk.Revit.DB.Document where the paths will be visualized. color Color Optional color for the path outlines. Defaults to red if not specified."
  },
  "api/MBF.Revit.Geometry.Extensions.XyzVisualizationsExtensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.XyzVisualizationsExtensions.html",
    "title": "Class XyzVisualizationsExtensions | MIcroBIM Docs",
    "summary": "Class XyzVisualizationsExtensions Namespace MBF.Revit.Geometry.Extensions Assembly MBF.Revit.Geometry.dll Provides extension methods for visualizing Autodesk.Revit.DB.XYZ points as 3D objects in a Revit document. [LogAspect] public static class XyzVisualizationsExtensions Inheritance object XyzVisualizationsExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks These methods allow users to create visual representations of Autodesk.Revit.DB.XYZ points in the active view of a Revit document. The visualizations are implemented using DirectShape elements, with optional color customization. Methods VisualizePoint(XYZ, Document, Color) Visualizes an Autodesk.Revit.DB.XYZ point as a 3D point object using a DirectShape in the active view. public static void VisualizePoint(this XYZ point, Document doc, Color color = null) Parameters point XYZ The point to visualize. doc Document The Revit document where the shape will be created. color Color Optional color override. Defaults to red if null. VisualizePointAsElement(XYZ, Document, Color) Visualizes an Autodesk.Revit.DB.XYZ point as a 3D geometry using a DirectShape element in the active view, and returns the created element wrapped in MbResult<T>. public static MbResult<Element> VisualizePointAsElement(this XYZ point, Document doc, Color color = null) Parameters point XYZ The point to visualize. doc Document The Revit document where the shape will be created. color Color Optional color override. Defaults to red if not specified. Returns MbResult<Element> A MbResult<T>: Success: The created DirectShape element. Failure: \"Point, document, or active view is null.\" Failure: \"Exception: [message]\""
  },
  "api/MBF.Revit.Geometry.Extensions.html": {
    "href": "api/MBF.Revit.Geometry.Extensions.html",
    "title": "Namespace MBF.Revit.Geometry.Extensions | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Geometry.Extensions Classes BoundingBoxExtensions Provides extension methods for working with Autodesk.Revit.DB.BoundingBoxXYZ objects. BoundingBoxVisualizerExtensions Provides extension methods for visualizing bounding boxes as 2D outlines in a Revit document. ClipperExtensions Provides extension methods for working with Clipper2Lib.PathsD and Clipper2Lib.PathD collections, as well as converting Clipper2Lib.PathD objects to Revit CurveLoop instances. CurveLoopExtensions Provides extension methods for converting CurveLoop objects into Clipper-compatible path representations, such as Clipper2Lib.PathD and Clipper2Lib.PathsD. CurveLoopVisualizerExtensions Provides extension methods for visualizing and creating Revit elements from CurveLoop objects. CurveVisualizerExtensions Provides extension methods for visualizing Autodesk.Revit.DB.Curve instances as 2D geometry in Revit, either using DirectShape elements in model views or Autodesk.Revit.DB.DetailCurve elements in drafting views. DirectShapeVisualization Provides methods for creating and managing DirectShape elements in a Revit document. PathDVisualizerExtensions Provides extension methods for visualizing Clipper2Lib.PathD and Clipper2Lib.PathsD objects as 2D outlines in a Revit document using DirectShape elements. XyzVisualizationsExtensions Provides extension methods for visualizing Autodesk.Revit.DB.XYZ points as 3D objects in a Revit document."
  },
  "api/MBF.Revit.Geometry.Utils.MbXyzUtils.html": {
    "href": "api/MBF.Revit.Geometry.Utils.MbXyzUtils.html",
    "title": "Class MbXyzUtils | MIcroBIM Docs",
    "summary": "Class MbXyzUtils Namespace MBF.Revit.Geometry.Utils Assembly MBF.Revit.Geometry.dll Provides utility methods for working with 2D geometry, including operations on polygons and line segments. [LogAspect] public static class MbXyzUtils Inheritance object MbXyzUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods for detecting self-intersections in polygons, determining line segment intersections, and sorting points in a clockwise order. It is designed to work with 2D geometry represented by Autodesk.Revit.DB.XYZ points, where the Z-coordinate is ignored in calculations. Methods DoLinesIntersect2D(Line, Line) Determines whether two Revit Autodesk.Revit.DB.Line objects intersect in 2D (ignoring Z). public static bool DoLinesIntersect2D(Line line1, Line line2) Parameters line1 Line First line. line2 Line Second line. Returns bool true if the lines intersect in 2D; otherwise, false. DoLinesIntersect2D(XYZ, XYZ, XYZ, XYZ) Determines whether two line segments in 2D space intersect. public static bool DoLinesIntersect2D(XYZ segment1Start, XYZ segment1End, XYZ segment2Start, XYZ segment2End) Parameters segment1Start XYZ The starting point of the first line segment. segment1End XYZ The ending point of the first line segment. segment2Start XYZ The starting point of the second line segment. segment2End XYZ The ending point of the second line segment. Returns bool true if the two line segments intersect; otherwise, false. Remarks This method uses a counter-clockwise orientation test to determine if the line segments intersect. The segments are considered to intersect if they share any point in common, including endpoints. HasSelfIntersections(List<XYZ>) Determines whether a list of Autodesk.Revit.DB.XYZ points forming a polygon has any self-intersections. public static bool HasSelfIntersections(List<XYZ> points) Parameters points List<XYZ> A list of points representing the polygon vertices in order. Returns bool true if any two non-adjacent edges of the polygon intersect; otherwise, false. Remarks The method performs three checks: Checks all non-adjacent segment pairs within the polygon to detect internal intersections. Checks if the most recently added segment intersects any existing (non-adjacent) segment. Checks if the closing segment (from the last point to the first) intersects any interior segment (excluding adjacent ones). SortPointsClockwise(List<XYZ>) Sorts a list of Autodesk.Revit.DB.XYZ points in clockwise order around their centroid (in 2D plane). public static List<XYZ> SortPointsClockwise(List<XYZ> points) Parameters points List<XYZ> The list of points to sort. Returns List<XYZ> A new list of points sorted clockwise."
  },
  "api/MBF.Revit.Geometry.Utils.PolygonUtils.html": {
    "href": "api/MBF.Revit.Geometry.Utils.PolygonUtils.html",
    "title": "Class PolygonUtils | MIcroBIM Docs",
    "summary": "Class PolygonUtils Namespace MBF.Revit.Geometry.Utils Assembly MBF.Revit.Geometry.dll Provides utility methods for working with 2D polygons in the XY plane. [LogAspect] public static class PolygonUtils Inheritance object PolygonUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class includes methods for determining spatial relationships between points and polygons, such as checking whether a point lies inside a polygon. All calculations are performed in the XY plane, and Z-values of input points are ignored. Methods IsPointInsidePolygon(List<XYZ>, XYZ) Determines whether a given point lies inside a 2D polygon using the ray-casting algorithm (in XY plane). public static MbResult<bool> IsPointInsidePolygon(List<XYZ> polygon, XYZ point) Parameters polygon List<XYZ> The list of polygon vertices (at least 3 points required). Z-values are ignored. point XYZ The point to check. Z-value is ignored. Returns MbResult<bool> An MbResult<T> containing: true if the point lies inside the polygon. false if the point lies outside or on the edge. An error message if the input is invalid or an exception occurs."
  },
  "api/MBF.Revit.Geometry.Utils.html": {
    "href": "api/MBF.Revit.Geometry.Utils.html",
    "title": "Namespace MBF.Revit.Geometry.Utils | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Geometry.Utils Classes MbXyzUtils Provides utility methods for working with 2D geometry, including operations on polygons and line segments. PolygonUtils Provides utility methods for working with 2D polygons in the XY plane."
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.Edge.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.Edge.html",
    "title": "Class Edge | MIcroBIM Docs",
    "summary": "Class Edge Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents an edge in the Voronoi diagram, defined by a line equation and associated sites. public class Edge Inheritance object Edge Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Edge() Initializes a new instance of the Edge class. public Edge() Fields A Coefficient 'a' in the line equation of the edge (a * x + b * y = c). public double A Field Value double B Coefficient 'b' in the line equation of the edge (a * x + b * y = c). public double B Field Value double C Constant term 'c' in the line equation of the edge (a * x + b * y = c). public double C Field Value double Edgenbr Unique identifier for the edge. public int Edgenbr Field Value int Ep Endpoints of the edge (can be null if the edge is a ray or still under construction). public Site[] Ep Field Value Site[] Reg Sites that the edge bisects; these are the two sites whose Voronoi cells are separated by this edge. public Site[] Reg Field Value Site[]"
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.GraphEdge.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.GraphEdge.html",
    "title": "Class GraphEdge | MIcroBIM Docs",
    "summary": "Class GraphEdge Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents a graphical edge in the Voronoi diagram, defined by two endpoints and the indices of the two sites it separates. public class GraphEdge Inheritance object GraphEdge Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors GraphEdge() public GraphEdge() Fields site1 The index of the first site that this edge separates. public int site1 Field Value int site2 The index of the second site that this edge separates. public int site2 Field Value int x1 The X-coordinate of the starting point of the edge. public double x1 Field Value double x2 The X-coordinate of the ending point of the edge. public double x2 Field Value double y1 The Y-coordinate of the starting point of the edge. public double y1 Field Value double y2 The Y-coordinate of the ending point of the edge. public double y2 Field Value double"
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.Halfedge.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.Halfedge.html",
    "title": "Class Halfedge | MIcroBIM Docs",
    "summary": "Class Halfedge Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents a half-edge in the Voronoi diagram, used primarily in Fortune's algorithm for managing the beach line and event queue. public class Halfedge Inheritance object Halfedge Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Halfedge() Initializes a new instance of the Halfedge class. public Halfedge() Fields ELedge The edge associated with this half-edge. public Edge ELedge Field Value Edge ELleft The left neighboring half-edge in the edge list. public Halfedge ELleft Field Value Halfedge ELpm Side indicator: 0 for left, 1 for right. Determines which region the half-edge belongs to. public int ELpm Field Value int ELright The right neighboring half-edge in the edge list. public Halfedge ELright Field Value Halfedge PQnext The next half-edge in the priority queue. public Halfedge PQnext Field Value Halfedge deleted Indicates whether this half-edge has been marked for deletion. public bool deleted Field Value bool vertex The vertex where this half-edge ends (used in the priority queue for upcoming events). public Site vertex Field Value Site ystar The Y-coordinate of the event associated with this half-edge in the priority queue. public double ystar Field Value double"
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.Point.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.Point.html",
    "title": "Class Point | MIcroBIM Docs",
    "summary": "Class Point Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents a point in 2D space. public class Point Inheritance object Point Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Point() Initializes a new instance of the Point class. public Point() Fields x The x-coordinate of the point. public double x Field Value double y The y-coordinate of the point. public double y Field Value double Methods SetPoint(double, double) Sets the coordinates of the point. public void SetPoint(double x, double y) Parameters x double The x-coordinate. y double The y-coordinate."
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.Site.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.Site.html",
    "title": "Class Site | MIcroBIM Docs",
    "summary": "Class Site Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents a site (or generator point) used in the Voronoi diagram, typically associated with a cell in the diagram. public class Site Inheritance object Site Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Site() Initializes a new instance of the Site class. public Site() Fields coord The coordinates of the site in 2D space. public Point coord Field Value Point sitenbr A unique identifier for the site. public int sitenbr Field Value int"
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.SiteSorterYX.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.SiteSorterYX.html",
    "title": "Class SiteSorterYX | MIcroBIM Docs",
    "summary": "Class SiteSorterYX Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Provides a comparison mechanism for sorting Site instances. Sorts first by Y-coordinate, then by X-coordinate if Y values are equal. Useful for processing sites in Fortune's algorithm. public class SiteSorterYX : IComparer<Site> Inheritance object SiteSorterYX Implements IComparer<Site> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SiteSorterYX() public SiteSorterYX() Methods Compare(Site, Site) Compares two Site objects based on their Y and X coordinates. public int Compare(Site p1, Site p2) Parameters p1 Site The first site to compare. p2 Site The second site to compare. Returns int -1 if p1 comes before p2, 1 if it comes after, 0 if they are equal."
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.Voronoi.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.Voronoi.html",
    "title": "Class Voronoi | MIcroBIM Docs",
    "summary": "Class Voronoi Namespace MBF.Revit.Geometry.Voronoi.Models Assembly MBF.Revit.Geometry.dll Represents a Voronoi diagram generator. public class Voronoi Inheritance object Voronoi Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Voronoi(double) Initializes a new instance of the Voronoi class. public Voronoi(double minDistanceBetweenSites) Parameters minDistanceBetweenSites double The minimum distance between sites. Methods generateVoronoi(double[], double[], double, double, double, double) Generates the Voronoi diagram. public List<GraphEdge> generateVoronoi(double[] xValuesIn, double[] yValuesIn, double minX, double maxX, double minY, double maxY) Parameters xValuesIn double[] The x-coordinates of the input sites. yValuesIn double[] The y-coordinates of the input sites. minX double The minimum x-coordinate of the bounding box. maxX double The maximum x-coordinate of the bounding box. minY double The minimum y-coordinate of the bounding box. maxY double The maximum y-coordinate of the bounding box. Returns List<GraphEdge> A list of GraphEdge representing the edges of the Voronoi diagram."
  },
  "api/MBF.Revit.Geometry.Voronoi.Models.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Models.html",
    "title": "Namespace MBF.Revit.Geometry.Voronoi.Models | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Geometry.Voronoi.Models Classes Edge Represents an edge in the Voronoi diagram, defined by a line equation and associated sites. GraphEdge Represents a graphical edge in the Voronoi diagram, defined by two endpoints and the indices of the two sites it separates. Halfedge Represents a half-edge in the Voronoi diagram, used primarily in Fortune's algorithm for managing the beach line and event queue. Point Represents a point in 2D space. Site Represents a site (or generator point) used in the Voronoi diagram, typically associated with a cell in the diagram. SiteSorterYX Provides a comparison mechanism for sorting Site instances. Sorts first by Y-coordinate, then by X-coordinate if Y values are equal. Useful for processing sites in Fortune's algorithm. Voronoi Represents a Voronoi diagram generator."
  },
  "api/MBF.Revit.Geometry.Voronoi.Utils.MbVoronoiAlgorithmHelpers.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Utils.MbVoronoiAlgorithmHelpers.html",
    "title": "Class MbVoronoiAlgorithmHelpers | MIcroBIM Docs",
    "summary": "Class MbVoronoiAlgorithmHelpers Namespace MBF.Revit.Geometry.Voronoi.Utils Assembly MBF.Revit.Geometry.dll Provides helper methods for generating Voronoi diagrams within a specified polygonal boundary. [LogAspect] public static class MbVoronoiAlgorithmHelpers Inheritance object MbVoronoiAlgorithmHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class contains methods to create Voronoi diagrams based on a set of input points and a polygonal boundary. The generated Voronoi diagram is clipped to the boundary of the polygon, and the results are drawn in the active Revit view. Methods CreateVoronoiDiagramAsync(List<XYZ>, List<XYZ>) Generates a Voronoi diagram based on the provided input points and clips it to the specified polygon boundary. public static Task CreateVoronoiDiagramAsync(List<XYZ> inputPoints, List<XYZ> polygonPoints) Parameters inputPoints List<XYZ> A list of points representing the input data for generating the Voronoi diagram. Each point must have valid X and Y coordinates. polygonPoints List<XYZ> A list of points defining the vertices of the polygon boundary. The polygon must be closed, with the first and last points being the same. Returns Task Remarks This method creates a Voronoi diagram by dividing the space into regions around each input point, and then clips the resulting diagram to the specified polygon boundary. The diagram is drawn as detail curves in the active view of the Revit document. The method performs the following steps: Converts the polygon boundary into a geometric representation. Generates Voronoi edges based on the input points. Clips the edges to the polygon boundary and draws them in the active Revit view. Calculates the coverage area for each input point within the polygon boundary."
  },
  "api/MBF.Revit.Geometry.Voronoi.Utils.html": {
    "href": "api/MBF.Revit.Geometry.Voronoi.Utils.html",
    "title": "Namespace MBF.Revit.Geometry.Voronoi.Utils | MIcroBIM Docs",
    "summary": "Namespace MBF.Revit.Geometry.Voronoi.Utils Classes MbVoronoiAlgorithmHelpers Provides helper methods for generating Voronoi diagrams within a specified polygonal boundary."
  },
  "api/MBFWpfToolkit.AttachedProperties.ComboBoxSearchBehavior.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.ComboBoxSearchBehavior.html",
    "title": "Class ComboBoxSearchBehavior | MIcroBIM Docs",
    "summary": "Class ComboBoxSearchBehavior Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll Provides an attached behavior to enable search functionality in a ComboBox, allowing live filtering of items based on user input. public static class ComboBoxSearchBehavior Inheritance object ComboBoxSearchBehavior Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields IsSearchEnabledProperty Identifies the IsSearchEnabled dependency property. This property can be attached to a ComboBox to enable or disable live search filtering functionality. public static readonly DependencyProperty IsSearchEnabledProperty Field Value DependencyProperty true if the search functionality is enabled for the associated ComboBox; otherwise, false. The default value is false. Remarks When this property is set to true, the ComboBox supports a live search filtering mechanism for its items based on the current input text. It also modifies the behavior of the ComboBox, making it editable, disabling built-in text search, and keeping the dropdown open during edits. When set to false, the standard ComboBox behavior is restored. Methods GetFilteredItems(DependencyObject) Gets the filtered items associated with the specified DependencyObject. The filtered items are updated dynamically as the user types into the search-enabled ComboBox. public static ObservableCollection<string> GetFilteredItems(DependencyObject obj) Parameters obj DependencyObject The DependencyObject for which to retrieve the filtered items. Returns ObservableCollection<string> An ObservableCollection<T> of strings representing the currently filtered items. GetIsSearchEnabled(DependencyObject) Gets the value of the IsSearchEnabled attached property for a specified DependencyObject. public static bool GetIsSearchEnabled(DependencyObject obj) Parameters obj DependencyObject The DependencyObject from which to read the attached property value. Returns bool A boolean value indicating whether the live search behavior is enabled on the specified DependencyObject. SetFilteredItems(DependencyObject, ObservableCollection<string>) Sets the filtered collection of items to be displayed in the ComboBox based on the current search behavior. public static void SetFilteredItems(DependencyObject obj, ObservableCollection<string> value) Parameters obj DependencyObject The DependencyObject to set the filtered items for. value ObservableCollection<string> The ObservableCollection<T> of filtered items to set. SetIsSearchEnabled(DependencyObject, bool) Sets the value of the IsSearchEnabledProperty attached property, enabling or disabling live search filtering on a ComboBox. public static void SetIsSearchEnabled(DependencyObject obj, bool value) Parameters obj DependencyObject The dependency object to which the property is attached. value bool A boolean value indicating whether the search feature should be enabled or disabled."
  },
  "api/MBFWpfToolkit.AttachedProperties.HelpAssistant.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.HelpAssistant.html",
    "title": "Class HelpAssistant | MIcroBIM Docs",
    "summary": "Class HelpAssistant Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll Provides attached properties to define step-based help or onboarding instructions for UI elements. Elements can be dynamically registered and retrieved in a specific order based on their step number. public class HelpAssistant Inheritance object HelpAssistant Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HelpAssistant() public HelpAssistant() Fields AutoRegisterProperty Identifies the AutoRegister attached property. This property is used only to trigger element registration dynamically. public static readonly DependencyProperty AutoRegisterProperty Field Value DependencyProperty StepNumberProperty Identifies the StepNumber attached property. Represents the sequence order of the help step. public static readonly DependencyProperty StepNumberProperty Field Value DependencyProperty StepTextProperty Identifies the StepText attached property. Describes the instructional text for the help step. public static readonly DependencyProperty StepTextProperty Field Value DependencyProperty Methods GetAutoRegister(DependencyObject) Gets the AutoRegister value of the element. public static bool GetAutoRegister(DependencyObject obj) Parameters obj DependencyObject Returns bool GetOrderedSteps() Retrieves all registered UI elements with valid step numbers, sorted in ascending order. public static List<FrameworkElement> GetOrderedSteps() Returns List<FrameworkElement> A sorted list of registered FrameworkElements for the help assistant. GetStepNumber(DependencyObject) Gets the step number of the element. public static int GetStepNumber(DependencyObject obj) Parameters obj DependencyObject Returns int GetStepText(DependencyObject) Gets the step text of the element. public static string GetStepText(DependencyObject obj) Parameters obj DependencyObject Returns string SetAutoRegister(DependencyObject, bool) Sets the AutoRegister value of the element. public static void SetAutoRegister(DependencyObject obj, bool value) Parameters obj DependencyObject value bool SetStepNumber(DependencyObject, int) Sets the step number of the element. public static void SetStepNumber(DependencyObject obj, int value) Parameters obj DependencyObject value int SetStepText(DependencyObject, string) Sets the step text of the element. public static void SetStepText(DependencyObject obj, string value) Parameters obj DependencyObject value string"
  },
  "api/MBFWpfToolkit.AttachedProperties.LocalizationHelper.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.LocalizationHelper.html",
    "title": "Class LocalizationHelper | MIcroBIM Docs",
    "summary": "Class LocalizationHelper Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll Provides localization support for WPF controls using attached properties. When LangKeyProperty is set on a control, the corresponding localized value will be applied automatically. public static class LocalizationHelper Inheritance object LocalizationHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields LangKeyProperty Identifies the LangKey attached property. This property is used to bind a localization key to a control. public static readonly DependencyProperty LangKeyProperty Field Value DependencyProperty Methods GetLangKey(DependencyObject) Gets the value of the LangKey attached property. public static string GetLangKey(DependencyObject obj) Parameters obj DependencyObject Returns string SetLangKey(DependencyObject, string) Sets the value of the LangKey attached property. public static void SetLangKey(DependencyObject obj, string value) Parameters obj DependencyObject value string"
  },
  "api/MBFWpfToolkit.AttachedProperties.MicroBimThemeBehavior.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.MicroBimThemeBehavior.html",
    "title": "Class MicroBimThemeBehavior | MIcroBIM Docs",
    "summary": "Class MicroBimThemeBehavior Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll public static class MicroBimThemeBehavior Inheritance object MicroBimThemeBehavior Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields AnimateThemeOnLoadProperty public static readonly DependencyProperty AnimateThemeOnLoadProperty Field Value DependencyProperty Methods GetAnimateThemeOnLoad(DependencyObject) public static bool GetAnimateThemeOnLoad(DependencyObject element) Parameters element DependencyObject Returns bool SetAnimateThemeOnLoad(DependencyObject, bool) public static void SetAnimateThemeOnLoad(DependencyObject element, bool value) Parameters element DependencyObject value bool"
  },
  "api/MBFWpfToolkit.AttachedProperties.ThemeBehavior.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.ThemeBehavior.html",
    "title": "Class ThemeBehavior | MIcroBIM Docs",
    "summary": "Class ThemeBehavior Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll Provides attached properties and behaviors for managing themes in a WPF application. public static class ThemeBehavior Inheritance object ThemeBehavior Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields ApplyThemeOnLoadProperty Represents an attached dependency property that ensures a theme is automatically applied to a FrameworkElement when it is loaded in the WPF visual tree. public static readonly DependencyProperty ApplyThemeOnLoadProperty Field Value DependencyProperty Remarks When this property is set to true on a FrameworkElement, it subscribes to the element's Loaded event. Once the element is loaded, it applies the appropriate theme ('Dark' or 'Light') based on the associated MbWindow instance's theme state. The theme is applied only if the element contains resources associated with the MicroBIM theme and if the current theme differs from the desired one. Methods GetApplyThemeOnLoad(DependencyObject) Gets the value indicating whether the theme should be applied when the associated element is loaded. public static bool GetApplyThemeOnLoad(DependencyObject element) Parameters element DependencyObject The DependencyObject to retrieve the attached property value from. Returns bool True if the theme should be applied on load; otherwise, false. SetApplyThemeOnLoad(DependencyObject, bool) public static void SetApplyThemeOnLoad(DependencyObject element, bool value) Parameters element DependencyObject The dependency object (typically a framework element) on which to set the ApplyThemeOnLoad property. value bool A boolean value indicating whether the theme will be applied when the element loads."
  },
  "api/MBFWpfToolkit.AttachedProperties.ThemeUtils.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.ThemeUtils.html",
    "title": "Class ThemeUtils | MIcroBIM Docs",
    "summary": "Class ThemeUtils Namespace MBFWpfToolkit.AttachedProperties Assembly MBFWpfToolkit.dll Provides utility methods for handling theme-related operations on WPF FrameworkElement instances. public static class ThemeUtils Inheritance object ThemeUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ApplyThemeForElement(FrameworkElement, string) Applies a specified theme (Dark or Light) to the given FrameworkElement. public static void ApplyThemeForElement(FrameworkElement element, string darkOrLight) Parameters element FrameworkElement The FrameworkElement to which the theme will be applied. darkOrLight string A string specifying the theme to apply. Accepted values are \"Dark\" or \"Light\". GetCurrentThemeForElement(FrameworkElement) public static string? GetCurrentThemeForElement(FrameworkElement element) Parameters element FrameworkElement The FrameworkElement for which the current theme is to be identified. Must be non-null and have resource dictionaries. Returns string A string representing the current theme applied to the element (\"Dark\" or \"Light\"), or null if no compatible theme is found. HasMicroBimTheme(FrameworkElement) public static bool HasMicroBimTheme(FrameworkElement element) Parameters element FrameworkElement The FrameworkElement to inspect for the MicroBIM theme. Returns bool True if the FrameworkElement's resources include the MicroBIM theme; otherwise, false."
  },
  "api/MBFWpfToolkit.AttachedProperties.html": {
    "href": "api/MBFWpfToolkit.AttachedProperties.html",
    "title": "Namespace MBFWpfToolkit.AttachedProperties | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.AttachedProperties Classes ComboBoxSearchBehavior Provides an attached behavior to enable search functionality in a ComboBox, allowing live filtering of items based on user input. HelpAssistant Provides attached properties to define step-based help or onboarding instructions for UI elements. Elements can be dynamically registered and retrieved in a specific order based on their step number. LocalizationHelper Provides localization support for WPF controls using attached properties. When LangKeyProperty is set on a control, the corresponding localized value will be applied automatically. MicroBimThemeBehavior ThemeBehavior Provides attached properties and behaviors for managing themes in a WPF application. ThemeUtils Provides utility methods for handling theme-related operations on WPF FrameworkElement instances."
  },
  "api/MBFWpfToolkit.Constants.MbMessageIcon.html": {
    "href": "api/MBFWpfToolkit.Constants.MbMessageIcon.html",
    "title": "Enum MbMessageIcon | MIcroBIM Docs",
    "summary": "Enum MbMessageIcon Namespace MBFWpfToolkit.Constants Assembly MBFWpfToolkit.dll Defines icons that can be displayed in a custom message box. These icons represent different statuses or types of feedback for the user. public enum MbMessageIcon Fields Error = 16 A white X in a circle with a red background, indicating an error or failure. Information = 64 An exclamation point in a triangle with a yellow background, providing informational feedback. New = 512 A trash bin or cross symbol, indicating the creation of a new item. None = 0 No icon is displayed. Question = 48 A question mark in a circle, prompting the user for confirmation or input. Remove = 1024 A trash bin or cross symbol, indicating the removal or deletion of an item. Sound = 32 A bold white X in a circle with a darker red background, indicating a critical error. Success = 256 A lowercase letter 'i' in a circle with a green background, indicating success or completion. Warning = 128 An exclamation point in a triangle with an orange background, warning about a potential issue."
  },
  "api/MBFWpfToolkit.Constants.SkinType.html": {
    "href": "api/MBFWpfToolkit.Constants.SkinType.html",
    "title": "Enum SkinType | MIcroBIM Docs",
    "summary": "Enum SkinType Namespace MBFWpfToolkit.Constants Assembly MBFWpfToolkit.dll Defines available theme skins for the application UI. public enum SkinType Fields Dark = 1 A dark theme with a darker background and lighter foreground elements. Default = 0 The default (light or system-defined) application theme. Violet = 2 A violet-colored theme for a more vibrant visual experience."
  },
  "api/MBFWpfToolkit.Constants.html": {
    "href": "api/MBFWpfToolkit.Constants.html",
    "title": "Namespace MBFWpfToolkit.Constants | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Constants Enums MbMessageIcon Defines icons that can be displayed in a custom message box. These icons represent different statuses or types of feedback for the user. SkinType Defines available theme skins for the application UI."
  },
  "api/MBFWpfToolkit.Controls.Help.HelpWizard.html": {
    "href": "api/MBFWpfToolkit.Controls.Help.HelpWizard.html",
    "title": "Class HelpWizard | MIcroBIM Docs",
    "summary": "Class HelpWizard Namespace MBFWpfToolkit.Controls.Help Assembly MBFWpfToolkit.dll Represents an interactive in-app help wizard that guides users through UI elements step-by-step. public class HelpWizard : MbWindow, INotifyPropertyChanged, IComponentConnector Inheritance object MbWindow HelpWizard Implements INotifyPropertyChanged IComponentConnector Inherited Members MbWindow.IsThemeToggleVisibleProperty MbWindow.ShowLanguagesComboBoxProperty MbWindow.PluginNameProperty MbWindow.PluginDescriptionProperty MbWindow.PluginVersionProperty MbWindow.PrimaryBrushProperty MbWindow.ShowLogoProperty MbWindow.ShowPluginNameProperty MbWindow.ShowPluginVersionProperty MbWindow.GetAllChildrenOfType<T>(DependencyObject) MbWindow.ApplyThemeForElement(FrameworkElement, string) MbWindow.InitializeWindow() MbWindow.ShowSprite() MbWindow.GetPrimaryBrush() MbWindow.OnPropertyChanged(string) MbWindow.SetField<T>(ref T, T, string) MbWindow.IsDark MbWindow.SelectedLanguage MbWindow.SupportedLanguages MbWindow.this[string] MbWindow.IsThemeToggleVisible MbWindow.ShowLanguagesComboBox MbWindow.PluginName MbWindow.PluginDescription MbWindow.PluginVersion MbWindow.PrimaryBrush MbWindow.ShowLogo MbWindow.ShowPluginName MbWindow.ShowPluginVersion MbWindow.MainResources MbWindow.PropertyChanged Constructors HelpWizard(MbWindow) Initializes a new instance of the HelpWizard class. public HelpWizard(MbWindow mainWindow) Parameters mainWindow MbWindow The main application window hosting the UI elements to be highlighted in the help wizard. Properties CurrentStep Gets or sets the index of the currently active help step. public int CurrentStep { get; set; } Property Value int Steps Gets or sets the list of all help steps. public List<HelpStep> Steps { get; set; } Property Value List<HelpStep> Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MBFWpfToolkit.Controls.Help.html": {
    "href": "api/MBFWpfToolkit.Controls.Help.html",
    "title": "Namespace MBFWpfToolkit.Controls.Help | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Controls.Help Classes HelpWizard Represents an interactive in-app help wizard that guides users through UI elements step-by-step."
  },
  "api/MBFWpfToolkit.Controls.MbMessageBox.html": {
    "href": "api/MBFWpfToolkit.Controls.MbMessageBox.html",
    "title": "Class MbMessageBox | MIcroBIM Docs",
    "summary": "Class MbMessageBox Namespace MBFWpfToolkit.Controls Assembly MBFWpfToolkit.dll A custom message box window that supports MicroBIM.UI theming, icon display, and multiple button configurations. public class MbMessageBox : MbWindow, INotifyPropertyChanged Inheritance object MbWindow MbMessageBox Implements INotifyPropertyChanged Inherited Members MbWindow.IsThemeToggleVisibleProperty MbWindow.ShowLanguagesComboBoxProperty MbWindow.PluginNameProperty MbWindow.PluginDescriptionProperty MbWindow.PluginVersionProperty MbWindow.PrimaryBrushProperty MbWindow.ShowLogoProperty MbWindow.ShowPluginNameProperty MbWindow.ShowPluginVersionProperty MbWindow.GetAllChildrenOfType<T>(DependencyObject) MbWindow.ApplyThemeForElement(FrameworkElement, string) MbWindow.InitializeWindow() MbWindow.ShowSprite() MbWindow.GetPrimaryBrush() MbWindow.OnPropertyChanged(string) MbWindow.SetField<T>(ref T, T, string) MbWindow.IsDark MbWindow.SelectedLanguage MbWindow.SupportedLanguages MbWindow.this[string] MbWindow.IsThemeToggleVisible MbWindow.ShowLanguagesComboBox MbWindow.PluginName MbWindow.PluginDescription MbWindow.PluginVersion MbWindow.PrimaryBrush MbWindow.ShowLogo MbWindow.ShowPluginName MbWindow.ShowPluginVersion MbWindow.MainResources MbWindow.PropertyChanged Methods Show(string, MessageBoxButton, MbMessageIcon) Displays the message box with the specified message and button configuration. public static MessageBoxResult Show(string message, MessageBoxButton button = MessageBoxButton.OK, MbMessageIcon icon = MbMessageIcon.None) Parameters message string The message to display. button MessageBoxButton The button configuration. icon MbMessageIcon The icon to display. Returns MessageBoxResult The result of the button clicked."
  },
  "api/MBFWpfToolkit.Controls.MicroBimSprite.html": {
    "href": "api/MBFWpfToolkit.Controls.MicroBimSprite.html",
    "title": "Class MicroBimSprite | MIcroBIM Docs",
    "summary": "Class MicroBimSprite Namespace MBFWpfToolkit.Controls Assembly MBFWpfToolkit.dll Represents the MicroBIM Sprite window used for displaying custom interactive UI elements. public class MicroBimSprite : Window, IComponentConnector Inheritance object MicroBimSprite Implements IComponentConnector Remarks This window is styled using MicroBIM.UI and can be used to provide compact, reusable, or themed dialogs/popups. Constructors MicroBimSprite() Initializes a new instance of the MicroBimSprite window. Loads the associated XAML and prepares the window for display. public MicroBimSprite() Methods InitializeComponent() InitializeComponent public void InitializeComponent()"
  },
  "api/MBFWpfToolkit.Controls.html": {
    "href": "api/MBFWpfToolkit.Controls.html",
    "title": "Namespace MBFWpfToolkit.Controls | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Controls Classes MbMessageBox A custom message box window that supports MicroBIM.UI theming, icon display, and multiple button configurations. MicroBimSprite Represents the MicroBIM Sprite window used for displaying custom interactive UI elements."
  },
  "api/MBFWpfToolkit.Converters.Boolean2StringConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.Boolean2StringConverter.html",
    "title": "Class Boolean2StringConverter | MIcroBIM Docs",
    "summary": "Class Boolean2StringConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll Converts a bool value to a string based on a semicolon-delimited parameter string. public class Boolean2StringConverter : IValueConverter Inheritance object Boolean2StringConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Used to convert a boolean to two possible string values (e.g., \"Off;On\") for UI display. Constructors Boolean2StringConverter() public Boolean2StringConverter() Methods Convert(object, Type, object, CultureInfo) Converts a boolean value to a string. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The boolean value to convert. targetType Type The target type (should be string). parameter object A semicolon-separated string representing the two output values (e.g., \"FalseValue;TrueValue\"). culture CultureInfo The current culture (not used). Returns object Returns the second string (after semicolon) if value is true, or the first string if false. Returns an empty string if input is invalid. ConvertBack(object, Type, object, CultureInfo) Not implemented. Conversion back is not supported. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object DoNothing"
  },
  "api/MBFWpfToolkit.Converters.BooleanErrorGroupToEnabledConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.BooleanErrorGroupToEnabledConverter.html",
    "title": "Class BooleanErrorGroupToEnabledConverter | MIcroBIM Docs",
    "summary": "Class BooleanErrorGroupToEnabledConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll A multi-value converter that checks a list of boolean values (typically HasError flags). If any value is true, it returns false to disable a control (e.g., a button). public class BooleanErrorGroupToEnabledConverter : IMultiValueConverter Inheritance object BooleanErrorGroupToEnabledConverter Implements IMultiValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors BooleanErrorGroupToEnabledConverter() public BooleanErrorGroupToEnabledConverter() Methods Convert(object[], Type, object, CultureInfo) Converts a group of boolean values to determine if a control should be enabled. If any value is true, the result is false. public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) Parameters values object[] An array of boolean values indicating error states. targetType Type The target type of the binding (usually bool). parameter object Optional parameter (not used). culture CultureInfo The culture info (not used). Returns object false if any value is true; otherwise true. ConvertBack(object, Type[], object, CultureInfo) ConvertBack is not implemented. Returns DoNothing. public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) Parameters value object targetTypes Type[] parameter object culture CultureInfo Returns object[]"
  },
  "api/MBFWpfToolkit.Converters.BooleanToVisibilityWithInverseConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.BooleanToVisibilityWithInverseConverter.html",
    "title": "Class BooleanToVisibilityWithInverseConverter | MIcroBIM Docs",
    "summary": "Class BooleanToVisibilityWithInverseConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll Converts a bool value to a Visibility value. Supports optional inversion using a converter parameter. public class BooleanToVisibilityWithInverseConverter : IValueConverter Inheritance object BooleanToVisibilityWithInverseConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks If the parameter is set to \"Inverse\" (case-insensitive), the visibility result will be inverted. Useful for showing or hiding UI elements based on boolean flags with optional inversion. Constructors BooleanToVisibilityWithInverseConverter() public BooleanToVisibilityWithInverseConverter() Methods Convert(object, Type, object, CultureInfo) Converts a bool to Visibility. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The boolean value to convert. targetType Type The target type (expected to be Visibility). parameter object Optional parameter. If set to \"Inverse\", the result will be inverted. culture CultureInfo Culture info (not used). Returns object Returns Visible if value is true, or Collapsed if false. If \"Inverse\" is passed as a parameter, the logic is flipped. ConvertBack(object, Type, object, CultureInfo) Converts a Visibility value back to bool. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The visibility value to convert. targetType Type The target type (expected to be bool). parameter object Optional parameter (not used in ConvertBack). culture CultureInfo Culture info (not used). Returns object Returns true if value is Visible, otherwise false."
  },
  "api/MBFWpfToolkit.Converters.EnumDisplayNameConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.EnumDisplayNameConverter.html",
    "title": "Class EnumDisplayNameConverter | MIcroBIM Docs",
    "summary": "Class EnumDisplayNameConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll A value converter for converting between enum values and their display names specified by the DisplayAttribute. public class EnumDisplayNameConverter : IValueConverter Inheritance object EnumDisplayNameConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors EnumDisplayNameConverter() public EnumDisplayNameConverter() Methods Convert(object, Type, object, CultureInfo) Converts an Enum value to its display name specified in the DisplayAttribute. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The enum value to be converted. targetType Type The target type of the binding (not used). parameter object An optional parameter for the converter (not used). culture CultureInfo The culture to be used in the converter (not used). Returns object The display name of the enum value, or its string representation if no DisplayAttribute is found. ConvertBack(object, Type, object, CultureInfo) Converts a display name back to the corresponding Enum value. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The display name to be converted back to the enum value. targetType Type The target enum type. parameter object An optional parameter for the converter (not used). culture CultureInfo The culture to be used in the converter (not used). Returns object The corresponding enum value that matches the display name or field name. Exceptions ArgumentException Thrown if no matching enum value is found for the display name."
  },
  "api/MBFWpfToolkit.Converters.NullToBooleanConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.NullToBooleanConverter.html",
    "title": "Class NullToBooleanConverter | MIcroBIM Docs",
    "summary": "Class NullToBooleanConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll Converts a value to Visibility based on whether it is null. public class NullToBooleanConverter : IValueConverter Inheritance object NullToBooleanConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks If the parameter is \"Inverse\" (case-insensitive), visibility is inverted. Constructors NullToBooleanConverter() public NullToBooleanConverter() Methods Convert(object?, Type, object, CultureInfo) public object Convert(object? value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object ConvertBack(object, Type, object, CultureInfo) public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object"
  },
  "api/MBFWpfToolkit.Converters.NullToVisibilityConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.NullToVisibilityConverter.html",
    "title": "Class NullToVisibilityConverter | MIcroBIM Docs",
    "summary": "Class NullToVisibilityConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll Converts a value to Visibility based on whether it is null. public class NullToVisibilityConverter : IValueConverter Inheritance object NullToVisibilityConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks If the parameter is \"Inverse\" (case-insensitive), visibility is inverted. Constructors NullToVisibilityConverter() public NullToVisibilityConverter() Methods Convert(object, Type, object, CultureInfo) public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object ConvertBack(object, Type, object, CultureInfo) public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object"
  },
  "api/MBFWpfToolkit.Converters.NullToVisibilityWithInverseConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.NullToVisibilityWithInverseConverter.html",
    "title": "Class NullToVisibilityWithInverseConverter | MIcroBIM Docs",
    "summary": "Class NullToVisibilityWithInverseConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll Converts a null value to a Visibility value. Supports optional inversion using a converter parameter. public class NullToVisibilityWithInverseConverter : IValueConverter Inheritance object NullToVisibilityWithInverseConverter Implements IValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks If the parameter is set to \"Inverse\" (case-insensitive), the visibility result will be inverted. Useful for showing/hiding UI elements based on null presence. Constructors NullToVisibilityWithInverseConverter() public NullToVisibilityWithInverseConverter() Methods Convert(object, Type, object, CultureInfo) Converts a null value to Collapsed or Visible. public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object The value to check for null. targetType Type The target type (expected to be Visibility). parameter object Optional parameter. If set to \"Inverse\", the result is inverted. culture CultureInfo Culture info (not used). Returns object Visible if the value is not null; otherwise Collapsed. If \"Inverse\" is passed, the result is flipped. ConvertBack(object, Type, object, CultureInfo) Not supported: converts back from Visibility to object. public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters value object targetType Type parameter object culture CultureInfo Returns object"
  },
  "api/MBFWpfToolkit.Converters.ValidationMultiConverter.html": {
    "href": "api/MBFWpfToolkit.Converters.ValidationMultiConverter.html",
    "title": "Class ValidationMultiConverter | MIcroBIM Docs",
    "summary": "Class ValidationMultiConverter Namespace MBFWpfToolkit.Converters Assembly MBFWpfToolkit.dll A multi-value converter that validates a group of input values (typically bound from multiple TextBox elements). It checks for empty input and validation errors to determine whether a button (or any control) should be enabled. public class ValidationMultiConverter : IMultiValueConverter Inheritance object ValidationMultiConverter Implements IMultiValueConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This converter expects alternating values: [Text, HasError, Text, HasError, ...]. If any Text is null/empty or any HasError is true, the result is false. Constructors ValidationMultiConverter() public ValidationMultiConverter() Methods Convert(object[], Type, object, CultureInfo) Validates a group of values to determine if a control (e.g., a button) should be enabled. public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) Parameters values object[] An array of values from multiple bindings. Alternating pattern: Text, HasError, Text, HasError... targetType Type The target type of the binding (usually bool). parameter object Optional parameter (not used). culture CultureInfo The culture info (not used). Returns object Returns true if all inputs are non-empty and have no validation errors; otherwise false. ConvertBack(object, Type[], object, CultureInfo) ConvertBack is not implemented. Returns DoNothing. public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) Parameters value object targetTypes Type[] parameter object culture CultureInfo Returns object[] An array of DoNothing."
  },
  "api/MBFWpfToolkit.Converters.html": {
    "href": "api/MBFWpfToolkit.Converters.html",
    "title": "Namespace MBFWpfToolkit.Converters | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Converters Classes Boolean2StringConverter Converts a bool value to a string based on a semicolon-delimited parameter string. BooleanErrorGroupToEnabledConverter A multi-value converter that checks a list of boolean values (typically HasError flags). If any value is true, it returns false to disable a control (e.g., a button). BooleanToVisibilityWithInverseConverter Converts a bool value to a Visibility value. Supports optional inversion using a converter parameter. EnumDisplayNameConverter A value converter for converting between enum values and their display names specified by the DisplayAttribute. NullToBooleanConverter Converts a value to Visibility based on whether it is null. NullToVisibilityConverter Converts a value to Visibility based on whether it is null. NullToVisibilityWithInverseConverter Converts a null value to a Visibility value. Supports optional inversion using a converter parameter. ValidationMultiConverter A multi-value converter that validates a group of input values (typically bound from multiple TextBox elements). It checks for empty input and validation errors to determine whether a button (or any control) should be enabled."
  },
  "api/MBFWpfToolkit.Extensions.CollectionExtensions.html": {
    "href": "api/MBFWpfToolkit.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | MIcroBIM Docs",
    "summary": "Class CollectionExtensions Namespace MBFWpfToolkit.Extensions Assembly MBFWpfToolkit.dll Provides extension methods for working with collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GroupByWithTolerance<T>(IEnumerable<T>, Func<T, double>, double) Groups elements of a sequence based on a numeric key and a specified tolerance. public static IEnumerable<IGrouping<double, T>> GroupByWithTolerance<T>(this IEnumerable<T> source, Func<T, double> keySelector, double tolerance) Parameters source IEnumerable<T> The sequence of elements to group. Cannot be null. keySelector Func<T, double> A function to extract the numeric key from each element. Cannot be null. tolerance double The maximum allowable difference between keys for elements to be grouped together. Must be a non-negative value. Returns IEnumerable<IGrouping<double, T>> A sequence of groupings, where each grouping contains elements whose keys differ by no more than the specified tolerance. Type Parameters T The type of the elements in the source sequence. Remarks This method first sorts the elements by their numeric keys and then groups them based on the specified tolerance. The keys are rounded to three decimal places for comparison. ToObservableCollection<T>(IEnumerable<T>) Converts an enumerable collection to an ObservableCollection. public static ObservableCollection<T> ToObservableCollection<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source enumerable collection to convert. Returns ObservableCollection<T> An ObservableCollection containing the elements from the source. Type Parameters T The type of elements in the collection."
  },
  "api/MBFWpfToolkit.Extensions.ListExtensions.html": {
    "href": "api/MBFWpfToolkit.Extensions.ListExtensions.html",
    "title": "Class ListExtensions | MIcroBIM Docs",
    "summary": "Class ListExtensions Namespace MBFWpfToolkit.Extensions Assembly MBFWpfToolkit.dll Provides extension methods for List<T> to support additional operations. public static class ListExtensions Inheritance object ListExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Move<T>(List<T>, int, int) Moves an item within a List<T> from one index to another. public static void Move<T>(this List<T> list, int oldIndex, int newIndex) Parameters list List<T> The list in which the item will be moved. oldIndex int The current index of the item. newIndex int The target index to move the item to. Type Parameters T The type of elements in the list. Remarks If oldIndex and newIndex are equal, or if either index is out of range, the method does nothing."
  },
  "api/MBFWpfToolkit.Extensions.ToleranceGroup-2.html": {
    "href": "api/MBFWpfToolkit.Extensions.ToleranceGroup-2.html",
    "title": "Class ToleranceGroup<TKey, TElement> | MIcroBIM Docs",
    "summary": "Class ToleranceGroup<TKey, TElement> Namespace MBFWpfToolkit.Extensions Assembly MBFWpfToolkit.dll Represents a collection of elements that share a common key, with additional functionality for grouping and list operations. public class ToleranceGroup<TKey, TElement> : List<TElement>, IList<TElement>, ICollection<TElement>, IList, ICollection, IReadOnlyList<TElement>, IReadOnlyCollection<TElement>, IGrouping<TKey, TElement>, IEnumerable<TElement>, IEnumerable Type Parameters TKey The type of the key associated with the group. TElement The type of the elements in the group. Inheritance object List<TElement> ToleranceGroup<TKey, TElement> Implements IList<TElement> ICollection<TElement> IList ICollection IReadOnlyList<TElement> IReadOnlyCollection<TElement> IGrouping<TKey, TElement> IEnumerable<TElement> IEnumerable Inherited Members List<TElement>.Add(TElement) List<TElement>.AddRange(IEnumerable<TElement>) List<TElement>.AsReadOnly() List<TElement>.BinarySearch(int, int, TElement, IComparer<TElement>) List<TElement>.BinarySearch(TElement) List<TElement>.BinarySearch(TElement, IComparer<TElement>) List<TElement>.Clear() List<TElement>.Contains(TElement) List<TElement>.ConvertAll<TOutput>(Converter<TElement, TOutput>) List<TElement>.CopyTo(TElement[]) List<TElement>.CopyTo(int, TElement[], int, int) List<TElement>.CopyTo(TElement[], int) List<TElement>.Exists(Predicate<TElement>) List<TElement>.Find(Predicate<TElement>) List<TElement>.FindAll(Predicate<TElement>) List<TElement>.FindIndex(Predicate<TElement>) List<TElement>.FindIndex(int, Predicate<TElement>) List<TElement>.FindIndex(int, int, Predicate<TElement>) List<TElement>.FindLast(Predicate<TElement>) List<TElement>.FindLastIndex(Predicate<TElement>) List<TElement>.FindLastIndex(int, Predicate<TElement>) List<TElement>.FindLastIndex(int, int, Predicate<TElement>) List<TElement>.ForEach(Action<TElement>) List<TElement>.GetEnumerator() List<TElement>.GetRange(int, int) List<TElement>.IndexOf(TElement) List<TElement>.IndexOf(TElement, int) List<TElement>.IndexOf(TElement, int, int) List<TElement>.Insert(int, TElement) List<TElement>.InsertRange(int, IEnumerable<TElement>) List<TElement>.LastIndexOf(TElement) List<TElement>.LastIndexOf(TElement, int) List<TElement>.LastIndexOf(TElement, int, int) List<TElement>.Remove(TElement) List<TElement>.RemoveAll(Predicate<TElement>) List<TElement>.RemoveAt(int) List<TElement>.RemoveRange(int, int) List<TElement>.Reverse() List<TElement>.Reverse(int, int) List<TElement>.Sort() List<TElement>.Sort(IComparer<TElement>) List<TElement>.Sort(int, int, IComparer<TElement>) List<TElement>.Sort(Comparison<TElement>) List<TElement>.ToArray() List<TElement>.TrimExcess() List<TElement>.TrueForAll(Predicate<TElement>) List<TElement>.Capacity List<TElement>.Count List<TElement>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods CollectionExtensions.GroupByWithTolerance<T>(IEnumerable<T>, Func<T, double>, double) CollectionExtensions.ToObservableCollection<T>(IEnumerable<T>) ListExtensions.Move<T>(List<T>, int, int) Remarks This class combines the functionality of IGrouping<TKey, TElement> and List<T>, allowing grouped elements to be accessed and manipulated as a list. Constructors ToleranceGroup(TKey) Represents a group of items that share a common key and are grouped based on a specified tolerance. public ToleranceGroup(TKey key) Parameters key TKey The key that identifies the group. Cannot be null. Remarks This class is typically used in scenarios where items need to be grouped by a key with a tolerance-based condition. Properties Key Gets the key associated with the current object. public TKey Key { get; } Property Value TKey"
  },
  "api/MBFWpfToolkit.Extensions.html": {
    "href": "api/MBFWpfToolkit.Extensions.html",
    "title": "Namespace MBFWpfToolkit.Extensions | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Extensions Classes CollectionExtensions Provides extension methods for working with collections. ListExtensions Provides extension methods for List<T> to support additional operations. ToleranceGroup<TKey, TElement> Represents a collection of elements that share a common key, with additional functionality for grouping and list operations."
  },
  "api/MBFWpfToolkit.Helpers.MbNotification.html": {
    "href": "api/MBFWpfToolkit.Helpers.MbNotification.html",
    "title": "Class MbNotification | MIcroBIM Docs",
    "summary": "Class MbNotification Namespace MBFWpfToolkit.Helpers Assembly MBFWpfToolkit.dll Provides utility methods to display styled notifications using MicroBIM.UI's MicroBIM.UI.Controls.Growl system. public static class MbNotification Inheritance object MbNotification Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Host public static MbWindow Host { get; set; } Property Value MbWindow Methods ShowError(string, int) Displays an error notification with a red cross icon. public static void ShowError(string message, int waitTime = 2) Parameters message string The message to be shown in the notification. waitTime int The duration (in seconds) the notification remains visible. Default is 2 seconds. ShowInfo(string, int) Displays an informational notification with a blue info icon. public static void ShowInfo(string message, int waitTime = 2) Parameters message string The message to be shown in the notification. waitTime int The duration (in seconds) the notification remains visible. Default is 2 seconds. ShowSuccess(string, int) Displays a success notification with a green check icon. public static void ShowSuccess(string message, int waitTime = 2) Parameters message string The message to be shown in the notification. waitTime int The duration (in seconds) the notification remains visible. Default is 2 seconds. ShowWarning(string, int) Displays a warning notification with a specified message and optional wait time. public static void ShowWarning(string message, int waitTime = 2) Parameters message string The warning message to display. waitTime int The time in seconds to display the notification before it disappears. Defaults to 2 seconds if not specified."
  },
  "api/MBFWpfToolkit.Helpers.MbResourceHelper.html": {
    "href": "api/MBFWpfToolkit.Helpers.MbResourceHelper.html",
    "title": "Class MbResourceHelper | MIcroBIM Docs",
    "summary": "Class MbResourceHelper Namespace MBFWpfToolkit.Helpers Assembly MBFWpfToolkit.dll Provides helper methods for retrieving theme and skin resources in a WPF application. public class MbResourceHelper Inheritance object MbResourceHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MbResourceHelper() public MbResourceHelper() Methods GetResource<T>(string) Retrieves a resource from the application’s merged resource dictionaries by key. public static T GetResource<T>(string key) Parameters key string The key of the resource to retrieve. Returns T The resource cast to type T if found; otherwise, the default value of T. Type Parameters T The expected type of the resource. GetSkin(SkinType) Loads a built-in MicroBIM.UI skin resource dictionary by skin type. public static ResourceDictionary GetSkin(SkinType skin) Parameters skin SkinType The SkinType indicating which skin to load. Returns ResourceDictionary The loaded ResourceDictionary. GetSkin(Assembly, string, SkinType) Loads a skin resource dictionary from a specified assembly and path. public static ResourceDictionary GetSkin(Assembly assembly, string themePath, SkinType skin) Parameters assembly Assembly The assembly containing the skin resources. themePath string The path to the skin directory inside the assembly. skin SkinType The SkinType indicating which skin to load. Returns ResourceDictionary The loaded ResourceDictionary for the specified skin. GetStandaloneTheme() Loads the standalone MicroBIM.UI theme resource dictionary. public static ResourceDictionary GetStandaloneTheme() Returns ResourceDictionary The loaded ResourceDictionary. GetTheme() Retrieves the current theme resource dictionary. If not already loaded, it loads the standalone MicroBIM.UI theme. public static ResourceDictionary GetTheme() Returns ResourceDictionary The ResourceDictionary representing the current theme."
  },
  "api/MBFWpfToolkit.Helpers.PasswordHelper.html": {
    "href": "api/MBFWpfToolkit.Helpers.PasswordHelper.html",
    "title": "Class PasswordHelper | MIcroBIM Docs",
    "summary": "Class PasswordHelper Namespace MBFWpfToolkit.Helpers Assembly MBFWpfToolkit.dll Provides attached properties and helper methods to enable binding for the Password property of PasswordBox controls. public static class PasswordHelper Inheritance object PasswordHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields AttachProperty Attached property to enable or disable binding functionality for PasswordBox. public static readonly DependencyProperty AttachProperty Field Value DependencyProperty PasswordProperty Attached property to bind the password value. public static readonly DependencyProperty PasswordProperty Field Value DependencyProperty Methods GetAttach(DependencyObject) Gets the value of the Attach property. public static bool GetAttach(DependencyObject dp) Parameters dp DependencyObject Returns bool GetPassword(DependencyObject) Gets the bound password string from the attached property. public static string GetPassword(DependencyObject dp) Parameters dp DependencyObject Returns string SetAttach(DependencyObject, bool) Sets the Attach property to enable password binding on the given object. public static void SetAttach(DependencyObject dp, bool value) Parameters dp DependencyObject value bool SetPassword(DependencyObject, string) Sets the bound password string on the attached property. public static void SetPassword(DependencyObject dp, string value) Parameters dp DependencyObject value string"
  },
  "api/MBFWpfToolkit.Helpers.WindowController.html": {
    "href": "api/MBFWpfToolkit.Helpers.WindowController.html",
    "title": "Class WindowController | MIcroBIM Docs",
    "summary": "Class WindowController Namespace MBFWpfToolkit.Helpers Assembly MBFWpfToolkit.dll Manages the lifecycle of modeless WPF windows to prevent duplicates, maintain a global reference list, and enable programmatic control. public static class WindowController Inheritance object WindowController Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close<T>() Closes all windows of type T and removes them from the tracking list. public static void Close<T>() where T : Window Type Parameters T The type of the window to close. Focus<T>() Attempts to focus an existing window of type T. If minimized or hidden, restores and shows it. public static bool Focus<T>() where T : Window Returns bool True if an existing window was found and focused; otherwise false. Type Parameters T The type of the window to focus. Hide<T>() Hides all windows of type T. public static void Hide<T>() where T : Window Type Parameters T The type of the window to hide. Show(Window) Shows a modeless window and registers it in the controller. public static void Show(Window window) Parameters window Window The window to show. Show(Window, IntPtr) Shows a modeless window with a native owner handle. public static void Show(Window window, IntPtr handle) Parameters window Window The window to show. handle IntPtr The native owner window handle (HWND). ShowDialog(Window) Shows a modal dialog window and registers it in the controller. public static bool? ShowDialog(Window window) Parameters window Window The dialog window to show. Returns bool? True if the user accepted the dialog (DialogResult == true); otherwise, false. ShowDialog(Window, IntPtr) Displays the specified MicroBIM.UI.Controls.Window as a modal dialog and returns the result. public static bool? ShowDialog(Window window, IntPtr handle) Parameters window Window The MicroBIM.UI.Controls.Window to display as a modal dialog. Cannot be null. handle IntPtr A handle to the owner window. This establishes the ownership relationship between the dialog and the parent window. Returns bool? A nullable bool indicating the dialog result: true if the user accepted the dialog, false if the user canceled it, or null if no result was specified. Remarks This method sets the owner of the specified MicroBIM.UI.Controls.Window using the provided handle before displaying it. Ensure that the handle corresponds to a valid window handle to avoid unexpected behavior. Show<T>() Shows an already existing window of type T if found. public static void Show<T>() where T : Window Type Parameters T The type of the window to show."
  },
  "api/MBFWpfToolkit.Helpers.html": {
    "href": "api/MBFWpfToolkit.Helpers.html",
    "title": "Namespace MBFWpfToolkit.Helpers | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Helpers Classes MbNotification Provides utility methods to display styled notifications using MicroBIM.UI's MicroBIM.UI.Controls.Growl system. MbResourceHelper Provides helper methods for retrieving theme and skin resources in a WPF application. PasswordHelper Provides attached properties and helper methods to enable binding for the Password property of PasswordBox controls. WindowController Manages the lifecycle of modeless WPF windows to prevent duplicates, maintain a global reference list, and enable programmatic control."
  },
  "api/MBFWpfToolkit.MbViewModel.MbBaseViewModel.html": {
    "href": "api/MBFWpfToolkit.MbViewModel.MbBaseViewModel.html",
    "title": "Class MbBaseViewModel | MIcroBIM Docs",
    "summary": "Class MbBaseViewModel Namespace MBFWpfToolkit.MbViewModel Assembly MBFWpfToolkit.dll Represents the base ViewModel class inheriting from ObservableValidator. Provides a common set of functionalities for ViewModels, including validation capabilities. public class MbBaseViewModel : ObservableValidator Inheritance object MbBaseViewModel Constructors MbBaseViewModel() public MbBaseViewModel() Properties MbWindow Represents a property of type MbWindow used within the ViewModel. public MbWindow? MbWindow { get; set; } Property Value MbWindow A reference to an instance of MbWindow. This property can be used to set or retrieve details of the associated MbWindow, enabling interaction with its properties, such as theme toggling, supported languages, plugin information, and more. Remarks This property is primarily used to reference an instance of the MbWindow class, which provides properties and functionality for managing window-level settings such as themes, language settings, and display options for plugins."
  },
  "api/MBFWpfToolkit.MbViewModel.html": {
    "href": "api/MBFWpfToolkit.MbViewModel.html",
    "title": "Namespace MBFWpfToolkit.MbViewModel | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.MbViewModel Classes MbBaseViewModel Represents the base ViewModel class inheriting from ObservableValidator. Provides a common set of functionalities for ViewModels, including validation capabilities."
  },
  "api/MBFWpfToolkit.MbWindow.html": {
    "href": "api/MBFWpfToolkit.MbWindow.html",
    "title": "Class MbWindow | MIcroBIM Docs",
    "summary": "Class MbWindow Namespace MBFWpfToolkit Assembly MBFWpfToolkit.dll Represents a customizable WPF window with extended properties and features, including theming, language selection, and plugin-related configurations. public class MbWindow : Window, INotifyPropertyChanged Inheritance object MbWindow Implements INotifyPropertyChanged Derived HelpWizard MbMessageBox Constructors MbWindow() Initializes a new instance of the MbWindow class. public MbWindow() Remarks This constructor sets up event handlers for the Loaded and Closed events. It ensures that main resources are cached and reused across windows. Fields IsThemeToggleVisibleProperty Represents the dependency property that identifies whether the theme toggle is visible. public static readonly DependencyProperty IsThemeToggleVisibleProperty Field Value DependencyProperty PluginDescriptionProperty Identifies the PluginDescription dependency property. public static readonly DependencyProperty PluginDescriptionProperty Field Value DependencyProperty PluginNameProperty Identifies the PluginName dependency property. public static readonly DependencyProperty PluginNameProperty Field Value DependencyProperty PluginVersionProperty Identifies the PluginVersion dependency property. public static readonly DependencyProperty PluginVersionProperty Field Value DependencyProperty PrimaryBrushProperty Identifies the PrimaryBrush dependency property. public static readonly DependencyProperty PrimaryBrushProperty Field Value DependencyProperty ShowLanguagesComboBoxProperty Identifies the ShowLanguagesComboBox dependency property. public static readonly DependencyProperty ShowLanguagesComboBoxProperty Field Value DependencyProperty ShowLogoProperty Identifies the ShowLogo dependency property. public static readonly DependencyProperty ShowLogoProperty Field Value DependencyProperty ShowPluginNameProperty Identifies the ShowPluginName dependency property. public static readonly DependencyProperty ShowPluginNameProperty Field Value DependencyProperty ShowPluginVersionProperty Identifies the ShowPluginVersion dependency property. public static readonly DependencyProperty ShowPluginVersionProperty Field Value DependencyProperty Properties IsDark Gets or sets a value indicating whether the window should use a dark theme or not. public bool IsDark { get; set; } Property Value bool IsThemeToggleVisible Gets or sets a value indicating whether the theme toggle control is visible. public bool IsThemeToggleVisible { get; set; } Property Value bool Remarks By default, the theme toggle control is visible unless explicitly set to false. this[string] Represents the current instance of the class. Use 'this' to refer explicitly to the calling object in methods, constructors, or property accessors. It is useful to resolve naming conflicts between instance members and method or constructor arguments. public string this[string key] { get; } Parameters key string Property Value string MainResources Gets or sets the shared resource dictionary that can be used to cache and reuse resources across multiple instances of MbWindow. public static ResourceDictionary? MainResources { get; set; } Property Value ResourceDictionary PluginDescription Identifies the PluginDescription dependency property. public string PluginDescription { get; set; } Property Value string PluginName Identifies the PluginName dependency property. public string PluginName { get; set; } Property Value string PluginVersion Identifies the PluginVersion dependency property. public string PluginVersion { get; set; } Property Value string PrimaryBrush Identifies the PrimaryBrush dependency property. public Color PrimaryBrush { get; set; } Property Value Color SelectedLanguage Gets or sets the selected language for the window. public CultureInfo SelectedLanguage { get; set; } Property Value CultureInfo ShowLanguagesComboBox Identifies the ShowLanguagesComboBox dependency property. public bool ShowLanguagesComboBox { get; set; } Property Value bool ShowLogo Identifies the ShowLogo dependency property. public bool ShowLogo { get; set; } Property Value bool ShowPluginName Identifies the ShowPluginName dependency property. public bool ShowPluginName { get; set; } Property Value bool ShowPluginVersion Identifies the ShowPluginVersion dependency property. public bool ShowPluginVersion { get; set; } Property Value bool SupportedLanguages Gets the collection of supported languages available for the application. public ObservableCollection<CultureInfo> SupportedLanguages { get; } Property Value ObservableCollection<CultureInfo> Methods ApplyThemeForElement(FrameworkElement, string) Applies a theme to the specified framework element based on the provided theme name. public static void ApplyThemeForElement(FrameworkElement element, string darkOrLight) Parameters element FrameworkElement The framework element to which the theme will be applied. darkOrLight string The name of the theme, typically indicating dark or light mode. GetAllChildrenOfType<T>(DependencyObject) Retrieves all children of a specified type from a given dependency object in the visual tree. public static IEnumerable<T> GetAllChildrenOfType<T>(DependencyObject parent) where T : DependencyObject Parameters parent DependencyObject The parent dependency object to search within. Returns IEnumerable<T> Type Parameters T The type of children to find. GetPrimaryBrush() Gets the primary brush color. protected static Color GetPrimaryBrush() Returns Color The primary brush color. InitializeWindow() Performs static initialization for the MbWindow. Applies the primary brush color, sets window properties, configures non-client UI content, and ensures shared resources are loaded into MainResources. protected void InitializeWindow() OnPropertyChanged(string?) Invoked when a property value changes. protected virtual void OnPropertyChanged(string? propertyName = null) Parameters propertyName string The name of the property that changed. Automatically set by the caller if not supplied. SetField<T>(ref T, T, string?) Updates the specified field with a new value and raises the PropertyChanged event if the value changes. protected bool SetField<T>(ref T field, T value, string? propertyName = null) Parameters field T A reference to the field being updated. value T The new value to assign to the field. propertyName string The name of the property. This parameter is optional and is automatically supplied by the CallerMemberName attribute. Returns bool True if the field value was updated; otherwise, false. Type Parameters T The type of the field and value. ShowSprite() Displays the MicroBimSprite overlay window, which can act as a floating mascot or animation on the screen. Initializes an instance of the MicroBimSprite, stores it internally, and invokes its Show() method to render it. public void ShowSprite() Events PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MBFWpfToolkit.Models.HelpStep.html": {
    "href": "api/MBFWpfToolkit.Models.HelpStep.html",
    "title": "Class HelpStep | MIcroBIM Docs",
    "summary": "Class HelpStep Namespace MBFWpfToolkit.Models Assembly MBFWpfToolkit.dll Represents a help step in the UI help wizard with an associated UI element, descriptive text, and order. public class HelpStep Inheritance object HelpStep Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HelpStep() public HelpStep() Properties Element Gets or sets the UI element associated with this help step. public UIElement Element { get; set; } Property Value UIElement Remarks This UI element is used to anchor tooltips or visual guidance during the help walkthrough. StepNumber Gets or sets the order number of the step in the help sequence. public int StepNumber { get; set; } Property Value int StepText Gets or sets the textual description of the step to be shown to the user. public string StepText { get; set; } Property Value string"
  },
  "api/MBFWpfToolkit.Models.html": {
    "href": "api/MBFWpfToolkit.Models.html",
    "title": "Namespace MBFWpfToolkit.Models | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Models Classes HelpStep Represents a help step in the UI help wizard with an associated UI element, descriptive text, and order."
  },
  "api/MBFWpfToolkit.Properties.Langs.Lang.html": {
    "href": "api/MBFWpfToolkit.Properties.Langs.Lang.html",
    "title": "Class Lang | MIcroBIM Docs",
    "summary": "Class Lang Namespace MBFWpfToolkit.Properties.Langs Assembly MBFWpfToolkit.dll A strongly-typed resource class, for looking up localized strings, etc. public class Lang Inheritance object Lang Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties About Looks up a localized string similar to About. public static string About { get; } Property Value string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. public static CultureInfo Culture { get; set; } Property Value CultureInfo ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager"
  },
  "api/MBFWpfToolkit.Properties.Langs.Lang_en.html": {
    "href": "api/MBFWpfToolkit.Properties.Langs.Lang_en.html",
    "title": "Class Lang_en | MIcroBIM Docs",
    "summary": "Class Lang_en Namespace MBFWpfToolkit.Properties.Langs Assembly MBFWpfToolkit.dll A strongly-typed resource class, for looking up localized strings, etc. public class Lang_en Inheritance object Lang_en Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties About Looks up a localized string similar to About. public static string About { get; } Property Value string And Looks up a localized string similar to and. public static string And { get; } Property Value string BIMAssets Looks up a localized string similar to BIMAssets. public static string BIMAssets { get; } Property Value string BookMode Looks up a localized string similar to Book Mode. public static string BookMode { get; } Property Value string Cancel Looks up a localized string similar to Cancel. public static string Cancel { get; } Property Value string ClosePDF Looks up a localized string similar to Close PDF. public static string ClosePDF { get; } Property Value string Confirm Looks up a localized string similar to Confirm. public static string Confirm { get; } Property Value string ContinuousPagesMode Looks up a localized string similar to Continuous Pages Mode. public static string ContinuousPagesMode { get; } Property Value string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. public static CultureInfo Culture { get; set; } Property Value CultureInfo DPI_ Looks up a localized string similar to DPI:. public static string DPI_ { get; } Property Value string DecimalValue Looks up a localized string similar to Value must be a valid decimal.. public static string DecimalValue { get; } Property Value string Delete Looks up a localized string similar to Delete. public static string Delete { get; } Property Value string DoubleValue Looks up a localized string similar to Value must be a valid double.. public static string DoubleValue { get; } Property Value string Download Looks up a localized string similar to Download. public static string Download { get; } Property Value string DownloadSelected Looks up a localized string similar to DownloadSelected. public static string DownloadSelected { get; } Property Value string Edit Looks up a localized string similar to Edit. public static string Edit { get; } Property Value string FileType Looks up a localized string similar to File Type. public static string FileType { get; } Property Value string FileURL Looks up a localized string similar to File URL. public static string FileURL { get; } Property Value string Findindocument Looks up a localized string similar to Find in document.... public static string Findindocument { get; } Property Value string FitHeight Looks up a localized string similar to Fit Height. public static string FitHeight { get; } Property Value string FitWidth Looks up a localized string similar to Fit Width. public static string FitWidth { get; } Property Value string From Looks up a localized string similar to From. public static string From { get; } Property Value string GetPageText Looks up a localized string similar to Get Page Text. public static string GetPageText { get; } Property Value string HandTool Looks up a localized string similar to Hand Tool. public static string HandTool { get; } Property Value string Installers Looks up a localized string similar to Installers. public static string Installers { get; } Property Value string IntValue Looks up a localized string similar to Value must be a valid integer.. public static string IntValue { get; } Property Value string InvalidFormat Looks up a localized string similar to InvalidFormat!. public static string InvalidFormat { get; } Property Value string Islefttorightdocument Looks up a localized string similar to Is left to right document. public static string Islefttorightdocument { get; } Property Value string Isrighttoleftdocument Looks up a localized string similar to Is right to left document. public static string Isrighttoleftdocument { get; } Property Value string Light_DarkMode Looks up a localized string similar to Light/Dark Mode. public static string Light_DarkMode { get; } Property Value string Miscellaneous Looks up a localized string similar to Miscellaneous. public static string Miscellaneous { get; } Property Value string NextPage Looks up a localized string similar to Next Page. public static string NextPage { get; } Property Value string No Looks up a localized string similar to No. public static string No { get; } Property Value string NumberRange Looks up a localized string similar to Value must be between. public static string NumberRange { get; } Property Value string OpenPdf Looks up a localized string similar to Open Pdf. public static string OpenPdf { get; } Property Value string PdfInformation Looks up a localized string similar to Pdf Information. public static string PdfInformation { get; } Property Value string PreviousPage Looks up a localized string similar to Previous Page. public static string PreviousPage { get; } Property Value string Renderallpages Looks up a localized string similar to Render all pages. public static string Renderallpages { get; } Property Value string Required Looks up a localized string similar to Value cannot be empty.. public static string Required { get; } Property Value string ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager RotateLeft Looks up a localized string similar to Rotate Left. public static string RotateLeft { get; } Property Value string RotateRight Looks up a localized string similar to Rotate Right. public static string RotateRight { get; } Property Value string Save Looks up a localized string similar to Save. public static string Save { get; } Property Value string SaveasImages Looks up a localized string similar to Save as Images. public static string SaveasImages { get; } Property Value string Searchforinstallers Looks up a localized string similar to Search for installers.... public static string Searchforinstallers { get; } Property Value string Searchterm Looks up a localized string similar to Search term. public static string Searchterm { get; } Property Value string SelectLanguage Looks up a localized string similar to Select Language. public static string SelectLanguage { get; } Property Value string ShowBookmarks Looks up a localized string similar to Show Bookmarks. public static string ShowBookmarks { get; } Property Value string SinglePageMode Looks up a localized string similar to Single Page Mode. public static string SinglePageMode { get; } Property Value string SwapToDarkMode Looks up a localized string similar to Swap to dark mode. public static string SwapToDarkMode { get; } Property Value string SwapToLightMode Looks up a localized string similar to Swap to light mode. public static string SwapToLightMode { get; } Property Value string To Looks up a localized string similar to To. public static string To { get; } Property Value string TransparentPage Looks up a localized string similar to Transparent Page. public static string TransparentPage { get; } Property Value string Upload Looks up a localized string similar to Upload. public static string Upload { get; } Property Value string UploadedDate Looks up a localized string similar to Uploaded Date. public static string UploadedDate { get; } Property Value string Url Looks up a localized string similar to URL. public static string Url { get; } Property Value string Version Looks up a localized string similar to Version. public static string Version { get; } Property Value string Yes Looks up a localized string similar to Yes. public static string Yes { get; } Property Value string Zoomin Looks up a localized string similar to Zoom in. public static string Zoomin { get; } Property Value string Zoomout Looks up a localized string similar to Zoom out. public static string Zoomout { get; } Property Value string contact_us Looks up a localized string similar to Contact us. public static string contact_us { get; } Property Value string of Looks up a localized string similar to of. public static string of { get; } Property Value string"
  },
  "api/MBFWpfToolkit.Properties.Langs.html": {
    "href": "api/MBFWpfToolkit.Properties.Langs.html",
    "title": "Namespace MBFWpfToolkit.Properties.Langs | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Properties.Langs Classes Lang_en A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/MBFWpfToolkit.Utils.WindowUtils.html": {
    "href": "api/MBFWpfToolkit.Utils.WindowUtils.html",
    "title": "Class WindowUtils | MIcroBIM Docs",
    "summary": "Class WindowUtils Namespace MBFWpfToolkit.Utils Assembly MBFWpfToolkit.dll Provides utility functions for managing windows and processes in a WPF application. public static class WindowUtils Inheritance object WindowUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods OpenLink(object) Opens a link in the default web browser or associated application. public static void OpenLink(object url) Parameters url object The URL or file path to open. This should be a valid string representation of the resource. Exceptions ArgumentNullException Thrown when the url is null. InvalidOperationException Thrown when the url is not a valid string."
  },
  "api/MBFWpfToolkit.Utils.html": {
    "href": "api/MBFWpfToolkit.Utils.html",
    "title": "Namespace MBFWpfToolkit.Utils | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.Utils Classes WindowUtils Provides utility functions for managing windows and processes in a WPF application."
  },
  "api/MBFWpfToolkit.ValidationRules.DecimalValidationRule.html": {
    "href": "api/MBFWpfToolkit.ValidationRules.DecimalValidationRule.html",
    "title": "Class DecimalValidationRule | MIcroBIM Docs",
    "summary": "Class DecimalValidationRule Namespace MBFWpfToolkit.ValidationRules Assembly MBFWpfToolkit.dll Validation rule for decimal input with localization support. public class DecimalValidationRule : ValidationRule Inheritance object ValidationRule DecimalValidationRule Inherited Members ValidationRule.Validate(object, CultureInfo, BindingExpressionBase) ValidationRule.Validate(object, CultureInfo, BindingGroup) ValidationRule.ValidationStep ValidationRule.ValidatesOnTargetUpdated object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DecimalValidationRule() public DecimalValidationRule() Properties IsRequired Gets or sets a value indicating whether the input is required. public bool IsRequired { get; set; } Property Value bool Maximum Gets or sets the maximum allowable value. public decimal Maximum { get; set; } Property Value decimal Minimum Gets or sets the minimum allowable value. public decimal Minimum { get; set; } Property Value decimal Methods Validate(object, CultureInfo) Validates the input value. public override ValidationResult Validate(object value, CultureInfo cultureInfo) Parameters value object The value to validate. cultureInfo CultureInfo The culture information. Returns ValidationResult A ValidationResult indicating whether the value is valid."
  },
  "api/MBFWpfToolkit.ValidationRules.DoubleValidationRule.html": {
    "href": "api/MBFWpfToolkit.ValidationRules.DoubleValidationRule.html",
    "title": "Class DoubleValidationRule | MIcroBIM Docs",
    "summary": "Class DoubleValidationRule Namespace MBFWpfToolkit.ValidationRules Assembly MBFWpfToolkit.dll Validation rule for double input with localization support. public class DoubleValidationRule : ValidationRule Inheritance object ValidationRule DoubleValidationRule Inherited Members ValidationRule.Validate(object, CultureInfo, BindingExpressionBase) ValidationRule.Validate(object, CultureInfo, BindingGroup) ValidationRule.ValidationStep ValidationRule.ValidatesOnTargetUpdated object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DoubleValidationRule() public DoubleValidationRule() Properties IsRequired Gets or sets a value indicating whether the input is required. public bool IsRequired { get; set; } Property Value bool Maximum Gets or sets the maximum allowable value. public double Maximum { get; set; } Property Value double Minimum Gets or sets the minimum allowable value. public double Minimum { get; set; } Property Value double Methods Validate(object, CultureInfo) Validates the input value. public override ValidationResult Validate(object value, CultureInfo cultureInfo) Parameters value object The value to validate. cultureInfo CultureInfo The culture information. Returns ValidationResult A ValidationResult indicating whether the value is valid."
  },
  "api/MBFWpfToolkit.ValidationRules.IntegerValidationRule.html": {
    "href": "api/MBFWpfToolkit.ValidationRules.IntegerValidationRule.html",
    "title": "Class IntegerValidationRule | MIcroBIM Docs",
    "summary": "Class IntegerValidationRule Namespace MBFWpfToolkit.ValidationRules Assembly MBFWpfToolkit.dll Validation rule for integer input with localization support. public class IntegerValidationRule : ValidationRule Inheritance object ValidationRule IntegerValidationRule Inherited Members ValidationRule.Validate(object, CultureInfo, BindingExpressionBase) ValidationRule.Validate(object, CultureInfo, BindingGroup) ValidationRule.ValidationStep ValidationRule.ValidatesOnTargetUpdated object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors IntegerValidationRule() public IntegerValidationRule() Properties IsRequired Gets or sets a value indicating whether the input is required. public bool IsRequired { get; set; } Property Value bool Maximum Gets or sets the maximum allowable value. public int Maximum { get; set; } Property Value int Minimum Gets or sets the minimum allowable value. public int Minimum { get; set; } Property Value int Methods Validate(object, CultureInfo) Validates the input value. public override ValidationResult Validate(object value, CultureInfo cultureInfo) Parameters value object The value to validate. cultureInfo CultureInfo The culture information. Returns ValidationResult A ValidationResult indicating whether the value is valid."
  },
  "api/MBFWpfToolkit.ValidationRules.StringValidationRule.html": {
    "href": "api/MBFWpfToolkit.ValidationRules.StringValidationRule.html",
    "title": "Class StringValidationRule | MIcroBIM Docs",
    "summary": "Class StringValidationRule Namespace MBFWpfToolkit.ValidationRules Assembly MBFWpfToolkit.dll Validation rule for string input with localization support. public class StringValidationRule : ValidationRule Inheritance object ValidationRule StringValidationRule Inherited Members ValidationRule.Validate(object, CultureInfo, BindingExpressionBase) ValidationRule.Validate(object, CultureInfo, BindingGroup) ValidationRule.ValidationStep ValidationRule.ValidatesOnTargetUpdated object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StringValidationRule() public StringValidationRule() Properties IsRequired Gets or sets a value indicating whether the input is required. public bool IsRequired { get; set; } Property Value bool MaximumLength Gets or sets the maximum allowable length. public int MaximumLength { get; set; } Property Value int MinimumLength Gets or sets the minimum allowable length. public int MinimumLength { get; set; } Property Value int Pattern Gets or sets the regular expression pattern for validation. public string Pattern { get; set; } Property Value string Methods Validate(object, CultureInfo) Validates the input value. public override ValidationResult Validate(object value, CultureInfo cultureInfo) Parameters value object The value to validate. cultureInfo CultureInfo The culture information. Returns ValidationResult A ValidationResult indicating whether the value is valid."
  },
  "api/MBFWpfToolkit.ValidationRules.html": {
    "href": "api/MBFWpfToolkit.ValidationRules.html",
    "title": "Namespace MBFWpfToolkit.ValidationRules | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit.ValidationRules Classes DecimalValidationRule Validation rule for decimal input with localization support. DoubleValidationRule Validation rule for double input with localization support. IntegerValidationRule Validation rule for integer input with localization support. StringValidationRule Validation rule for string input with localization support."
  },
  "api/MBFWpfToolkit.html": {
    "href": "api/MBFWpfToolkit.html",
    "title": "Namespace MBFWpfToolkit | MIcroBIM Docs",
    "summary": "Namespace MBFWpfToolkit Classes MbWindow Represents a customizable WPF window with extended properties and features, including theming, language selection, and plugin-related configurations."
  },
  "api/OnMethodBoundaryAspectCompile.MethodInfos.html": {
    "href": "api/OnMethodBoundaryAspectCompile.MethodInfos.html",
    "title": "Class MethodInfos | MIcroBIM Docs",
    "summary": "Class MethodInfos Namespace OnMethodBoundaryAspectCompile Assembly MBF.Revit.Data.dll public static class MethodInfos Inheritance object MethodInfos Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields _methodInfo_00926A69C727F9B22F51721D0444C7537E26479532368E78EAF25FBBC4507434 public static readonly MethodBase _methodInfo_00926A69C727F9B22F51721D0444C7537E26479532368E78EAF25FBBC4507434 Field Value MethodBase _methodInfo_025C0E5F8D4FAF31693CF12C1BDA3042E9947B3A6C75E52E41001C6D1495FB8E public static readonly MethodBase _methodInfo_025C0E5F8D4FAF31693CF12C1BDA3042E9947B3A6C75E52E41001C6D1495FB8E Field Value MethodBase _methodInfo_0307AB59DCDBBDEC5A6BD80A9D2271192EB0CA96CB5C03D7A5B36B9C1E039B5B public static readonly MethodBase _methodInfo_0307AB59DCDBBDEC5A6BD80A9D2271192EB0CA96CB5C03D7A5B36B9C1E039B5B Field Value MethodBase _methodInfo_033640B222553F4480E6513C4C5BD899A9820D7F310F8B72C387FA2A3AF7E003 public static readonly MethodBase _methodInfo_033640B222553F4480E6513C4C5BD899A9820D7F310F8B72C387FA2A3AF7E003 Field Value MethodBase _methodInfo_03559F3D983F91B89D6E6D6DB8B08CAD618D66C0C60F1B3A756CFBB19D19FE1A public static readonly MethodBase _methodInfo_03559F3D983F91B89D6E6D6DB8B08CAD618D66C0C60F1B3A756CFBB19D19FE1A Field Value MethodBase _methodInfo_03963C13934E05CA8200A6E1F4D1C8422912F4B7E241A750028B9A2087E10882 public static readonly MethodBase _methodInfo_03963C13934E05CA8200A6E1F4D1C8422912F4B7E241A750028B9A2087E10882 Field Value MethodBase _methodInfo_075D4CC5133076E1F604DB1FEF69CA4030364023E4D9587F4C4FB4A07EF568E9 public static readonly MethodBase _methodInfo_075D4CC5133076E1F604DB1FEF69CA4030364023E4D9587F4C4FB4A07EF568E9 Field Value MethodBase _methodInfo_098712D3C7F2EC76D0468DF812CF1E459B4611F26D7CD1E1230FCD99022AC34C public static readonly MethodBase _methodInfo_098712D3C7F2EC76D0468DF812CF1E459B4611F26D7CD1E1230FCD99022AC34C Field Value MethodBase _methodInfo_0DB308767139FEAAE5F4FA0EFD48B7ECD37A42C84CF560A2FE4ABE7E35888188 public static readonly MethodBase _methodInfo_0DB308767139FEAAE5F4FA0EFD48B7ECD37A42C84CF560A2FE4ABE7E35888188 Field Value MethodBase _methodInfo_0DC023FADA715692CF38739E5D810707AA0E40144F2AB4A6BBC0C4C71578DDCF public static readonly MethodBase _methodInfo_0DC023FADA715692CF38739E5D810707AA0E40144F2AB4A6BBC0C4C71578DDCF Field Value MethodBase _methodInfo_0DC79BC9FB91A6AF7F34F3154A8DB02CAD43A1C17A6DD55B9704B3B4CF344F90 public static readonly MethodBase _methodInfo_0DC79BC9FB91A6AF7F34F3154A8DB02CAD43A1C17A6DD55B9704B3B4CF344F90 Field Value MethodBase _methodInfo_0DC82B993C9E6EE88CE96E93488666BA69E51ECD8FDC0FC43A418264990283C0 public static readonly MethodBase _methodInfo_0DC82B993C9E6EE88CE96E93488666BA69E51ECD8FDC0FC43A418264990283C0 Field Value MethodBase _methodInfo_0DFF264B24063FE2CDEE0FE89DEA1EA0D210EBE241AB1E3145AF2B4084CF0FFA public static readonly MethodBase _methodInfo_0DFF264B24063FE2CDEE0FE89DEA1EA0D210EBE241AB1E3145AF2B4084CF0FFA Field Value MethodBase _methodInfo_0EA7D975AAC6A03379DABF0FA17FC555779705B607E612435238B124572CAF76 public static readonly MethodBase _methodInfo_0EA7D975AAC6A03379DABF0FA17FC555779705B607E612435238B124572CAF76 Field Value MethodBase _methodInfo_0FEFF9666CDCF20D385A1031F73E50C890EB307AAE691BD8F1D46A726A100E8C public static readonly MethodBase _methodInfo_0FEFF9666CDCF20D385A1031F73E50C890EB307AAE691BD8F1D46A726A100E8C Field Value MethodBase _methodInfo_1259011BED77E59AF53F60D9F9E5EC826AB12203AD1E90E55780C1574D7C0911 public static readonly MethodBase _methodInfo_1259011BED77E59AF53F60D9F9E5EC826AB12203AD1E90E55780C1574D7C0911 Field Value MethodBase _methodInfo_141880180FE22F44BA2E262FEC4A182B3EE7199EED44272184121B9E825BBD35 public static readonly MethodBase _methodInfo_141880180FE22F44BA2E262FEC4A182B3EE7199EED44272184121B9E825BBD35 Field Value MethodBase _methodInfo_17711FFA9FB98B8AF3D70EA888112F3A50F0B7574C70BB187703933B8D3574DD public static readonly MethodBase _methodInfo_17711FFA9FB98B8AF3D70EA888112F3A50F0B7574C70BB187703933B8D3574DD Field Value MethodBase _methodInfo_18072B2F8069B31F4D609619E913C79BB6E54405CCE89843FF1D1342DD4C6100 public static readonly MethodBase _methodInfo_18072B2F8069B31F4D609619E913C79BB6E54405CCE89843FF1D1342DD4C6100 Field Value MethodBase _methodInfo_18621339D7C29B73F84C60AC78528B2B7353D95BB57EEE8952494B9ED976AEBF public static readonly MethodBase _methodInfo_18621339D7C29B73F84C60AC78528B2B7353D95BB57EEE8952494B9ED976AEBF Field Value MethodBase _methodInfo_1A31276BC0DF532EFB5E6A4ECE333D6F5AD55CBAFEB2619505358DA8C76AAC47 public static readonly MethodBase _methodInfo_1A31276BC0DF532EFB5E6A4ECE333D6F5AD55CBAFEB2619505358DA8C76AAC47 Field Value MethodBase _methodInfo_1A6134722B04B7F300BABD39F85D315F01D034847553E408BBB188D8FBF54054 public static readonly MethodBase _methodInfo_1A6134722B04B7F300BABD39F85D315F01D034847553E408BBB188D8FBF54054 Field Value MethodBase _methodInfo_1F10853180CB1FC76B0F4E42B2D1E40D209E3B8B19100B199F447EDC5BFD6731 public static readonly MethodBase _methodInfo_1F10853180CB1FC76B0F4E42B2D1E40D209E3B8B19100B199F447EDC5BFD6731 Field Value MethodBase _methodInfo_20DF2AE69E39D9724E9CBE9922D61C0B05B1EFDDD0321FA3DEECAF75778DE01B public static readonly MethodBase _methodInfo_20DF2AE69E39D9724E9CBE9922D61C0B05B1EFDDD0321FA3DEECAF75778DE01B Field Value MethodBase _methodInfo_23FC48C6486DD71813B1BCCD02233B369392C2206C8A5AA6A04B3968D57653C3 public static readonly MethodBase _methodInfo_23FC48C6486DD71813B1BCCD02233B369392C2206C8A5AA6A04B3968D57653C3 Field Value MethodBase _methodInfo_257D4C60713D4891C7B4A5CF85591D907F87280E7FAFF590C2A034559E0124A4 public static readonly MethodBase _methodInfo_257D4C60713D4891C7B4A5CF85591D907F87280E7FAFF590C2A034559E0124A4 Field Value MethodBase _methodInfo_27787052737F69877866700B5BE083606971BB24EC32D47AA74830C11DB7D280 public static readonly MethodBase _methodInfo_27787052737F69877866700B5BE083606971BB24EC32D47AA74830C11DB7D280 Field Value MethodBase _methodInfo_284ADBAB968A9AE3E7400E03F3B4765A500F817E8E21CB3085F1C7CE687A8DFA public static readonly MethodBase _methodInfo_284ADBAB968A9AE3E7400E03F3B4765A500F817E8E21CB3085F1C7CE687A8DFA Field Value MethodBase _methodInfo_2A049D6FFD9BAC1A797BC122ACAF9ADA54E5A5EAF3C51031ABB814873CB8882E public static readonly MethodBase _methodInfo_2A049D6FFD9BAC1A797BC122ACAF9ADA54E5A5EAF3C51031ABB814873CB8882E Field Value MethodBase _methodInfo_2C26759ABE121A937F61D60A88DA275FB183B6514B2833885797D5B3E620A0F5 public static readonly MethodBase _methodInfo_2C26759ABE121A937F61D60A88DA275FB183B6514B2833885797D5B3E620A0F5 Field Value MethodBase _methodInfo_2D070094DECE9CB814D325B63CEF30894F0D16C6957D95E09E760EC6650C7583 public static readonly MethodBase _methodInfo_2D070094DECE9CB814D325B63CEF30894F0D16C6957D95E09E760EC6650C7583 Field Value MethodBase _methodInfo_2E1040D71846E75E04FFFF59458AE32446BE70F99CB3E1E74825BEABC8D4E785 public static readonly MethodBase _methodInfo_2E1040D71846E75E04FFFF59458AE32446BE70F99CB3E1E74825BEABC8D4E785 Field Value MethodBase _methodInfo_305DD05BFB560B2034637AFCC31477DD00551C68473095D78A5ECAF0F88B1AD8 public static readonly MethodBase _methodInfo_305DD05BFB560B2034637AFCC31477DD00551C68473095D78A5ECAF0F88B1AD8 Field Value MethodBase _methodInfo_309B221F1A08F43D2EAD5A04FB5B5145958410DE52CC0AF9485564809E73037E public static readonly MethodBase _methodInfo_309B221F1A08F43D2EAD5A04FB5B5145958410DE52CC0AF9485564809E73037E Field Value MethodBase _methodInfo_312D5642FB6BED601451B12605A85AF3F8F5A534A3862CD581D3D644350EA447 public static readonly MethodBase _methodInfo_312D5642FB6BED601451B12605A85AF3F8F5A534A3862CD581D3D644350EA447 Field Value MethodBase _methodInfo_329247C9F82D9FB3B7BAD391539CCD00CA2894D19D8BDCB35A856599F4E53923 public static readonly MethodBase _methodInfo_329247C9F82D9FB3B7BAD391539CCD00CA2894D19D8BDCB35A856599F4E53923 Field Value MethodBase _methodInfo_35F16C4396FA7FA25271D83E4903F36224A35ABE88264A3B598CB746E559D67B public static readonly MethodBase _methodInfo_35F16C4396FA7FA25271D83E4903F36224A35ABE88264A3B598CB746E559D67B Field Value MethodBase _methodInfo_36D98FD2E63F77E2D5BD18735D9255E9254EB90ED82FCB66CBA0FBB3B4F59699 public static readonly MethodBase _methodInfo_36D98FD2E63F77E2D5BD18735D9255E9254EB90ED82FCB66CBA0FBB3B4F59699 Field Value MethodBase _methodInfo_37D2C3986EB1F11A514B7C68E46B9F6B98BE6BC783625158CDCF37B2C6B80395 public static readonly MethodBase _methodInfo_37D2C3986EB1F11A514B7C68E46B9F6B98BE6BC783625158CDCF37B2C6B80395 Field Value MethodBase _methodInfo_3848E56479F55952EF7D6AB1997838AF02DAE563F5BF138DB246F1852EAAAEAC public static readonly MethodBase _methodInfo_3848E56479F55952EF7D6AB1997838AF02DAE563F5BF138DB246F1852EAAAEAC Field Value MethodBase _methodInfo_3897783CAB23302F21EBA39D32E0EBBD1C87156C1CC8EE812BFD8F6CB2484992 public static readonly MethodBase _methodInfo_3897783CAB23302F21EBA39D32E0EBBD1C87156C1CC8EE812BFD8F6CB2484992 Field Value MethodBase _methodInfo_3AC1E336FD21D9FB4E7FCB7B1B99EA6B947DC2772AA3B5873F5A8482BF86C578 public static readonly MethodBase _methodInfo_3AC1E336FD21D9FB4E7FCB7B1B99EA6B947DC2772AA3B5873F5A8482BF86C578 Field Value MethodBase _methodInfo_3ADBA4ED370B4B4EE2487F01DAE6F44E78C9F6C14284780FA02A487EA24E4AB3 public static readonly MethodBase _methodInfo_3ADBA4ED370B4B4EE2487F01DAE6F44E78C9F6C14284780FA02A487EA24E4AB3 Field Value MethodBase _methodInfo_3D003F2BF7C51FB761F364054BFD7D0545918A5D0E6167DA69C64E7D3D8EBD36 public static readonly MethodBase _methodInfo_3D003F2BF7C51FB761F364054BFD7D0545918A5D0E6167DA69C64E7D3D8EBD36 Field Value MethodBase _methodInfo_3E83D9D6B365E49E6C47BC10FCDB7ADA46D7BAB9DCC1C798B29A0A782DA59639 public static readonly MethodBase _methodInfo_3E83D9D6B365E49E6C47BC10FCDB7ADA46D7BAB9DCC1C798B29A0A782DA59639 Field Value MethodBase _methodInfo_3F7A9DF3C680C78A5E215AE0ADAE0E5D25CB88FFB2211BF68121C217DCC86DD1 public static readonly MethodBase _methodInfo_3F7A9DF3C680C78A5E215AE0ADAE0E5D25CB88FFB2211BF68121C217DCC86DD1 Field Value MethodBase _methodInfo_4049C5AD6E585062CB59AC7B2E962CF0D73D3AD4486AE09ADCECB746C2C72DFF public static readonly MethodBase _methodInfo_4049C5AD6E585062CB59AC7B2E962CF0D73D3AD4486AE09ADCECB746C2C72DFF Field Value MethodBase _methodInfo_4161DB52C52443C53F3AF8182E0A36B1FA1E88D9CA6765834816CCDE7A5B4937 public static readonly MethodBase _methodInfo_4161DB52C52443C53F3AF8182E0A36B1FA1E88D9CA6765834816CCDE7A5B4937 Field Value MethodBase _methodInfo_48387F3C93ABA84DA90C920B6E60292A97458168DBE50D557527D16E53057317 public static readonly MethodBase _methodInfo_48387F3C93ABA84DA90C920B6E60292A97458168DBE50D557527D16E53057317 Field Value MethodBase _methodInfo_490FC88971E1FA4342108DB89AD27FCFD7D3CD0BE09A4864620B06AF3F456C17 public static readonly MethodBase _methodInfo_490FC88971E1FA4342108DB89AD27FCFD7D3CD0BE09A4864620B06AF3F456C17 Field Value MethodBase _methodInfo_496EFEDD626409BE0A2DABE954ABF1830053DA12A61D1F453FD6A82C76D9849C public static readonly MethodBase _methodInfo_496EFEDD626409BE0A2DABE954ABF1830053DA12A61D1F453FD6A82C76D9849C Field Value MethodBase _methodInfo_4BA10E4FA39E251203927CD0A1E2CB47839F7091CE9CAAAAE2F20BFDB6809EF3 public static readonly MethodBase _methodInfo_4BA10E4FA39E251203927CD0A1E2CB47839F7091CE9CAAAAE2F20BFDB6809EF3 Field Value MethodBase _methodInfo_4CD2A9EDFEB2456C6D47D22EECCFD5B2EF487F8C0A76D9AA8EEECB523EE70A3F public static readonly MethodBase _methodInfo_4CD2A9EDFEB2456C6D47D22EECCFD5B2EF487F8C0A76D9AA8EEECB523EE70A3F Field Value MethodBase _methodInfo_51CC96F7C0E870857E01161C48A61552D6B048E2D61A173596858541B29C6A62 public static readonly MethodBase _methodInfo_51CC96F7C0E870857E01161C48A61552D6B048E2D61A173596858541B29C6A62 Field Value MethodBase _methodInfo_55CC5678BE31DD77603A674D10D7A50C8845DC5D56BE18249315AF8B4C181BA6 public static readonly MethodBase _methodInfo_55CC5678BE31DD77603A674D10D7A50C8845DC5D56BE18249315AF8B4C181BA6 Field Value MethodBase _methodInfo_56C5436FAA39D5D13649CFE357B8307A5ADBFB94495D8268A02E602B31C3B934 public static readonly MethodBase _methodInfo_56C5436FAA39D5D13649CFE357B8307A5ADBFB94495D8268A02E602B31C3B934 Field Value MethodBase _methodInfo_5796ED30EE1730D99C0A9FDCA1A5E6757ACA2B96069FB4BD4DEE128A565842C0 public static readonly MethodBase _methodInfo_5796ED30EE1730D99C0A9FDCA1A5E6757ACA2B96069FB4BD4DEE128A565842C0 Field Value MethodBase _methodInfo_5B581CA2DAA49B2F1E46CBFBBC44349ECA669F9BA49294C0879D7034781E240E public static readonly MethodBase _methodInfo_5B581CA2DAA49B2F1E46CBFBBC44349ECA669F9BA49294C0879D7034781E240E Field Value MethodBase _methodInfo_5C36D2D816F6748DF83581A561F5CCB133A2841FBEA6920B6FE14FB56F027A0C public static readonly MethodBase _methodInfo_5C36D2D816F6748DF83581A561F5CCB133A2841FBEA6920B6FE14FB56F027A0C Field Value MethodBase _methodInfo_5E724CC5D1C66F9913C5F95211DA1517602F9D2AFB0C8EDF367064C91E03E436 public static readonly MethodBase _methodInfo_5E724CC5D1C66F9913C5F95211DA1517602F9D2AFB0C8EDF367064C91E03E436 Field Value MethodBase _methodInfo_60967AB4825B36AD4BFCFC0C4562FDEFAF231BC9D8FC610AD125DF9663E13F86 public static readonly MethodBase _methodInfo_60967AB4825B36AD4BFCFC0C4562FDEFAF231BC9D8FC610AD125DF9663E13F86 Field Value MethodBase _methodInfo_6162A67781438A37532CAEE6E3579DA2B02951C588B8AFBB9B121ED0F06806A7 public static readonly MethodBase _methodInfo_6162A67781438A37532CAEE6E3579DA2B02951C588B8AFBB9B121ED0F06806A7 Field Value MethodBase _methodInfo_6255A9AD75AD08C173FC23454EC2170EF1AE3D00568223C84858B2A119B2F539 public static readonly MethodBase _methodInfo_6255A9AD75AD08C173FC23454EC2170EF1AE3D00568223C84858B2A119B2F539 Field Value MethodBase _methodInfo_64067E9ED11044837486E24C376F5C44138F9DBFB1336B1809D8AC7C437B8670 public static readonly MethodBase _methodInfo_64067E9ED11044837486E24C376F5C44138F9DBFB1336B1809D8AC7C437B8670 Field Value MethodBase _methodInfo_68A268DC8F7D72862EDD48553DECC8F6645C2D6CB4E117D2E56C8B0486666CDC public static readonly MethodBase _methodInfo_68A268DC8F7D72862EDD48553DECC8F6645C2D6CB4E117D2E56C8B0486666CDC Field Value MethodBase _methodInfo_68E0097A3F8686D7FE9D30B862E84636CFAAB56E92FD32D513FD330B7856F0EE public static readonly MethodBase _methodInfo_68E0097A3F8686D7FE9D30B862E84636CFAAB56E92FD32D513FD330B7856F0EE Field Value MethodBase _methodInfo_71CBE84D81D9DBFDC641B515C7E57DCF057A4D48B21AA50A5F4CE76AB41B5809 public static readonly MethodBase _methodInfo_71CBE84D81D9DBFDC641B515C7E57DCF057A4D48B21AA50A5F4CE76AB41B5809 Field Value MethodBase _methodInfo_73EC350BE0A84A5EFA90914FBCA3043D3B19D91E3D31151E14757E88DD6DB7F5 public static readonly MethodBase _methodInfo_73EC350BE0A84A5EFA90914FBCA3043D3B19D91E3D31151E14757E88DD6DB7F5 Field Value MethodBase _methodInfo_74907F38FD4A684572B900A878DC53C2D6D2DBF1D35729EA1D4884D911B7D3E6 public static readonly MethodBase _methodInfo_74907F38FD4A684572B900A878DC53C2D6D2DBF1D35729EA1D4884D911B7D3E6 Field Value MethodBase _methodInfo_7531B87CE8ED69DC1BB447611EA4A36614956EF7028D4DF1332E7897935EAD7E public static readonly MethodBase _methodInfo_7531B87CE8ED69DC1BB447611EA4A36614956EF7028D4DF1332E7897935EAD7E Field Value MethodBase _methodInfo_77DEC956CB4EB58000E5D50ECB122B76B102228788B53FFCECB31E7CA7601C14 public static readonly MethodBase _methodInfo_77DEC956CB4EB58000E5D50ECB122B76B102228788B53FFCECB31E7CA7601C14 Field Value MethodBase _methodInfo_7C0E9B811FF2665D74979DAD4A1E178ED09A5EBEFFB76962888736CD4433AA99 public static readonly MethodBase _methodInfo_7C0E9B811FF2665D74979DAD4A1E178ED09A5EBEFFB76962888736CD4433AA99 Field Value MethodBase _methodInfo_7CBF202FAD78B999FEB6EF9638F1F37AA3CBE05691B51C1FD65FEEA8F41C2C41 public static readonly MethodBase _methodInfo_7CBF202FAD78B999FEB6EF9638F1F37AA3CBE05691B51C1FD65FEEA8F41C2C41 Field Value MethodBase _methodInfo_7F8DEB88993DD246B8126324B21DA07C9EC283D8A54BE5820D300B3BFEB5AE20 public static readonly MethodBase _methodInfo_7F8DEB88993DD246B8126324B21DA07C9EC283D8A54BE5820D300B3BFEB5AE20 Field Value MethodBase _methodInfo_81B8ADED32995BA3F683D332F624D943A795346955AB993273DE5A103DDE02D0 public static readonly MethodBase _methodInfo_81B8ADED32995BA3F683D332F624D943A795346955AB993273DE5A103DDE02D0 Field Value MethodBase _methodInfo_827463E519E73D84DBBF5E2C8CFCEDD6CFFCB78559E21EBFA676ABD053DD380E public static readonly MethodBase _methodInfo_827463E519E73D84DBBF5E2C8CFCEDD6CFFCB78559E21EBFA676ABD053DD380E Field Value MethodBase _methodInfo_8317B9CA16FA34298CBBFA3038FD1074CD829A5F7897F7055A8187675E80D75E public static readonly MethodBase _methodInfo_8317B9CA16FA34298CBBFA3038FD1074CD829A5F7897F7055A8187675E80D75E Field Value MethodBase _methodInfo_85DC12474FC10EC3B6EEB698C0725FAF9D3A4715D73A17F3F39CB07CE358D2EF public static readonly MethodBase _methodInfo_85DC12474FC10EC3B6EEB698C0725FAF9D3A4715D73A17F3F39CB07CE358D2EF Field Value MethodBase _methodInfo_85DE62FBC84DD2B8E17C545E5682709982CBE615A1616EBE70EDFE6B896B70F6 public static readonly MethodBase _methodInfo_85DE62FBC84DD2B8E17C545E5682709982CBE615A1616EBE70EDFE6B896B70F6 Field Value MethodBase _methodInfo_86918767DC224811D24EEF54CEAE0AFE8014E3FAA8016F8EB887534E657CD381 public static readonly MethodBase _methodInfo_86918767DC224811D24EEF54CEAE0AFE8014E3FAA8016F8EB887534E657CD381 Field Value MethodBase _methodInfo_888FA8F9D4B2B5AF79C3DA20FC7658F1772E0B8C0FE8FC53C062A9C31BF901FB public static readonly MethodBase _methodInfo_888FA8F9D4B2B5AF79C3DA20FC7658F1772E0B8C0FE8FC53C062A9C31BF901FB Field Value MethodBase _methodInfo_8E17D2207E80F4D7F0158715A3DCAA82DEDCD80BC71C6F7B9BC57C7B684E3A7F public static readonly MethodBase _methodInfo_8E17D2207E80F4D7F0158715A3DCAA82DEDCD80BC71C6F7B9BC57C7B684E3A7F Field Value MethodBase _methodInfo_8E65A719FFE2DBC1BDB51B93789657AC8EF97E201E40E62C1688820B93AB8C59 public static readonly MethodBase _methodInfo_8E65A719FFE2DBC1BDB51B93789657AC8EF97E201E40E62C1688820B93AB8C59 Field Value MethodBase _methodInfo_8ED0C385C0E87884C83D5B689CD6B2ABDD5E0FA3DC147FB8ACEED2584949E025 public static readonly MethodBase _methodInfo_8ED0C385C0E87884C83D5B689CD6B2ABDD5E0FA3DC147FB8ACEED2584949E025 Field Value MethodBase _methodInfo_910389CCE732FA6F506E23555EF929F637A74E2B5E13F7CE4597E83F5DE67160 public static readonly MethodBase _methodInfo_910389CCE732FA6F506E23555EF929F637A74E2B5E13F7CE4597E83F5DE67160 Field Value MethodBase _methodInfo_924199C155BD01B37CBABB2D090EAA60AA18EC038C4981D9AB62791616E5779A public static readonly MethodBase _methodInfo_924199C155BD01B37CBABB2D090EAA60AA18EC038C4981D9AB62791616E5779A Field Value MethodBase _methodInfo_92DCE9FD6FFAE8435DD080E38E182FC2484CA583D67788A7203559B3ACB229F0 public static readonly MethodBase _methodInfo_92DCE9FD6FFAE8435DD080E38E182FC2484CA583D67788A7203559B3ACB229F0 Field Value MethodBase _methodInfo_951DF4346665FA7BE08345A85A235C0B4B9CBEE47BE88B8AAB21EB85C00CD120 public static readonly MethodBase _methodInfo_951DF4346665FA7BE08345A85A235C0B4B9CBEE47BE88B8AAB21EB85C00CD120 Field Value MethodBase _methodInfo_95C5F545ADF1A13E341B8A1AC9D5E7BEC536BCFAA04A1835E7867A7D6D9779C9 public static readonly MethodBase _methodInfo_95C5F545ADF1A13E341B8A1AC9D5E7BEC536BCFAA04A1835E7867A7D6D9779C9 Field Value MethodBase _methodInfo_95CE5D6F74EB60FE1C2F0000A636913FFD0C006CDBA5BFCD7E5917314AE13014 public static readonly MethodBase _methodInfo_95CE5D6F74EB60FE1C2F0000A636913FFD0C006CDBA5BFCD7E5917314AE13014 Field Value MethodBase _methodInfo_95DF7CF7655392DBD62955E98545A082894A656C7622C1C321C1F9790104528F public static readonly MethodBase _methodInfo_95DF7CF7655392DBD62955E98545A082894A656C7622C1C321C1F9790104528F Field Value MethodBase _methodInfo_96CEC655D6F8BAA7AA8AA60EFE45C6BB79BA1CBAFB3164D5FFFF3B55E7E1845B public static readonly MethodBase _methodInfo_96CEC655D6F8BAA7AA8AA60EFE45C6BB79BA1CBAFB3164D5FFFF3B55E7E1845B Field Value MethodBase _methodInfo_97B65AA5E03C39535AE4079AE7D8F210AF8DB427A031BC6E11E0D7896627A496 public static readonly MethodBase _methodInfo_97B65AA5E03C39535AE4079AE7D8F210AF8DB427A031BC6E11E0D7896627A496 Field Value MethodBase _methodInfo_9B7B2B5650338508BBBA2F4F33462BBE2CD34F86BC39BDA16A5890F95E94E794 public static readonly MethodBase _methodInfo_9B7B2B5650338508BBBA2F4F33462BBE2CD34F86BC39BDA16A5890F95E94E794 Field Value MethodBase _methodInfo_9F956B16D74F4F74FF54539A0CE204A23B569412CEE8C4DDA8DA30B445B8DFDB public static readonly MethodBase _methodInfo_9F956B16D74F4F74FF54539A0CE204A23B569412CEE8C4DDA8DA30B445B8DFDB Field Value MethodBase _methodInfo_9FEDE3781E71415329749F7965467615325BDF32367255B6FF15B88E0C152AD9 public static readonly MethodBase _methodInfo_9FEDE3781E71415329749F7965467615325BDF32367255B6FF15B88E0C152AD9 Field Value MethodBase _methodInfo_A0CCB7AC7AC56B2958B6EDB5B8D000562E47C13D508A1A0994989CAF8684C9B3 public static readonly MethodBase _methodInfo_A0CCB7AC7AC56B2958B6EDB5B8D000562E47C13D508A1A0994989CAF8684C9B3 Field Value MethodBase _methodInfo_A71B48C493D29E2B8313E53FD0672C4DBA5A075AF264536B3A67D76FBCE1A69E public static readonly MethodBase _methodInfo_A71B48C493D29E2B8313E53FD0672C4DBA5A075AF264536B3A67D76FBCE1A69E Field Value MethodBase _methodInfo_A88A393F05B0C66FAB35F01219639BDA73345531A8E206C3DCDB837FAD087523 public static readonly MethodBase _methodInfo_A88A393F05B0C66FAB35F01219639BDA73345531A8E206C3DCDB837FAD087523 Field Value MethodBase _methodInfo_AA41412B6914A1029549AD828D9CAEAEFFEAA2565561D40AF2F915CCDCA72EF0 public static readonly MethodBase _methodInfo_AA41412B6914A1029549AD828D9CAEAEFFEAA2565561D40AF2F915CCDCA72EF0 Field Value MethodBase _methodInfo_AA6641528531770FCCEF8C2F662F6EB05FB0E046BE6EB6123BB100960166FBB6 public static readonly MethodBase _methodInfo_AA6641528531770FCCEF8C2F662F6EB05FB0E046BE6EB6123BB100960166FBB6 Field Value MethodBase _methodInfo_ADA1196B8A850AB3A195806E7D910AB955BC230B7D7FB2A225F8D5206E38F069 public static readonly MethodBase _methodInfo_ADA1196B8A850AB3A195806E7D910AB955BC230B7D7FB2A225F8D5206E38F069 Field Value MethodBase _methodInfo_AF6E25137F6450D8EB4BB3213F5ACE06EA52A9E36F3A167797EBD1CBA3828681 public static readonly MethodBase _methodInfo_AF6E25137F6450D8EB4BB3213F5ACE06EA52A9E36F3A167797EBD1CBA3828681 Field Value MethodBase _methodInfo_B1B36F8B8B78EFF9E4059277CE22BA9323185B8976FB8E02C08B7F1C219BBBF0 public static readonly MethodBase _methodInfo_B1B36F8B8B78EFF9E4059277CE22BA9323185B8976FB8E02C08B7F1C219BBBF0 Field Value MethodBase _methodInfo_B2FCA7D4EF4BCA937F11B8D504BEFB89B82503D0C83D409B79211CB9CA303CA1 public static readonly MethodBase _methodInfo_B2FCA7D4EF4BCA937F11B8D504BEFB89B82503D0C83D409B79211CB9CA303CA1 Field Value MethodBase _methodInfo_B32DC168442CB323C6225D4A7250318C43E03839A4E1F9251F5C8A5FB96143BD public static readonly MethodBase _methodInfo_B32DC168442CB323C6225D4A7250318C43E03839A4E1F9251F5C8A5FB96143BD Field Value MethodBase _methodInfo_BC0E01DDF9582F39E20DAAA90E5195FFCC663483B3698600D6784FD6853417EA public static readonly MethodBase _methodInfo_BC0E01DDF9582F39E20DAAA90E5195FFCC663483B3698600D6784FD6853417EA Field Value MethodBase _methodInfo_BEAAE601ADA2FB44C138B59FE3B15784E2CCC9759050131AFDFFA91CDBE0C4FF public static readonly MethodBase _methodInfo_BEAAE601ADA2FB44C138B59FE3B15784E2CCC9759050131AFDFFA91CDBE0C4FF Field Value MethodBase _methodInfo_BED2CBD1D721B6771AFFE3AA64A169E52FD1C2B4171A966D50AC5695AFDCE30E public static readonly MethodBase _methodInfo_BED2CBD1D721B6771AFFE3AA64A169E52FD1C2B4171A966D50AC5695AFDCE30E Field Value MethodBase _methodInfo_C10D89EA5D145AD5AE6E86A3073BFFA9D03EE8EDD2A8785E09168EC35A4BD982 public static readonly MethodBase _methodInfo_C10D89EA5D145AD5AE6E86A3073BFFA9D03EE8EDD2A8785E09168EC35A4BD982 Field Value MethodBase _methodInfo_C4071C8024CEA028B080B887AE95502EE04771BA7A3F0711DAC2B879E57DD7E6 public static readonly MethodBase _methodInfo_C4071C8024CEA028B080B887AE95502EE04771BA7A3F0711DAC2B879E57DD7E6 Field Value MethodBase _methodInfo_C43C0FF907E451510298562252E3C0DA7776E4CA61102D3477DDFF8D5498BBC9 public static readonly MethodBase _methodInfo_C43C0FF907E451510298562252E3C0DA7776E4CA61102D3477DDFF8D5498BBC9 Field Value MethodBase _methodInfo_C960821796BFF9CE832EB534336C3E32E7A2C5B65B417E6B88891450826DBE8E public static readonly MethodBase _methodInfo_C960821796BFF9CE832EB534336C3E32E7A2C5B65B417E6B88891450826DBE8E Field Value MethodBase _methodInfo_CA581EDD7CAE880EEBF873600E5859CC774954D16A4561C0DA5AB62543CCAE19 public static readonly MethodBase _methodInfo_CA581EDD7CAE880EEBF873600E5859CC774954D16A4561C0DA5AB62543CCAE19 Field Value MethodBase _methodInfo_CA87307C56C9E1E3D912279E50D2CFDD521DCA453B543F3371229D8EE5671C29 public static readonly MethodBase _methodInfo_CA87307C56C9E1E3D912279E50D2CFDD521DCA453B543F3371229D8EE5671C29 Field Value MethodBase _methodInfo_CB3F1739354E1CEC89D3D6E66DEF60BA13D2EDF6434468DE4CD96CFD4B2C60F3 public static readonly MethodBase _methodInfo_CB3F1739354E1CEC89D3D6E66DEF60BA13D2EDF6434468DE4CD96CFD4B2C60F3 Field Value MethodBase _methodInfo_D34085B3DCF65D6BA44D9572511A0DD1720F7E6AFFA231143E62B3624899959F public static readonly MethodBase _methodInfo_D34085B3DCF65D6BA44D9572511A0DD1720F7E6AFFA231143E62B3624899959F Field Value MethodBase _methodInfo_D45F84FB061F5B15F0EBC89456A26A24AC5CE85B96E57D211B42CC51026BA87E public static readonly MethodBase _methodInfo_D45F84FB061F5B15F0EBC89456A26A24AC5CE85B96E57D211B42CC51026BA87E Field Value MethodBase _methodInfo_D514A7D65C13A227F532539AEF3A6C7449A4845667BD239F75E790EEBA9BF21F public static readonly MethodBase _methodInfo_D514A7D65C13A227F532539AEF3A6C7449A4845667BD239F75E790EEBA9BF21F Field Value MethodBase _methodInfo_D6785CDCA700815C4B1A3AE597ACC10854DDAA068E2CC351350271CDAA9F7499 public static readonly MethodBase _methodInfo_D6785CDCA700815C4B1A3AE597ACC10854DDAA068E2CC351350271CDAA9F7499 Field Value MethodBase _methodInfo_D81AF4E4CFA71784C60746C550B0ED46FF7A9E5A9BA8283B192662714E03B8C5 public static readonly MethodBase _methodInfo_D81AF4E4CFA71784C60746C550B0ED46FF7A9E5A9BA8283B192662714E03B8C5 Field Value MethodBase _methodInfo_D964B570E1581B1B9DCC7E0D14FA0539AACECE51B92981095D02501F02BF1AD5 public static readonly MethodBase _methodInfo_D964B570E1581B1B9DCC7E0D14FA0539AACECE51B92981095D02501F02BF1AD5 Field Value MethodBase _methodInfo_DB09760076BE208ED462C4A855178CE82AC2647757516F63E719565E1C1A163B public static readonly MethodBase _methodInfo_DB09760076BE208ED462C4A855178CE82AC2647757516F63E719565E1C1A163B Field Value MethodBase _methodInfo_E068B872A0E710683067E72834E5056A8FBE0243A2F2F6B3443D204AB96AC8C2 public static readonly MethodBase _methodInfo_E068B872A0E710683067E72834E5056A8FBE0243A2F2F6B3443D204AB96AC8C2 Field Value MethodBase _methodInfo_E07E4475F5980AF3694FA4BD0C03895EFCA3FD67475906C0F7AB36A0F5CAF137 public static readonly MethodBase _methodInfo_E07E4475F5980AF3694FA4BD0C03895EFCA3FD67475906C0F7AB36A0F5CAF137 Field Value MethodBase _methodInfo_E1A365361DACBF1AEC171889C09D6577F919E03755E3625C6264EDDC307941DC public static readonly MethodBase _methodInfo_E1A365361DACBF1AEC171889C09D6577F919E03755E3625C6264EDDC307941DC Field Value MethodBase _methodInfo_E280D82A35D9D5D898A998155946B2B45A41925362BC06786368B6E88234C643 public static readonly MethodBase _methodInfo_E280D82A35D9D5D898A998155946B2B45A41925362BC06786368B6E88234C643 Field Value MethodBase _methodInfo_E3AB0331CCDF2E7A25C604FD26DB630D72C3E0E6C0E9A4B4744A04D37B0DEF0E public static readonly MethodBase _methodInfo_E3AB0331CCDF2E7A25C604FD26DB630D72C3E0E6C0E9A4B4744A04D37B0DEF0E Field Value MethodBase _methodInfo_E6F19F65608A57E3BA33CAE219AF30C14B39B83DA1E5DCE97D235E21DA90A902 public static readonly MethodBase _methodInfo_E6F19F65608A57E3BA33CAE219AF30C14B39B83DA1E5DCE97D235E21DA90A902 Field Value MethodBase _methodInfo_E809BFD7BC171C1A96D81D1C98C22FF04F189B5BB3F887DF6585D998825354A7 public static readonly MethodBase _methodInfo_E809BFD7BC171C1A96D81D1C98C22FF04F189B5BB3F887DF6585D998825354A7 Field Value MethodBase _methodInfo_E96F03E911A9D4913B42E6F041AF6F6E2962B31659935408870401DB5AB47128 public static readonly MethodBase _methodInfo_E96F03E911A9D4913B42E6F041AF6F6E2962B31659935408870401DB5AB47128 Field Value MethodBase _methodInfo_EAF464C41BC997B1D064E17AECA884BCA279989D98EB99624B658268F9D18D5A public static readonly MethodBase _methodInfo_EAF464C41BC997B1D064E17AECA884BCA279989D98EB99624B658268F9D18D5A Field Value MethodBase _methodInfo_EC6DD8B7AA1DE3636CBDCC351A92CC8CE4B09951CE2A531F34EDB6E2CD16E8B8 public static readonly MethodBase _methodInfo_EC6DD8B7AA1DE3636CBDCC351A92CC8CE4B09951CE2A531F34EDB6E2CD16E8B8 Field Value MethodBase _methodInfo_EDC0BF1984D9EF7468BC71BB5C6C2D586DCAAF91516E7EC94181F5398003CDFC public static readonly MethodBase _methodInfo_EDC0BF1984D9EF7468BC71BB5C6C2D586DCAAF91516E7EC94181F5398003CDFC Field Value MethodBase _methodInfo_EFF4B3C5A4230E038B5B65BC0A407511957F5E4060CC3759E739207D6EA6137E public static readonly MethodBase _methodInfo_EFF4B3C5A4230E038B5B65BC0A407511957F5E4060CC3759E739207D6EA6137E Field Value MethodBase _methodInfo_F0839477CEC4CE77C74A246DFA453507D0121044946BD937D8EB38D1674E8F38 public static readonly MethodBase _methodInfo_F0839477CEC4CE77C74A246DFA453507D0121044946BD937D8EB38D1674E8F38 Field Value MethodBase _methodInfo_F2325D2528F704559D29C5E23E061F6580F189B554C81D5AC16AF9194BBFE042 public static readonly MethodBase _methodInfo_F2325D2528F704559D29C5E23E061F6580F189B554C81D5AC16AF9194BBFE042 Field Value MethodBase _methodInfo_F24DCA2381B2D98C489692DC777C126009CA6D8AC84D4AA709E079676B9E3C29 public static readonly MethodBase _methodInfo_F24DCA2381B2D98C489692DC777C126009CA6D8AC84D4AA709E079676B9E3C29 Field Value MethodBase _methodInfo_F2BF83676BB38EF604978D5240CF22EEA2FC972254ABED88A3FF81BD601470C0 public static readonly MethodBase _methodInfo_F2BF83676BB38EF604978D5240CF22EEA2FC972254ABED88A3FF81BD601470C0 Field Value MethodBase _methodInfo_F41D9675F1EF4AEA36860DF367B2AC64B163B7661F5C73AC149066CC9CDD4ADC public static readonly MethodBase _methodInfo_F41D9675F1EF4AEA36860DF367B2AC64B163B7661F5C73AC149066CC9CDD4ADC Field Value MethodBase _methodInfo_F4A0B5B9BF29DC813F8DA933EE473BB9DD7688B89DB438D95214105AE56BE56B public static readonly MethodBase _methodInfo_F4A0B5B9BF29DC813F8DA933EE473BB9DD7688B89DB438D95214105AE56BE56B Field Value MethodBase _methodInfo_F5C2E9EBDC94D456522B014D502F383F84D3B6F5EDEF04A2AACFC784AABAEA61 public static readonly MethodBase _methodInfo_F5C2E9EBDC94D456522B014D502F383F84D3B6F5EDEF04A2AACFC784AABAEA61 Field Value MethodBase _methodInfo_F718D5FF2C33CF1CB479ADF2FBFEB08C668BF66B4796B0FBF946D461618CC939 public static readonly MethodBase _methodInfo_F718D5FF2C33CF1CB479ADF2FBFEB08C668BF66B4796B0FBF946D461618CC939 Field Value MethodBase _methodInfo_F9E272D3B1CF088FEAE5CDFE1FE92BCF49EC71F429484ADD81A6030CDD7C3FD5 public static readonly MethodBase _methodInfo_F9E272D3B1CF088FEAE5CDFE1FE92BCF49EC71F429484ADD81A6030CDD7C3FD5 Field Value MethodBase _methodInfo_FA673C61C4D1DCDEDE59EB7E95A6F1730A8281F83920AE58BD79E765B5A395EB public static readonly MethodBase _methodInfo_FA673C61C4D1DCDEDE59EB7E95A6F1730A8281F83920AE58BD79E765B5A395EB Field Value MethodBase _methodInfo_FD409DDCCC651A9A2BE2654B0D6DBF60513902E70EEF82C7A2C662536D4699EB public static readonly MethodBase _methodInfo_FD409DDCCC651A9A2BE2654B0D6DBF60513902E70EEF82C7A2C662536D4699EB Field Value MethodBase _methodInfo_FD69BAB8E1946BA5283192625983D8AE5332A9FE151C8C23E6EE655AFDB1C418 public static readonly MethodBase _methodInfo_FD69BAB8E1946BA5283192625983D8AE5332A9FE151C8C23E6EE655AFDB1C418 Field Value MethodBase"
  },
  "api/OnMethodBoundaryAspectCompile.html": {
    "href": "api/OnMethodBoundaryAspectCompile.html",
    "title": "Namespace OnMethodBoundaryAspectCompile | MIcroBIM Docs",
    "summary": "Namespace OnMethodBoundaryAspectCompile Classes MethodInfos"
  },
  "api/Revit.Extensions.Elements.PipeExtensions.html": {
    "href": "api/Revit.Extensions.Elements.PipeExtensions.html",
    "title": "Class PipeExtensions | MIcroBIM Docs",
    "summary": "Class PipeExtensions Namespace Revit.Extensions.Elements Assembly Revit.Extensions.dll Provides extension methods for Pipe elements in Revit. public static class PipeExtensions Inheritance object PipeExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetEndPoints(Pipe) Retrieves the endpoints of a pipe as a list of XYZ points. public static MbResult<List<XYZ>> GetEndPoints(this Pipe pipe) Parameters pipe Pipe The pipe to get the endpoints for. Returns MbResult<List<XYZ>> An MbResult<T> containing the list of endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetLineOfPipe(Pipe) Gets the line representing the pipe's geometry. public static MbResult<Line> GetLineOfPipe(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the line from. Returns MbResult<Line> An MbResult<T> containing the line or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestEndPoints(Pipe, XYZ) Finds the nearest and farthest endpoints of a pipe relative to a specified point. public static MbResult<List<XYZ>> GetNearestEndPoints(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to find endpoints for. point XYZ The reference point for distance comparison. Returns MbResult<List<XYZ>> An MbResult<T> containing a list of nearest and farthest endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestOneSideConnector(Pipe, XYZ) Finds the nearest one-side connector on a pipe to a specified point. public static MbResult<Connector> GetNearestOneSideConnector(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to search for connectors. point XYZ The point to measure the distance from. Returns MbResult<Connector> An MbResult<T> containing the nearest connector or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"No connectors found on the pipe.\" - Returned if the pipe does not have any valid connectors. \"An error occurred while finding the nearest connector: {ErrorMessage}\" - Returned if an unexpected exception occurs. GetPipeCurve(Pipe) Gets the curve representing the pipe's geometry. public static MbResult<Curve> GetPipeCurve(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the curve from. Returns MbResult<Curve> An MbResult<T> containing the curve or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetPipingSystemType(Pipe, Document) Gets the piping system type associated with a pipe. public static MbResult<PipingSystemType> GetPipingSystemType(this Pipe pipe, Document document) Parameters pipe Pipe The pipe to retrieve the piping system type for. document Document The Revit document containing the pipe. Returns MbResult<PipingSystemType> An MbResult<T> containing the piping system type or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The document cannot be null.\" - Returned if the input document is null. \"The pipe is not associated with a piping system.\" - Returned if the pipe is not part of a piping system. \"Failed to retrieve the piping system type.\" - Returned if the piping system type cannot be retrieved. \"An error occurred while retrieving the piping system type: {ErrorMessage}\" - Returned if an unexpected exception occurs."
  },
  "api/Revit.Extensions.Elements.SpaceExtensions.html": {
    "href": "api/Revit.Extensions.Elements.SpaceExtensions.html",
    "title": "Class SpaceExtensions | MIcroBIM Docs",
    "summary": "Class SpaceExtensions Namespace Revit.Extensions.Elements Assembly Revit.Extensions.dll Provides extension methods for Space elements in Revit. public static class SpaceExtensions Inheritance object SpaceExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetBoundarySegment(Space) Retrieves the boundary segments of a space as a list of curves. public static MbResult<List<Curve>> GetBoundarySegment(this Space space) Parameters space Space The space to get the boundary segments for. Returns MbResult<List<Curve>> An MbResult<T> containing: A list of boundary curves if the operation is successful. An error message if the operation fails. Possible error messages include: Validate(Space) Validates the space object to ensure it is valid and has a positive area. public static MbResult<bool> Validate(this Space space) Parameters space Space The space to validate. Returns MbResult<bool> An MbResult<T> containing: true if the space is valid. An error message if the validation fails. Possible error messages include:"
  },
  "api/Revit.Extensions.Elements.html": {
    "href": "api/Revit.Extensions.Elements.html",
    "title": "Namespace Revit.Extensions.Elements | MIcroBIM Docs",
    "summary": "Namespace Revit.Extensions.Elements Classes PipeExtensions Provides extension methods for Pipe elements in Revit. SpaceExtensions Provides extension methods for Space elements in Revit."
  },
  "api/Revit.Extensions.Extensions.CollectionExtensions.html": {
    "href": "api/Revit.Extensions.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | MIcroBIM Docs",
    "summary": "Class CollectionExtensions Namespace Revit.Extensions.Extensions Assembly Revit.Extensions.dll Provides extension methods for working with collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToObservableCollection<T>(IEnumerable<T>) Converts an enumerable collection to an ObservableCollection. public static ObservableCollection<T> ToObservableCollection<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source enumerable collection to convert. Returns ObservableCollection<T> An ObservableCollection containing the elements from the source. Type Parameters T The type of elements in the collection."
  },
  "api/Revit.Extensions.Extensions.DocumentExtensions.html": {
    "href": "api/Revit.Extensions.Extensions.DocumentExtensions.html",
    "title": "Class DocumentExtensions | MIcroBIM Docs",
    "summary": "Class DocumentExtensions Namespace Revit.Extensions.Extensions Assembly Revit.Extensions.dll Provides extension methods for the Autodesk Revit API with the result pattern for better error handling. public static class DocumentExtensions Inheritance object DocumentExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateAndPlaceColumnAtPoint(Document, XYZ, FamilySymbol, Level, Level) Creates and places a column at a specified point in the Revit document. public static MbResult<FamilyInstance> CreateAndPlaceColumnAtPoint(this Document doc, XYZ point, FamilySymbol columnType, Level baseLevel, Level topLevel) Parameters doc Document The Revit document where the column will be placed. point XYZ The XYZ point where the column will be placed. columnType FamilySymbol The FamilySymbol representing the column type. baseLevel Level The base level of the column. topLevel Level The top level of the column. Returns MbResult<FamilyInstance> An MbResult<T> containing: The created FamilyInstance if successful. An error message if any input is invalid or column creation fails. GetAllRevitDocuments(Document) Retrieves the base document and all linked Revit documents. public static List<Document> GetAllRevitDocuments(this Document doc) Parameters doc Document The base Revit document. Returns List<Document> A list of Revit Autodesk.Revit.DB.Document instances including the base and all linked documents. GetFamilyTypesByCategoryOrderedByName(Document, BuiltInCategory) Retrieves all family types of the specified category from the given Revit document as an ObservableCollection. public static MbResult<ObservableCollection<FamilySymbol>> GetFamilyTypesByCategoryOrderedByName(this Document doc, BuiltInCategory category) Parameters doc Document The Revit document to search for family types. category BuiltInCategory The BuiltInCategory to filter family types. Returns MbResult<ObservableCollection<FamilySymbol>> An MbResult<T> containing: An ObservableCollection of FamilySymbol objects if successful. An error message if the document or category is invalid. GetLevelsOrderedByProperty<TKey>(Document, Func<Level, TKey>, bool) Retrieves all levels from the specified Revit document as an ObservableCollection, ordered dynamically by a specified property. public static MbResult<ObservableCollection<Level>> GetLevelsOrderedByProperty<TKey>(this Document doc, Func<Level, TKey> keySelector, bool ascending = true) Parameters doc Document The Revit document to search for levels. keySelector Func<Level, TKey> A function to extract a key from a Level for ordering. ascending bool If true, orders levels in ascending order; otherwise, descending. Returns MbResult<ObservableCollection<Level>> An MbResult<T> containing: An ObservableCollection of Level objects if successful. An error message if the document or keySelector is null. Type Parameters TKey The type of the property used for ordering. GetLinkedDocumentsOnly(Document) Retrieves only the linked Revit documents associated with the given base document. public static List<Document> GetLinkedDocumentsOnly(this Document doc) Parameters doc Document The base Revit document. Returns List<Document> A list of linked Autodesk.Revit.DB.Document instances. GetRebarBarTypes(Document) Retrieves all rebar bar types from the specified Revit document as an ObservableCollection. public static MbResult<ObservableCollection<RebarBarType>> GetRebarBarTypes(this Document doc) Parameters doc Document The Revit document to retrieve rebar bar types from. Returns MbResult<ObservableCollection<RebarBarType>> An MbResult<T> containing: An ObservableCollection of RebarBarType objects if successful. An error message if the document is null. GetRebarShapes(Document) Retrieves all rebar shapes from the specified Revit document. public static MbResult<List<RebarShape>> GetRebarShapes(this Document doc) Parameters doc Document The Revit document to retrieve rebar shapes from. Returns MbResult<List<RebarShape>> An MbResult<T> containing: A list of RebarShape objects if successful. An error message if the document is null. SearchOrCreate3DView(Document, string, bool) Searches for a 3D view with the specified name. If it exists, returns it. Optionally, creates a new 3D view if specified. public static MbResult<View3D> SearchOrCreate3DView(this Document doc, string viewName, bool createView = false) Parameters doc Document The Revit document to search or create the 3D view in. viewName string The name of the 3D view to search for or create. createView bool If true, creates a new 3D view if one does not exist. Returns MbResult<View3D> An MbResult<T> containing: The existing or newly created Autodesk.Revit.DB.View3D object if successful. An error message if the document is null, the view name is invalid, or creation fails."
  },
  "api/Revit.Extensions.Extensions.PipeExtensions.html": {
    "href": "api/Revit.Extensions.Extensions.PipeExtensions.html",
    "title": "Class PipeExtensions | MIcroBIM Docs",
    "summary": "Class PipeExtensions Namespace Revit.Extensions.Extensions Assembly Revit.Extensions.dll Provides extension methods for Pipe elements in Revit. public static class PipeExtensions Inheritance object PipeExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetEndPoints(Pipe) Retrieves the endpoints of a pipe as a list of XYZ points. public static MbResult<List<XYZ>> GetEndPoints(this Pipe pipe) Parameters pipe Pipe The pipe to get the endpoints for. Returns MbResult<List<XYZ>> An MbResult<T> containing the list of endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetLineOfPipe(Pipe) Gets the line representing the pipe's geometry. public static MbResult<Line> GetLineOfPipe(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the line from. Returns MbResult<Line> An MbResult<T> containing the line or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestEndPoints(Pipe, XYZ) Finds the nearest and farthest endpoints of a pipe relative to a specified point. public static MbResult<List<XYZ>> GetNearestEndPoints(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to find endpoints for. point XYZ The reference point for distance comparison. Returns MbResult<List<XYZ>> An MbResult<T> containing a list of nearest and farthest endpoints or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetNearestOneSideConnector(Pipe, XYZ) Finds the nearest one-side connector on a pipe to a specified point. public static MbResult<Connector> GetNearestOneSideConnector(this Pipe pipe, XYZ point) Parameters pipe Pipe The pipe to search for connectors. point XYZ The point to measure the distance from. Returns MbResult<Connector> An MbResult<T> containing the nearest connector or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The reference point cannot be null.\" - Returned if the input point is null. \"No connectors found on the pipe.\" - Returned if the pipe does not have any valid connectors. \"An error occurred while finding the nearest connector: {ErrorMessage}\" - Returned if an unexpected exception occurs. GetPipeCurve(Pipe) Gets the curve representing the pipe's geometry. public static MbResult<Curve> GetPipeCurve(this Pipe pipe) Parameters pipe Pipe The pipe to retrieve the curve from. Returns MbResult<Curve> An MbResult<T> containing the curve or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The pipe does not have a valid LocationCurve.\" - Returned if the pipe's location is not a valid curve. GetPipingSystemType(Pipe, Document) Gets the piping system type associated with a pipe. public static MbResult<PipingSystemType> GetPipingSystemType(this Pipe pipe, Document document) Parameters pipe Pipe The pipe to retrieve the piping system type for. document Document The Revit document containing the pipe. Returns MbResult<PipingSystemType> An MbResult<T> containing the piping system type or an error message. Possible error messages: \"The pipe cannot be null.\" - Returned if the input pipe is null. \"The document cannot be null.\" - Returned if the input document is null. \"The pipe is not associated with a piping system.\" - Returned if the pipe is not part of a piping system. \"Failed to retrieve the piping system type.\" - Returned if the piping system type cannot be retrieved. \"An error occurred while retrieving the piping system type: {ErrorMessage}\" - Returned if an unexpected exception occurs."
  },
  "api/Revit.Extensions.Extensions.SpaceExtensions.html": {
    "href": "api/Revit.Extensions.Extensions.SpaceExtensions.html",
    "title": "Class SpaceExtensions | MIcroBIM Docs",
    "summary": "Class SpaceExtensions Namespace Revit.Extensions.Extensions Assembly Revit.Extensions.dll Provides extension methods for Space elements in Revit. public static class SpaceExtensions Inheritance object SpaceExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetBoundarySegment(Space) Retrieves the boundary segments of a space as a list of curves. public static MbResult<List<Curve>> GetBoundarySegment(this Space space) Parameters space Space The space to get the boundary segments for. Returns MbResult<List<Curve>> An MbResult<T> containing: A list of boundary curves if the operation is successful. An error message if the operation fails. Possible error messages include: Validate(Space) Validates the space object to ensure it is valid and has a positive area. public static MbResult<bool> Validate(this Space space) Parameters space Space The space to validate. Returns MbResult<bool> An MbResult<T> containing: true if the space is valid. An error message if the validation fails. Possible error messages include:"
  },
  "api/Revit.Extensions.Extensions.ViewExtensions.html": {
    "href": "api/Revit.Extensions.Extensions.ViewExtensions.html",
    "title": "Class ViewExtensions | MIcroBIM Docs",
    "summary": "Class ViewExtensions Namespace Revit.Extensions.Extensions Assembly Revit.Extensions.dll Provides extension methods for Revit views. public static class ViewExtensions Inheritance object ViewExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetVisibleElements(View, Document) Retrieves all elements that are visible in the specified Revit view. public static MbResult<List<Element>> GetVisibleElements(this View view, Document document) Parameters view View The Revit view to search for visible elements. document Document The Revit document containing the view. Returns MbResult<List<Element>> An MbResult<T> object containing: A list of elements visible in the specified view if the operation is successful. A failure result with the following error messages for invalid parameters: \"The view parameter cannot be null.\" \"The document parameter cannot be null.\""
  },
  "api/Revit.Extensions.Extensions.html": {
    "href": "api/Revit.Extensions.Extensions.html",
    "title": "Namespace Revit.Extensions.Extensions | MIcroBIM Docs",
    "summary": "Namespace Revit.Extensions.Extensions Classes CollectionExtensions Provides extension methods for working with collections. DocumentExtensions Provides extension methods for the Autodesk Revit API with the result pattern for better error handling. PipeExtensions Provides extension methods for Pipe elements in Revit. SpaceExtensions Provides extension methods for Space elements in Revit. ViewExtensions Provides extension methods for Revit views."
  },
  "api/Revit.Extensions.Selections.SelectionExtensions.html": {
    "href": "api/Revit.Extensions.Selections.SelectionExtensions.html",
    "title": "Class SelectionExtensions | MIcroBIM Docs",
    "summary": "Class SelectionExtensions Namespace Revit.Extensions.Selections Assembly Revit.Extensions.dll Provides extension methods for retrieving selected elements of specific types from a UIDocument. public static class SelectionExtensions Inheritance object SelectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetSelectedElements<T>(UIDocument) Gets the selected elements of the specified type from the document. public static List<T> GetSelectedElements<T>(this UIDocument uiDocument) where T : Element Parameters uiDocument UIDocument The UIDocument to get the selected elements from. Returns List<T> A list of the selected elements of the specified type. Type Parameters T The type of elements to get. GetSelectedFamilyInstances(UIDocument) Gets the selected family instances from the document. public static List<FamilyInstance> GetSelectedFamilyInstances(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected family instances from. Returns List<FamilyInstance> A list of the selected family instances. GetSelectedPipes(UIDocument) Gets the selected pipes from the document. public static List<Pipe> GetSelectedPipes(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected pipes from. Returns List<Pipe> A list of the selected pipes. GetSelectedSpaces(UIDocument) Gets the selected spaces from the document. public static List<Space> GetSelectedSpaces(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected spaces from. Returns List<Space> A list of the selected spaces. GetSelectedSprinklers(UIDocument) Gets the selected sprinklers from the document. Filters the selected FamilyInstance elements to return only those categorized as BuiltInCategory.OST_Sprinklers. public static List<FamilyInstance> GetSelectedSprinklers(this UIDocument uiDocument) Parameters uiDocument UIDocument The UI document to get the selected sprinklers from. Returns List<FamilyInstance> A list of the selected sprinkler family instances."
  },
  "api/Revit.Extensions.Selections.html": {
    "href": "api/Revit.Extensions.Selections.html",
    "title": "Namespace Revit.Extensions.Selections | MIcroBIM Docs",
    "summary": "Namespace Revit.Extensions.Selections Classes SelectionExtensions Provides extension methods for retrieving selected elements of specific types from a UIDocument."
  },
  "api/Revit.Extensions.Unit.MbUnitExtensions.html": {
    "href": "api/Revit.Extensions.Unit.MbUnitExtensions.html",
    "title": "Class MbUnitExtensions | MIcroBIM Docs",
    "summary": "Class MbUnitExtensions Namespace Revit.Extensions.Unit Assembly Revit.Extensions.dll Provides utility methods and properties for working with Revit units, including conversion to and from internal units and determining document unit type. public static class MbUnitExtensions Inheritance object MbUnitExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Accuracy The accuracy used in the current document's unit formatting options. public static double Accuracy Field Value double IsImperial Indicates whether the current document uses imperial units. public static bool IsImperial Field Value bool Methods ConvertFromInternalUnits(double) Converts a value from Revit's internal length units to millimeters. public static double ConvertFromInternalUnits(this double value) Parameters value double The value in internal units. Returns double The converted value in millimeters. ConvertToInternalLength(double) Converts a value from millimeters to Revit's internal length units. public static double ConvertToInternalLength(this double value) Parameters value double The value in millimeters. Returns double The converted value in internal units. IdentifyDocument(Document) Identifies and sets the Accuracy and IsImperial properties based on the unit settings of the given Revit Autodesk.Revit.DB.Document. public static void IdentifyDocument(Document document) Parameters document Document The Revit document to analyze."
  },
  "api/Revit.Extensions.Unit.html": {
    "href": "api/Revit.Extensions.Unit.html",
    "title": "Namespace Revit.Extensions.Unit | MIcroBIM Docs",
    "summary": "Namespace Revit.Extensions.Unit Classes MbUnitExtensions Provides utility methods and properties for working with Revit units, including conversion to and from internal units and determining document unit type."
  },
  "index.html": {
    "href": "index.html",
    "title": "MicroBIM Fire – Developer Docs | MIcroBIM Docs",
    "summary": "\uD83D\uDC68‍\uD83D\uDCBB MicroBIM Developer Documentation Welcome to the official documentation for MicroBIM Fire. This documentation is intended for developers only. It provides technical references and documentation for the MicroBIM codebase and tools. \uD83D\uDD17 Follow Us \uD83D\uDCCC Code Policy – MicroBIM This document outlines the coding standards and collaboration practices for our team to ensure consistency, quality, and maintainability across all projects. 1. Code Formatting Use 4 spaces for indentation (no tabs). Follow standard C# naming conventions: PascalCase for class names, methods, and properties. camelCase for local variables and parameters. ALL_CAPS for constants. Place using directives inside the namespace. Always include XML documentation for public members. Use expression-bodied members for simple one-liners when appropriate. Tools: All code must be auto-formatted using the IDE’s code formatting tools (e.g., Visual Studio or Rider). Consider using .editorconfig to enforce formatting. 2. Branching Strategy Main branches: main: Stable production-ready code. develop: Latest development changes. Feature branches: Naming convention: feature/short-description Branch off: develop Bugfix branches: Naming convention: bugfix/short-description Branch off: develop or main depending on context Release branches: Naming convention: release/x.y.z \uD83D\uDD01 All branches must be regularly updated with develop or main before creating a pull request. 3. Pull Request Process PRs should target develop unless it's a hotfix. Each PR should be linked to a work item (task, bug, story). PR title must be clear and descriptive. Provide a meaningful description including: Purpose of the change Any blockers or pending tasks Screenshots or test results (if applicable) 4. Review Guidelines At least one reviewer is required before merging. Use suggestions instead of just comments when possible. Focus on: Code clarity Business logic correctness Performance and scalability Potential bugs or edge cases Reviewers should respond within 24 working hours. ❗ No code should be merged without a proper review. 5. Testing Requirements All features must include unit tests. Critical logic should be covered by integration tests. ✅ All tests must pass before a PR is approved. Use mocking where external dependencies are involved. Prefer automated testing over manual testing whenever possible. 6. Commit Message Conventions Use imperative tone: Add user authentication, not Added or Adding. Use the following structure: [Type] Short summary (max 72 characters) Optional longer description. Wrap at 100 characters. References: #TicketNumber Common types: feat: New feature fix: Bug fix refactor: Code refactoring (no feature or fix) test: Adding or updating tests docs: Documentation only changes chore: Maintenance tasks (build config, CI, etc.) 7. Logging and Error Handling Use a consistent logging framework such as Serilog or NLog across the entire codebase. All exceptions and errors must be logged with sufficient detail to allow effective debugging: Include exception message, stack trace, and contextual data. ❌ Never silently swallow exceptions: ❌ catch { } ✅ catch (Exception ex) { _logger.LogError(ex, \"Error occurred while processing user request.\"); } When necessary, rethrow exceptions using throw; to preserve the stack trace. 8. Code Comments and Documentation Use XML documentation comments (///) on all public classes, methods, properties, and interfaces. These will be used for IntelliSense and API documentation. Example: /// <summary> /// Gets a list of users based on the specified role. /// </summary> /// <param name=\"role\">The role to filter users by.</param> /// <returns>A list of users in the given role.</returns> public List<User> GetUsersByRole(string role) { ... } Use inline comments sparingly: ✅ // This workaround is needed due to a bug in the third-party library. ❌ // Increase i by 1 Always keep comments up to date. Outdated or misleading comments must be removed or corrected. 9. Standardized Operation Results – MbResult<T> To ensure consistent handling of operation outcomes and avoid using null or exception-based flow for regular control, all methods that return the result of an operation must use the MbResult<T> class from MB.Common.Utils.Result. ✅ Usage Guidelines Use MbResult<T>.Success(value) when the operation completes successfully. Use MbResult<T>.Failure(errorMessage) when the operation fails with a meaningful error message. Never return null or raw objects for operations that can fail. Avoid throwing exceptions for expected control flow; instead, use MbResult<T> to indicate success or failure. \uD83D\uDCCC Benefits Encourages safe and predictable method contracts. Improves readability and exception traceability. Works across all Revit versions with conditional compilation support. \uD83E\uDDEA Example public static MbResult<ObservableCollection<FamilySymbol>> GetFamilyTypesByCategoryOrderedByName(this Document doc, BuiltInCategory category) { if (doc == null) return MbResult<ObservableCollection<FamilySymbol>>.Failure(\"The Revit document cannot be null.\"); try { var familyTypes = new FilteredElementCollector(doc) .OfClass(typeof(FamilySymbol)) .OfCategory(category) .Cast<FamilySymbol>() .OrderBy(f => f.Name) .ToList(); return MbResult<ObservableCollection<FamilySymbol>>.Success(new ObservableCollection<FamilySymbol>(familyTypes)); } catch (Exception ex) { return MbResult<ObservableCollection<FamilySymbol>>.Failure($\"An error occurred: {ex.Message}\"); } } ⚠ Enforcement Any method that involves possible failure or data lookup must use MbResult<T> instead of returning raw types or throwing exceptions directly. ## \uD83D\uDCE6 Download NuGet Package You can download the latest version of the `MicroBIM.Revit.Template` package below: [Download MicroBIM.Revit.Template.1.2.0.nupkg](downloads/MicroBIM.Revit.Template.1.2.0.nupkg) > Place the `.nupkg` file inside your `downloads/` folder before building the docs."
  }
}